(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

//
// We store our EE objects in a plain object whose properties are event names.
// If `Object.create(null)` is not supported we prefix the event names with a
// `~` to make sure that the built-in object properties are not overridden or
// used as an attack vector.
// We also assume that `Object.create(null)` is available when the event name
// is an ES6 Symbol.
//
var prefix = typeof Object.create !== 'function' ? '~' : false;

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} once Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Holds the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @param {Boolean} exists We only need to know if there are listeners.
 * @returns {Array|Boolean}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event, exists) {
  var evt = prefix ? prefix + event : event
    , available = this._events && this._events[evt];

  if (exists) return !!available;
  if (!available) return [];
  if (available.fn) return [available.fn];

  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
    ee[i] = available[i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true)
    , evt = prefix ? prefix + event : event;

  if (!this._events) this._events = prefix ? {} : Object.create(null);
  if (!this._events[evt]) this._events[evt] = listener;
  else {
    if (!this._events[evt].fn) this._events[evt].push(listener);
    else this._events[evt] = [
      this._events[evt], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Mixed} context Only remove listeners matching this context.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events || !this._events[evt]) return this;

  var listeners = this._events[evt]
    , events = [];

  if (fn) {
    if (listeners.fn) {
      if (
           listeners.fn !== fn
        || (once && !listeners.once)
        || (context && listeners.context !== context)
      ) {
        events.push(listeners);
      }
    } else {
      for (var i = 0, length = listeners.length; i < length; i++) {
        if (
             listeners[i].fn !== fn
          || (once && !listeners[i].once)
          || (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[evt] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[evt];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[prefix ? prefix + event : event];
  else this._events = prefix ? {} : Object.create(null);

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],2:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var RenderNode = require('./RenderNode');
var EventHandler = require('./EventHandler');
var ElementAllocator = require('./ElementAllocator');
var Transform = require('./Transform');
var Transitionable = require('../transitions/Transitionable');
var _zeroZero = [
    0,
    0
];
var usePrefix = !('perspective' in document.documentElement.style);
function _getElementSize() {
    var element = this.container;
    return [
        element.clientWidth,
        element.clientHeight
    ];
}
var _setPerspective = usePrefix ? function (element, perspective) {
    element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';
} : function (element, perspective) {
    element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';
};
function Context(container) {
    this.container = container;
    this._allocator = new ElementAllocator(container);
    this._node = new RenderNode();
    this._eventOutput = new EventHandler();
    this._size = _getElementSize.call(this);
    this._perspectiveState = new Transitionable(0);
    this._perspective = undefined;
    this._nodeContext = {
        allocator: this._allocator,
        transform: Transform.identity,
        opacity: 1,
        origin: _zeroZero,
        align: _zeroZero,
        size: this._size
    };
    this._eventOutput.on('resize', function () {
        this.setSize(_getElementSize.call(this));
    }.bind(this));
}
Context.prototype.getAllocator = function getAllocator() {
    return this._allocator;
};
Context.prototype.add = function add(obj) {
    return this._node.add(obj);
};
Context.prototype.migrate = function migrate(container) {
    if (container === this.container)
        return;
    this.container = container;
    this._allocator.migrate(container);
};
Context.prototype.getSize = function getSize() {
    return this._size;
};
Context.prototype.setSize = function setSize(size) {
    if (!size)
        size = _getElementSize.call(this);
    this._size[0] = size[0];
    this._size[1] = size[1];
};
Context.prototype.update = function update(contextParameters) {
    if (contextParameters) {
        if (contextParameters.transform)
            this._nodeContext.transform = contextParameters.transform;
        if (contextParameters.opacity)
            this._nodeContext.opacity = contextParameters.opacity;
        if (contextParameters.origin)
            this._nodeContext.origin = contextParameters.origin;
        if (contextParameters.align)
            this._nodeContext.align = contextParameters.align;
        if (contextParameters.size)
            this._nodeContext.size = contextParameters.size;
    }
    var perspective = this._perspectiveState.get();
    if (perspective !== this._perspective) {
        _setPerspective(this.container, perspective);
        this._perspective = perspective;
    }
    this._node.commit(this._nodeContext);
};
Context.prototype.getPerspective = function getPerspective() {
    return this._perspectiveState.get();
};
Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {
    return this._perspectiveState.set(perspective, transition, callback);
};
Context.prototype.emit = function emit(type, event) {
    return this._eventOutput.emit(type, event);
};
Context.prototype.on = function on(type, handler) {
    return this._eventOutput.on(type, handler);
};
Context.prototype.removeListener = function removeListener(type, handler) {
    return this._eventOutput.removeListener(type, handler);
};
Context.prototype.pipe = function pipe(target) {
    return this._eventOutput.pipe(target);
};
Context.prototype.unpipe = function unpipe(target) {
    return this._eventOutput.unpipe(target);
};
module.exports = Context;
},{"../transitions/Transitionable":89,"./ElementAllocator":3,"./EventHandler":8,"./RenderNode":12,"./Transform":16}],3:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function ElementAllocator(container) {
    if (!container)
        container = document.createDocumentFragment();
    this.container = container;
    this.detachedNodes = {};
    this.nodeCount = 0;
}
ElementAllocator.prototype.migrate = function migrate(container) {
    var oldContainer = this.container;
    if (container === oldContainer)
        return;
    if (oldContainer instanceof DocumentFragment) {
        container.appendChild(oldContainer);
    } else {
        while (oldContainer.hasChildNodes()) {
            container.appendChild(oldContainer.firstChild);
        }
    }
    this.container = container;
};
ElementAllocator.prototype.allocate = function allocate(type) {
    type = type.toLowerCase();
    if (!(type in this.detachedNodes))
        this.detachedNodes[type] = [];
    var nodeStore = this.detachedNodes[type];
    var result;
    if (nodeStore.length > 0) {
        result = nodeStore.pop();
    } else {
        result = document.createElement(type);
        this.container.appendChild(result);
    }
    this.nodeCount++;
    return result;
};
ElementAllocator.prototype.deallocate = function deallocate(element) {
    var nodeType = element.nodeName.toLowerCase();
    var nodeStore = this.detachedNodes[nodeType];
    nodeStore.push(element);
    this.nodeCount--;
};
ElementAllocator.prototype.getNodeCount = function getNodeCount() {
    return this.nodeCount;
};
module.exports = ElementAllocator;
},{}],4:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('./Entity');
var EventHandler = require('./EventHandler');
var Transform = require('./Transform');
var usePrefix = !('transform' in document.documentElement.style);
var devicePixelRatio = window.devicePixelRatio || 1;
function ElementOutput(element) {
    this._matrix = null;
    this._opacity = 1;
    this._origin = null;
    this._size = null;
    this._eventOutput = new EventHandler();
    this._eventOutput.bindThis(this);
    this.eventForwarder = function eventForwarder(event) {
        this._eventOutput.emit(event.type, event);
    }.bind(this);
    this.id = Entity.register(this);
    this._element = null;
    this._sizeDirty = false;
    this._originDirty = false;
    this._transformDirty = false;
    this._invisible = false;
    if (element)
        this.attach(element);
}
ElementOutput.prototype.on = function on(type, fn) {
    if (this._element)
        this._element.addEventListener(type, this.eventForwarder);
    this._eventOutput.on(type, fn);
};
ElementOutput.prototype.removeListener = function removeListener(type, fn) {
    this._eventOutput.removeListener(type, fn);
};
ElementOutput.prototype.emit = function emit(type, event) {
    if (event && !event.origin)
        event.origin = this;
    var handled = this._eventOutput.emit(type, event);
    if (handled && event && event.stopPropagation)
        event.stopPropagation();
    return handled;
};
ElementOutput.prototype.pipe = function pipe(target) {
    return this._eventOutput.pipe(target);
};
ElementOutput.prototype.unpipe = function unpipe(target) {
    return this._eventOutput.unpipe(target);
};
ElementOutput.prototype.render = function render() {
    return this.id;
};
function _addEventListeners(target) {
    for (var i in this._eventOutput.listeners) {
        target.addEventListener(i, this.eventForwarder);
    }
}
function _removeEventListeners(target) {
    for (var i in this._eventOutput.listeners) {
        target.removeEventListener(i, this.eventForwarder);
    }
}
function _formatCSSTransform(m) {
    m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;
    m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;
    var result = 'matrix3d(';
    for (var i = 0; i < 15; i++) {
        result += m[i] < 0.000001 && m[i] > -0.000001 ? '0,' : m[i] + ',';
    }
    result += m[15] + ')';
    return result;
}
var _setMatrix;
if (usePrefix) {
    _setMatrix = function (element, matrix) {
        element.style.webkitTransform = _formatCSSTransform(matrix);
    };
} else {
    _setMatrix = function (element, matrix) {
        element.style.transform = _formatCSSTransform(matrix);
    };
}
function _formatCSSOrigin(origin) {
    return 100 * origin[0] + '% ' + 100 * origin[1] + '%';
}
var _setOrigin = usePrefix ? function (element, origin) {
    element.style.webkitTransformOrigin = _formatCSSOrigin(origin);
} : function (element, origin) {
    element.style.transformOrigin = _formatCSSOrigin(origin);
};
var _setInvisible = usePrefix ? function (element) {
    element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';
    element.style.opacity = 0;
} : function (element) {
    element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';
    element.style.opacity = 0;
};
function _xyNotEquals(a, b) {
    return a && b ? a[0] !== b[0] || a[1] !== b[1] : a !== b;
}
ElementOutput.prototype.commit = function commit(context) {
    var target = this._element;
    if (!target)
        return;
    var matrix = context.transform;
    var opacity = context.opacity;
    var origin = context.origin;
    var size = context.size;
    if (!matrix && this._matrix) {
        this._matrix = null;
        this._opacity = 0;
        _setInvisible(target);
        return;
    }
    if (_xyNotEquals(this._origin, origin))
        this._originDirty = true;
    if (Transform.notEquals(this._matrix, matrix))
        this._transformDirty = true;
    if (this._invisible) {
        this._invisible = false;
        this._element.style.display = '';
    }
    if (this._opacity !== opacity) {
        this._opacity = opacity;
        target.style.opacity = opacity >= 1 ? '0.999999' : opacity;
    }
    if (this._transformDirty || this._originDirty || this._sizeDirty) {
        if (this._sizeDirty)
            this._sizeDirty = false;
        if (this._originDirty) {
            if (origin) {
                if (!this._origin)
                    this._origin = [
                        0,
                        0
                    ];
                this._origin[0] = origin[0];
                this._origin[1] = origin[1];
            } else
                this._origin = null;
            _setOrigin(target, this._origin);
            this._originDirty = false;
        }
        if (!matrix)
            matrix = Transform.identity;
        this._matrix = matrix;
        var aaMatrix = this._size ? Transform.thenMove(matrix, [
            -this._size[0] * origin[0],
            -this._size[1] * origin[1],
            0
        ]) : matrix;
        _setMatrix(target, aaMatrix);
        this._transformDirty = false;
    }
};
ElementOutput.prototype.cleanup = function cleanup() {
    if (this._element) {
        this._invisible = true;
        this._element.style.display = 'none';
    }
};
ElementOutput.prototype.attach = function attach(target) {
    this._element = target;
    _addEventListeners.call(this, target);
};
ElementOutput.prototype.detach = function detach() {
    var target = this._element;
    if (target) {
        _removeEventListeners.call(this, target);
        if (this._invisible) {
            this._invisible = false;
            this._element.style.display = '';
        }
    }
    this._element = null;
    return target;
};
module.exports = ElementOutput;
},{"./Entity":6,"./EventHandler":8,"./Transform":16}],5:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Context = require('./Context');
var EventHandler = require('./EventHandler');
var OptionsManager = require('./OptionsManager');
var Engine = {};
var contexts = [];
var nextTickQueue = [];
var currentFrame = 0;
var nextTickFrame = 0;
var deferQueue = [];
var lastTime = Date.now();
var frameTime;
var frameTimeLimit;
var loopEnabled = true;
var eventForwarders = {};
var eventHandler = new EventHandler();
var options = {
    containerType: 'div',
    containerClass: 'famous-container',
    fpsCap: undefined,
    runLoop: true,
    appMode: true
};
var optionsManager = new OptionsManager(options);
var MAX_DEFER_FRAME_TIME = 10;
Engine.step = function step() {
    currentFrame++;
    nextTickFrame = currentFrame;
    var currentTime = Date.now();
    if (frameTimeLimit && currentTime - lastTime < frameTimeLimit)
        return;
    var i = 0;
    frameTime = currentTime - lastTime;
    lastTime = currentTime;
    eventHandler.emit('prerender');
    var numFunctions = nextTickQueue.length;
    while (numFunctions--)
        nextTickQueue.shift()(currentFrame);
    while (deferQueue.length && Date.now() - currentTime < MAX_DEFER_FRAME_TIME) {
        deferQueue.shift().call(this);
    }
    for (i = 0; i < contexts.length; i++)
        contexts[i].update();
    eventHandler.emit('postrender');
};
function loop() {
    if (options.runLoop) {
        Engine.step();
        window.requestAnimationFrame(loop);
    } else
        loopEnabled = false;
}
window.requestAnimationFrame(loop);
function handleResize(event) {
    for (var i = 0; i < contexts.length; i++) {
        contexts[i].emit('resize');
    }
    eventHandler.emit('resize');
}
window.addEventListener('resize', handleResize, false);
handleResize();
function initialize() {
    window.addEventListener('touchmove', function (event) {
        event.preventDefault();
    }, true);
    addRootClasses();
}
var initialized = false;
function addRootClasses() {
    if (!document.body) {
        Engine.nextTick(addRootClasses);
        return;
    }
    document.body.classList.add('famous-root');
    document.documentElement.classList.add('famous-root');
}
Engine.pipe = function pipe(target) {
    if (target.subscribe instanceof Function)
        return target.subscribe(Engine);
    else
        return eventHandler.pipe(target);
};
Engine.unpipe = function unpipe(target) {
    if (target.unsubscribe instanceof Function)
        return target.unsubscribe(Engine);
    else
        return eventHandler.unpipe(target);
};
Engine.on = function on(type, handler) {
    if (!(type in eventForwarders)) {
        eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);
        addEngineListener(type, eventForwarders[type]);
    }
    return eventHandler.on(type, handler);
};
function addEngineListener(type, forwarder) {
    if (!document.body) {
        Engine.nextTick(addEventListener.bind(this, type, forwarder));
        return;
    }
    document.body.addEventListener(type, forwarder);
}
Engine.emit = function emit(type, event) {
    return eventHandler.emit(type, event);
};
Engine.removeListener = function removeListener(type, handler) {
    return eventHandler.removeListener(type, handler);
};
Engine.getFPS = function getFPS() {
    return 1000 / frameTime;
};
Engine.setFPSCap = function setFPSCap(fps) {
    frameTimeLimit = Math.floor(1000 / fps);
};
Engine.getOptions = function getOptions(key) {
    return optionsManager.getOptions(key);
};
Engine.setOptions = function setOptions(options) {
    return optionsManager.setOptions.apply(optionsManager, arguments);
};
Engine.createContext = function createContext(el) {
    if (!initialized && options.appMode)
        Engine.nextTick(initialize);
    var needMountContainer = false;
    if (!el) {
        el = document.createElement(options.containerType);
        el.classList.add(options.containerClass);
        needMountContainer = true;
    }
    var context = new Context(el);
    Engine.registerContext(context);
    if (needMountContainer)
        mount(context, el);
    return context;
};
function mount(context, el) {
    if (!document.body) {
        Engine.nextTick(mount.bind(this, context, el));
        return;
    }
    document.body.appendChild(el);
    context.emit('resize');
}
Engine.registerContext = function registerContext(context) {
    contexts.push(context);
    return context;
};
Engine.getContexts = function getContexts() {
    return contexts;
};
Engine.deregisterContext = function deregisterContext(context) {
    var i = contexts.indexOf(context);
    if (i >= 0)
        contexts.splice(i, 1);
};
Engine.nextTick = function nextTick(fn) {
    nextTickQueue.push(fn);
};
Engine.defer = function defer(fn) {
    deferQueue.push(fn);
};
optionsManager.on('change', function (data) {
    if (data.id === 'fpsCap')
        Engine.setFPSCap(data.value);
    else if (data.id === 'runLoop') {
        if (!loopEnabled && data.value) {
            loopEnabled = true;
            window.requestAnimationFrame(loop);
        }
    }
});
module.exports = Engine;
},{"./Context":2,"./EventHandler":8,"./OptionsManager":11}],6:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var entities = [];
function get(id) {
    return entities[id];
}
function set(id, entity) {
    entities[id] = entity;
}
function register(entity) {
    var id = entities.length;
    set(id, entity);
    return id;
}
function unregister(id) {
    set(id, null);
}
module.exports = {
    register: register,
    unregister: unregister,
    get: get,
    set: set
};
},{}],7:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function EventEmitter() {
    this.listeners = {};
    this._owner = this;
}
EventEmitter.prototype.emit = function emit(type, event) {
    var handlers = this.listeners[type];
    if (handlers) {
        for (var i = 0; i < handlers.length; i++) {
            handlers[i].call(this._owner, event);
        }
    }
    return this;
};
EventEmitter.prototype.on = function on(type, handler) {
    if (!(type in this.listeners))
        this.listeners[type] = [];
    var index = this.listeners[type].indexOf(handler);
    if (index < 0)
        this.listeners[type].push(handler);
    return this;
};
EventEmitter.prototype.addListener = EventEmitter.prototype.on;
EventEmitter.prototype.removeListener = function removeListener(type, handler) {
    var listener = this.listeners[type];
    if (listener !== undefined) {
        var index = listener.indexOf(handler);
        if (index >= 0)
            listener.splice(index, 1);
    }
    return this;
};
EventEmitter.prototype.bindThis = function bindThis(owner) {
    this._owner = owner;
};
module.exports = EventEmitter;
},{}],8:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventEmitter = require('./EventEmitter');
function EventHandler() {
    EventEmitter.apply(this, arguments);
    this.downstream = [];
    this.downstreamFn = [];
    this.upstream = [];
    this.upstreamListeners = {};
}
EventHandler.prototype = Object.create(EventEmitter.prototype);
EventHandler.prototype.constructor = EventHandler;
EventHandler.setInputHandler = function setInputHandler(object, handler) {
    object.trigger = handler.trigger.bind(handler);
    if (handler.subscribe && handler.unsubscribe) {
        object.subscribe = handler.subscribe.bind(handler);
        object.unsubscribe = handler.unsubscribe.bind(handler);
    }
};
EventHandler.setOutputHandler = function setOutputHandler(object, handler) {
    if (handler instanceof EventHandler)
        handler.bindThis(object);
    object.pipe = handler.pipe.bind(handler);
    object.unpipe = handler.unpipe.bind(handler);
    object.on = handler.on.bind(handler);
    object.addListener = object.on;
    object.removeListener = handler.removeListener.bind(handler);
};
EventHandler.prototype.emit = function emit(type, event) {
    EventEmitter.prototype.emit.apply(this, arguments);
    var i = 0;
    for (i = 0; i < this.downstream.length; i++) {
        if (this.downstream[i].trigger)
            this.downstream[i].trigger(type, event);
    }
    for (i = 0; i < this.downstreamFn.length; i++) {
        this.downstreamFn[i](type, event);
    }
    return this;
};
EventHandler.prototype.trigger = EventHandler.prototype.emit;
EventHandler.prototype.pipe = function pipe(target) {
    if (target.subscribe instanceof Function)
        return target.subscribe(this);
    var downstreamCtx = target instanceof Function ? this.downstreamFn : this.downstream;
    var index = downstreamCtx.indexOf(target);
    if (index < 0)
        downstreamCtx.push(target);
    if (target instanceof Function)
        target('pipe', null);
    else if (target.trigger)
        target.trigger('pipe', null);
    return target;
};
EventHandler.prototype.unpipe = function unpipe(target) {
    if (target.unsubscribe instanceof Function)
        return target.unsubscribe(this);
    var downstreamCtx = target instanceof Function ? this.downstreamFn : this.downstream;
    var index = downstreamCtx.indexOf(target);
    if (index >= 0) {
        downstreamCtx.splice(index, 1);
        if (target instanceof Function)
            target('unpipe', null);
        else if (target.trigger)
            target.trigger('unpipe', null);
        return target;
    } else
        return false;
};
EventHandler.prototype.on = function on(type, handler) {
    EventEmitter.prototype.on.apply(this, arguments);
    if (!(type in this.upstreamListeners)) {
        var upstreamListener = this.trigger.bind(this, type);
        this.upstreamListeners[type] = upstreamListener;
        for (var i = 0; i < this.upstream.length; i++) {
            this.upstream[i].on(type, upstreamListener);
        }
    }
    return this;
};
EventHandler.prototype.addListener = EventHandler.prototype.on;
EventHandler.prototype.subscribe = function subscribe(source) {
    var index = this.upstream.indexOf(source);
    if (index < 0) {
        this.upstream.push(source);
        for (var type in this.upstreamListeners) {
            source.on(type, this.upstreamListeners[type]);
        }
    }
    return this;
};
EventHandler.prototype.unsubscribe = function unsubscribe(source) {
    var index = this.upstream.indexOf(source);
    if (index >= 0) {
        this.upstream.splice(index, 1);
        for (var type in this.upstreamListeners) {
            source.removeListener(type, this.upstreamListeners[type]);
        }
    }
    return this;
};
module.exports = EventHandler;
},{"./EventEmitter":7}],9:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Context = require('./Context');
var Transform = require('./Transform');
var Surface = require('./Surface');
function Group(options) {
    Surface.call(this, options);
    this._shouldRecalculateSize = false;
    this._container = document.createDocumentFragment();
    this.context = new Context(this._container);
    this.setContent(this._container);
    this._groupSize = [
        undefined,
        undefined
    ];
}
Group.SIZE_ZERO = [
    0,
    0
];
Group.prototype = Object.create(Surface.prototype);
Group.prototype.elementType = 'div';
Group.prototype.elementClass = 'famous-group';
Group.prototype.add = function add() {
    return this.context.add.apply(this.context, arguments);
};
Group.prototype.render = function render() {
    return Surface.prototype.render.call(this);
};
Group.prototype.deploy = function deploy(target) {
    this.context.migrate(target);
};
Group.prototype.recall = function recall(target) {
    this._container = document.createDocumentFragment();
    this.context.migrate(this._container);
};
Group.prototype.commit = function commit(context) {
    var transform = context.transform;
    var origin = context.origin;
    var opacity = context.opacity;
    var size = context.size;
    var result = Surface.prototype.commit.call(this, {
        allocator: context.allocator,
        transform: Transform.thenMove(transform, [
            -origin[0] * size[0],
            -origin[1] * size[1],
            0
        ]),
        opacity: opacity,
        origin: origin,
        size: Group.SIZE_ZERO
    });
    if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {
        this._groupSize[0] = size[0];
        this._groupSize[1] = size[1];
        this.context.setSize(size);
    }
    this.context.update({
        transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),
        origin: origin,
        size: size
    });
    return result;
};
module.exports = Group;
},{"./Context":2,"./Surface":15,"./Transform":16}],10:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('./Transform');
var Transitionable = require('../transitions/Transitionable');
var TransitionableTransform = require('../transitions/TransitionableTransform');
function Modifier(options) {
    this._transformGetter = null;
    this._opacityGetter = null;
    this._originGetter = null;
    this._alignGetter = null;
    this._sizeGetter = null;
    this._proportionGetter = null;
    this._legacyStates = {};
    this._output = {
        transform: Transform.identity,
        opacity: 1,
        origin: null,
        align: null,
        size: null,
        proportions: null,
        target: null
    };
    if (options) {
        if (options.transform)
            this.transformFrom(options.transform);
        if (options.opacity !== undefined)
            this.opacityFrom(options.opacity);
        if (options.origin)
            this.originFrom(options.origin);
        if (options.align)
            this.alignFrom(options.align);
        if (options.size)
            this.sizeFrom(options.size);
        if (options.proportions)
            this.proportionsFrom(options.proportions);
    }
}
Modifier.prototype.transformFrom = function transformFrom(transform) {
    if (transform instanceof Function)
        this._transformGetter = transform;
    else if (transform instanceof Object && transform.get)
        this._transformGetter = transform.get.bind(transform);
    else {
        this._transformGetter = null;
        this._output.transform = transform;
    }
    return this;
};
Modifier.prototype.opacityFrom = function opacityFrom(opacity) {
    if (opacity instanceof Function)
        this._opacityGetter = opacity;
    else if (opacity instanceof Object && opacity.get)
        this._opacityGetter = opacity.get.bind(opacity);
    else {
        this._opacityGetter = null;
        this._output.opacity = opacity;
    }
    return this;
};
Modifier.prototype.originFrom = function originFrom(origin) {
    if (origin instanceof Function)
        this._originGetter = origin;
    else if (origin instanceof Object && origin.get)
        this._originGetter = origin.get.bind(origin);
    else {
        this._originGetter = null;
        this._output.origin = origin;
    }
    return this;
};
Modifier.prototype.alignFrom = function alignFrom(align) {
    if (align instanceof Function)
        this._alignGetter = align;
    else if (align instanceof Object && align.get)
        this._alignGetter = align.get.bind(align);
    else {
        this._alignGetter = null;
        this._output.align = align;
    }
    return this;
};
Modifier.prototype.sizeFrom = function sizeFrom(size) {
    if (size instanceof Function)
        this._sizeGetter = size;
    else if (size instanceof Object && size.get)
        this._sizeGetter = size.get.bind(size);
    else {
        this._sizeGetter = null;
        this._output.size = size;
    }
    return this;
};
Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {
    if (proportions instanceof Function)
        this._proportionGetter = proportions;
    else if (proportions instanceof Object && proportions.get)
        this._proportionGetter = proportions.get.bind(proportions);
    else {
        this._proportionGetter = null;
        this._output.proportions = proportions;
    }
    return this;
};
Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {
    if (transition || this._legacyStates.transform) {
        if (!this._legacyStates.transform) {
            this._legacyStates.transform = new TransitionableTransform(this._output.transform);
        }
        if (!this._transformGetter)
            this.transformFrom(this._legacyStates.transform);
        this._legacyStates.transform.set(transform, transition, callback);
        return this;
    } else
        return this.transformFrom(transform);
};
Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
    if (transition || this._legacyStates.opacity) {
        if (!this._legacyStates.opacity) {
            this._legacyStates.opacity = new Transitionable(this._output.opacity);
        }
        if (!this._opacityGetter)
            this.opacityFrom(this._legacyStates.opacity);
        return this._legacyStates.opacity.set(opacity, transition, callback);
    } else
        return this.opacityFrom(opacity);
};
Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
    if (transition || this._legacyStates.origin) {
        if (!this._legacyStates.origin) {
            this._legacyStates.origin = new Transitionable(this._output.origin || [
                0,
                0
            ]);
        }
        if (!this._originGetter)
            this.originFrom(this._legacyStates.origin);
        this._legacyStates.origin.set(origin, transition, callback);
        return this;
    } else
        return this.originFrom(origin);
};
Modifier.prototype.setAlign = function setAlign(align, transition, callback) {
    if (transition || this._legacyStates.align) {
        if (!this._legacyStates.align) {
            this._legacyStates.align = new Transitionable(this._output.align || [
                0,
                0
            ]);
        }
        if (!this._alignGetter)
            this.alignFrom(this._legacyStates.align);
        this._legacyStates.align.set(align, transition, callback);
        return this;
    } else
        return this.alignFrom(align);
};
Modifier.prototype.setSize = function setSize(size, transition, callback) {
    if (size && (transition || this._legacyStates.size)) {
        if (!this._legacyStates.size) {
            this._legacyStates.size = new Transitionable(this._output.size || [
                0,
                0
            ]);
        }
        if (!this._sizeGetter)
            this.sizeFrom(this._legacyStates.size);
        this._legacyStates.size.set(size, transition, callback);
        return this;
    } else
        return this.sizeFrom(size);
};
Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {
    if (proportions && (transition || this._legacyStates.proportions)) {
        if (!this._legacyStates.proportions) {
            this._legacyStates.proportions = new Transitionable(this._output.proportions || [
                0,
                0
            ]);
        }
        if (!this._proportionGetter)
            this.proportionsFrom(this._legacyStates.proportions);
        this._legacyStates.proportions.set(proportions, transition, callback);
        return this;
    } else
        return this.proportionsFrom(proportions);
};
Modifier.prototype.halt = function halt() {
    if (this._legacyStates.transform)
        this._legacyStates.transform.halt();
    if (this._legacyStates.opacity)
        this._legacyStates.opacity.halt();
    if (this._legacyStates.origin)
        this._legacyStates.origin.halt();
    if (this._legacyStates.align)
        this._legacyStates.align.halt();
    if (this._legacyStates.size)
        this._legacyStates.size.halt();
    if (this._legacyStates.proportions)
        this._legacyStates.proportions.halt();
    this._transformGetter = null;
    this._opacityGetter = null;
    this._originGetter = null;
    this._alignGetter = null;
    this._sizeGetter = null;
    this._proportionGetter = null;
};
Modifier.prototype.getTransform = function getTransform() {
    return this._transformGetter();
};
Modifier.prototype.getFinalTransform = function getFinalTransform() {
    return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;
};
Modifier.prototype.getOpacity = function getOpacity() {
    return this._opacityGetter();
};
Modifier.prototype.getOrigin = function getOrigin() {
    return this._originGetter();
};
Modifier.prototype.getAlign = function getAlign() {
    return this._alignGetter();
};
Modifier.prototype.getSize = function getSize() {
    return this._sizeGetter ? this._sizeGetter() : this._output.size;
};
Modifier.prototype.getProportions = function getProportions() {
    return this._proportionGetter ? this._proportionGetter() : this._output.proportions;
};
function _update() {
    if (this._transformGetter)
        this._output.transform = this._transformGetter();
    if (this._opacityGetter)
        this._output.opacity = this._opacityGetter();
    if (this._originGetter)
        this._output.origin = this._originGetter();
    if (this._alignGetter)
        this._output.align = this._alignGetter();
    if (this._sizeGetter)
        this._output.size = this._sizeGetter();
    if (this._proportionGetter)
        this._output.proportions = this._proportionGetter();
}
Modifier.prototype.modify = function modify(target) {
    _update.call(this);
    this._output.target = target;
    return this._output;
};
module.exports = Modifier;
},{"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90,"./Transform":16}],11:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('./EventHandler');
function OptionsManager(value) {
    this._value = value;
    this.eventOutput = null;
}
OptionsManager.patch = function patchObject(source, data) {
    var manager = new OptionsManager(source);
    for (var i = 1; i < arguments.length; i++)
        manager.patch(arguments[i]);
    return source;
};
function _createEventOutput() {
    this.eventOutput = new EventHandler();
    this.eventOutput.bindThis(this);
    EventHandler.setOutputHandler(this, this.eventOutput);
}
OptionsManager.prototype.patch = function patch() {
    var myState = this._value;
    for (var i = 0; i < arguments.length; i++) {
        var data = arguments[i];
        for (var k in data) {
            if (k in myState && (data[k] && data[k].constructor === Object) && (myState[k] && myState[k].constructor === Object)) {
                if (!myState.hasOwnProperty(k))
                    myState[k] = Object.create(myState[k]);
                this.key(k).patch(data[k]);
                if (this.eventOutput)
                    this.eventOutput.emit('change', {
                        id: k,
                        value: this.key(k).value()
                    });
            } else
                this.set(k, data[k]);
        }
    }
    return this;
};
OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;
OptionsManager.prototype.key = function key(identifier) {
    var result = new OptionsManager(this._value[identifier]);
    if (!(result._value instanceof Object) || result._value instanceof Array)
        result._value = {};
    return result;
};
OptionsManager.prototype.get = function get(key) {
    return key ? this._value[key] : this._value;
};
OptionsManager.prototype.getOptions = OptionsManager.prototype.get;
OptionsManager.prototype.set = function set(key, value) {
    var originalValue = this.get(key);
    this._value[key] = value;
    if (this.eventOutput && value !== originalValue)
        this.eventOutput.emit('change', {
            id: key,
            value: value
        });
    return this;
};
OptionsManager.prototype.on = function on() {
    _createEventOutput.call(this);
    return this.on.apply(this, arguments);
};
OptionsManager.prototype.removeListener = function removeListener() {
    _createEventOutput.call(this);
    return this.removeListener.apply(this, arguments);
};
OptionsManager.prototype.pipe = function pipe() {
    _createEventOutput.call(this);
    return this.pipe.apply(this, arguments);
};
OptionsManager.prototype.unpipe = function unpipe() {
    _createEventOutput.call(this);
    return this.unpipe.apply(this, arguments);
};
module.exports = OptionsManager;
},{"./EventHandler":8}],12:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('./Entity');
var SpecParser = require('./SpecParser');
function RenderNode(object) {
    this._object = null;
    this._child = null;
    this._hasMultipleChildren = false;
    this._isRenderable = false;
    this._isModifier = false;
    this._resultCache = {};
    this._prevResults = {};
    this._childResult = null;
    if (object)
        this.set(object);
}
RenderNode.prototype.add = function add(child) {
    var childNode = child instanceof RenderNode ? child : new RenderNode(child);
    if (this._child instanceof Array)
        this._child.push(childNode);
    else if (this._child) {
        this._child = [
            this._child,
            childNode
        ];
        this._hasMultipleChildren = true;
        this._childResult = [];
    } else
        this._child = childNode;
    return childNode;
};
RenderNode.prototype.get = function get() {
    return this._object || (this._hasMultipleChildren ? null : this._child ? this._child.get() : null);
};
RenderNode.prototype.set = function set(child) {
    this._childResult = null;
    this._hasMultipleChildren = false;
    this._isRenderable = child.render ? true : false;
    this._isModifier = child.modify ? true : false;
    this._object = child;
    this._child = null;
    if (child instanceof RenderNode)
        return child;
    else
        return this;
};
RenderNode.prototype.getSize = function getSize() {
    var result = null;
    var target = this.get();
    if (target && target.getSize)
        result = target.getSize();
    if (!result && this._child && this._child.getSize)
        result = this._child.getSize();
    return result;
};
function _applyCommit(spec, context, cacheStorage) {
    var result = SpecParser.parse(spec, context);
    var keys = Object.keys(result);
    for (var i = 0; i < keys.length; i++) {
        var id = keys[i];
        var childNode = Entity.get(id);
        var commitParams = result[id];
        commitParams.allocator = context.allocator;
        var commitResult = childNode.commit(commitParams);
        if (commitResult)
            _applyCommit(commitResult, context, cacheStorage);
        else
            cacheStorage[id] = commitParams;
    }
}
RenderNode.prototype.commit = function commit(context) {
    var prevKeys = Object.keys(this._prevResults);
    for (var i = 0; i < prevKeys.length; i++) {
        var id = prevKeys[i];
        if (this._resultCache[id] === undefined) {
            var object = Entity.get(id);
            if (object.cleanup)
                object.cleanup(context.allocator);
        }
    }
    this._prevResults = this._resultCache;
    this._resultCache = {};
    _applyCommit(this.render(), context, this._resultCache);
};
RenderNode.prototype.render = function render() {
    if (this._isRenderable)
        return this._object.render();
    var result = null;
    if (this._hasMultipleChildren) {
        result = this._childResult;
        var children = this._child;
        for (var i = 0; i < children.length; i++) {
            result[i] = children[i].render();
        }
    } else if (this._child)
        result = this._child.render();
    return this._isModifier ? this._object.modify(result) : result;
};
module.exports = RenderNode;
},{"./Entity":6,"./SpecParser":14}],13:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('./Transform');
var Modifier = require('./Modifier');
var RenderNode = require('./RenderNode');
function Scene(definition) {
    this.id = null;
    this._objects = null;
    this.node = new RenderNode();
    this._definition = null;
    if (definition)
        this.load(definition);
}
var _MATRIX_GENERATORS = {
    'translate': Transform.translate,
    'rotate': Transform.rotate,
    'rotateX': Transform.rotateX,
    'rotateY': Transform.rotateY,
    'rotateZ': Transform.rotateZ,
    'rotateAxis': Transform.rotateAxis,
    'scale': Transform.scale,
    'skew': Transform.skew,
    'matrix3d': function () {
        return arguments;
    }
};
Scene.prototype.create = function create() {
    return new Scene(this._definition);
};
function _resolveTransformMatrix(matrixDefinition) {
    for (var type in _MATRIX_GENERATORS) {
        if (type in matrixDefinition) {
            var args = matrixDefinition[type];
            if (!(args instanceof Array))
                args = [args];
            return _MATRIX_GENERATORS[type].apply(this, args);
        }
    }
}
function _parseTransform(definition) {
    var transformDefinition = definition.transform;
    var opacity = definition.opacity;
    var origin = definition.origin;
    var align = definition.align;
    var size = definition.size;
    var transform = Transform.identity;
    if (transformDefinition instanceof Array) {
        if (transformDefinition.length === 16 && typeof transformDefinition[0] === 'number') {
            transform = transformDefinition;
        } else {
            for (var i = 0; i < transformDefinition.length; i++) {
                transform = Transform.multiply(transform, _resolveTransformMatrix(transformDefinition[i]));
            }
        }
    } else if (transformDefinition instanceof Function) {
        transform = transformDefinition;
    } else if (transformDefinition instanceof Object) {
        transform = _resolveTransformMatrix(transformDefinition);
    }
    var result = new Modifier({
        transform: transform,
        opacity: opacity,
        origin: origin,
        align: align,
        size: size
    });
    return result;
}
function _parseArray(definition) {
    var result = new RenderNode();
    for (var i = 0; i < definition.length; i++) {
        var obj = _parse.call(this, definition[i]);
        if (obj)
            result.add(obj);
    }
    return result;
}
function _parse(definition) {
    var result;
    var id;
    if (definition instanceof Array) {
        result = _parseArray.call(this, definition);
    } else {
        id = this._objects.length;
        if (definition.render && definition.render instanceof Function) {
            result = definition;
        } else if (definition.target) {
            var targetObj = _parse.call(this, definition.target);
            var obj = _parseTransform.call(this, definition);
            result = new RenderNode(obj);
            result.add(targetObj);
            if (definition.id)
                this.id[definition.id] = obj;
        } else if (definition.id) {
            result = new RenderNode();
            this.id[definition.id] = result;
        }
    }
    this._objects[id] = result;
    return result;
}
Scene.prototype.load = function load(definition) {
    this._definition = definition;
    this.id = {};
    this._objects = [];
    this.node.set(_parse.call(this, definition));
};
Scene.prototype.add = function add() {
    return this.node.add.apply(this.node, arguments);
};
Scene.prototype.render = function render() {
    return this.node.render.apply(this.node, arguments);
};
module.exports = Scene;
},{"./Modifier":10,"./RenderNode":12,"./Transform":16}],14:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('./Transform');
function SpecParser() {
    this.result = {};
}
SpecParser._instance = new SpecParser();
SpecParser.parse = function parse(spec, context) {
    return SpecParser._instance.parse(spec, context);
};
SpecParser.prototype.parse = function parse(spec, context) {
    this.reset();
    this._parseSpec(spec, context, Transform.identity);
    return this.result;
};
SpecParser.prototype.reset = function reset() {
    this.result = {};
};
function _vecInContext(v, m) {
    return [
        v[0] * m[0] + v[1] * m[4] + v[2] * m[8],
        v[0] * m[1] + v[1] * m[5] + v[2] * m[9],
        v[0] * m[2] + v[1] * m[6] + v[2] * m[10]
    ];
}
var _zeroZero = [
    0,
    0
];
SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {
    var id;
    var target;
    var transform;
    var opacity;
    var origin;
    var align;
    var size;
    if (typeof spec === 'number') {
        id = spec;
        transform = parentContext.transform;
        align = parentContext.align || _zeroZero;
        if (parentContext.size && align && (align[0] || align[1])) {
            var alignAdjust = [
                align[0] * parentContext.size[0],
                align[1] * parentContext.size[1],
                0
            ];
            transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));
        }
        this.result[id] = {
            transform: transform,
            opacity: parentContext.opacity,
            origin: parentContext.origin || _zeroZero,
            align: parentContext.align || _zeroZero,
            size: parentContext.size
        };
    } else if (!spec) {
        return;
    } else if (spec instanceof Array) {
        for (var i = 0; i < spec.length; i++) {
            this._parseSpec(spec[i], parentContext, sizeContext);
        }
    } else {
        target = spec.target;
        transform = parentContext.transform;
        opacity = parentContext.opacity;
        origin = parentContext.origin;
        align = parentContext.align;
        size = parentContext.size;
        var nextSizeContext = sizeContext;
        if (spec.opacity !== undefined)
            opacity = parentContext.opacity * spec.opacity;
        if (spec.transform)
            transform = Transform.multiply(parentContext.transform, spec.transform);
        if (spec.origin) {
            origin = spec.origin;
            nextSizeContext = parentContext.transform;
        }
        if (spec.align)
            align = spec.align;
        if (spec.size || spec.proportions) {
            var parentSize = size;
            size = [
                size[0],
                size[1]
            ];
            if (spec.size) {
                if (spec.size[0] !== undefined)
                    size[0] = spec.size[0];
                if (spec.size[1] !== undefined)
                    size[1] = spec.size[1];
            }
            if (spec.proportions) {
                if (spec.proportions[0] !== undefined)
                    size[0] = size[0] * spec.proportions[0];
                if (spec.proportions[1] !== undefined)
                    size[1] = size[1] * spec.proportions[1];
            }
            if (parentSize) {
                if (align && (align[0] || align[1]))
                    transform = Transform.thenMove(transform, _vecInContext([
                        align[0] * parentSize[0],
                        align[1] * parentSize[1],
                        0
                    ], sizeContext));
                if (origin && (origin[0] || origin[1]))
                    transform = Transform.moveThen([
                        -origin[0] * size[0],
                        -origin[1] * size[1],
                        0
                    ], transform);
            }
            nextSizeContext = parentContext.transform;
            origin = null;
            align = null;
        }
        this._parseSpec(target, {
            transform: transform,
            opacity: opacity,
            origin: origin,
            align: align,
            size: size
        }, nextSizeContext);
    }
};
module.exports = SpecParser;
},{"./Transform":16}],15:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var ElementOutput = require('./ElementOutput');
function Surface(options) {
    ElementOutput.call(this);
    this.options = {};
    this.properties = {};
    this.attributes = {};
    this.content = '';
    this.classList = [];
    this.size = null;
    this._classesDirty = true;
    this._stylesDirty = true;
    this._attributesDirty = true;
    this._sizeDirty = true;
    this._contentDirty = true;
    this._trueSizeCheck = true;
    this._dirtyClasses = [];
    if (options)
        this.setOptions(options);
    this._currentTarget = null;
}
Surface.prototype = Object.create(ElementOutput.prototype);
Surface.prototype.constructor = Surface;
Surface.prototype.elementType = 'div';
Surface.prototype.elementClass = 'famous-surface';
Surface.prototype.setAttributes = function setAttributes(attributes) {
    for (var n in attributes) {
        if (n === 'style')
            throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
        this.attributes[n] = attributes[n];
    }
    this._attributesDirty = true;
};
Surface.prototype.getAttributes = function getAttributes() {
    return this.attributes;
};
Surface.prototype.setProperties = function setProperties(properties) {
    for (var n in properties) {

        this.properties[n] = properties[n];
    }
    this._stylesDirty = true;
    return this;
};
Surface.prototype.getProperties = function getProperties() {
    return this.properties;
};
Surface.prototype.addClass = function addClass(className) {
    if (this.classList.indexOf(className) < 0) {
        this.classList.push(className);
        this._classesDirty = true;
    }
    return this;
};
Surface.prototype.removeClass = function removeClass(className) {
    var i = this.classList.indexOf(className);
    if (i >= 0) {
        this._dirtyClasses.push(this.classList.splice(i, 1)[0]);
        this._classesDirty = true;
    }
    return this;
};
Surface.prototype.toggleClass = function toggleClass(className) {
    var i = this.classList.indexOf(className);
    if (i >= 0) {
        this.removeClass(className);
    } else {
        this.addClass(className);
    }
    return this;
};
Surface.prototype.setClasses = function setClasses(classList) {
    var i = 0;
    var removal = [];
    for (i = 0; i < this.classList.length; i++) {
        if (classList.indexOf(this.classList[i]) < 0)
            removal.push(this.classList[i]);
    }
    for (i = 0; i < removal.length; i++)
        this.removeClass(removal[i]);
    for (i = 0; i < classList.length; i++)
        this.addClass(classList[i]);
    return this;
};
Surface.prototype.getClassList = function getClassList() {
    return this.classList;
};
Surface.prototype.setContent = function setContent(content) {
    if (this.content !== content) {
        this.content = content;
        this._contentDirty = true;
    }
    return this;
};
Surface.prototype.getContent = function getContent() {
    return this.content;
};
Surface.prototype.setOptions = function setOptions(options) {
    if (options.size)
        this.setSize(options.size);
    if (options.classes)
        this.setClasses(options.classes);
    if (options.properties)
        this.setProperties(options.properties);
    if (options.attributes)
        this.setAttributes(options.attributes);
    if (options.content)
        this.setContent(options.content);
    return this;
};
function _cleanupClasses(target) {
    for (var i = 0; i < this._dirtyClasses.length; i++)
        target.classList.remove(this._dirtyClasses[i]);
    this._dirtyClasses = [];
}
function _applyStyles(target) {
    for (var n in this.properties) {
        target.style[n] = this.properties[n];
    }
}
function _cleanupStyles(target) {
    for (var n in this.properties) {
        target.style[n] = '';
    }
}
function _applyAttributes(target) {
    for (var n in this.attributes) {
        target.setAttribute(n, this.attributes[n]);
    }
}
function _cleanupAttributes(target) {
    for (var n in this.attributes) {
        target.removeAttribute(n);
    }
}
function _xyNotEquals(a, b) {
    return a && b ? a[0] !== b[0] || a[1] !== b[1] : a !== b;
}
Surface.prototype.setup = function setup(allocator) {
    var target = allocator.allocate(this.elementType);
    if (this.elementClass) {
        if (this.elementClass instanceof Array) {
            for (var i = 0; i < this.elementClass.length; i++) {
                target.classList.add(this.elementClass[i]);
            }
        } else {
            target.classList.add(this.elementClass);
        }
    }
    target.style.display = '';
    this.attach(target);
    this._opacity = null;
    this._currentTarget = target;
    this._stylesDirty = true;
    this._classesDirty = true;
    this._attributesDirty = true;
    this._sizeDirty = true;
    this._contentDirty = true;
    this._originDirty = true;
    this._transformDirty = true;
};
Surface.prototype.commit = function commit(context) {
    if (!this._currentTarget)
        this.setup(context.allocator);
    var target = this._currentTarget;
    var size = context.size;
    if (this._classesDirty) {
        _cleanupClasses.call(this, target);
        var classList = this.getClassList();
        for (var i = 0; i < classList.length; i++)
            target.classList.add(classList[i]);
        this._classesDirty = false;
        this._trueSizeCheck = true;
    }
    if (this._stylesDirty) {
        _applyStyles.call(this, target);
        this._stylesDirty = false;
        this._trueSizeCheck = true;
    }
    if (this._attributesDirty) {
        _applyAttributes.call(this, target);
        this._attributesDirty = false;
        this._trueSizeCheck = true;
    }
    if (this.size) {
        var origSize = context.size;
        size = [
            this.size[0],
            this.size[1]
        ];
        if (size[0] === undefined)
            size[0] = origSize[0];
        if (size[1] === undefined)
            size[1] = origSize[1];
        if (size[0] === true || size[1] === true) {
            if (size[0] === true) {
                if (this._trueSizeCheck || this._size[0] === 0) {
                    var width = target.offsetWidth;
                    if (this._size && this._size[0] !== width) {
                        this._size[0] = width;
                        this._sizeDirty = true;
                    }
                    size[0] = width;
                } else {
                    if (this._size)
                        size[0] = this._size[0];
                }
            }
            if (size[1] === true) {
                if (this._trueSizeCheck || this._size[1] === 0) {
                    var height = target.offsetHeight;
                    if (this._size && this._size[1] !== height) {
                        this._size[1] = height;
                        this._sizeDirty = true;
                    }
                    size[1] = height;
                } else {
                    if (this._size)
                        size[1] = this._size[1];
                }
            }
            this._trueSizeCheck = false;
        }
    }
    if (_xyNotEquals(this._size, size)) {
        if (!this._size)
            this._size = [
                0,
                0
            ];
        this._size[0] = size[0];
        this._size[1] = size[1];
        this._sizeDirty = true;
    }
    if (this._sizeDirty) {
        if (this._size) {
            target.style.width = this.size && this.size[0] === true ? '' : this._size[0] + 'px';
            target.style.height = this.size && this.size[1] === true ? '' : this._size[1] + 'px';
        }
        this._eventOutput.emit('resize');
    }
    if (this._contentDirty) {
        this.deploy(target);
        this._eventOutput.emit('deploy');
        this._contentDirty = false;
        this._trueSizeCheck = true;
    }
    ElementOutput.prototype.commit.call(this, context);
};
Surface.prototype.cleanup = function cleanup(allocator) {
    var i = 0;
    var target = this._currentTarget;
    this._eventOutput.emit('recall');
    this.recall(target);
    target.style.display = 'none';
    target.style.opacity = '';
    target.style.width = '';
    target.style.height = '';
    _cleanupStyles.call(this, target);
    _cleanupAttributes.call(this, target);
    var classList = this.getClassList();
    _cleanupClasses.call(this, target);
    for (i = 0; i < classList.length; i++)
        target.classList.remove(classList[i]);
    if (this.elementClass) {
        if (this.elementClass instanceof Array) {
            for (i = 0; i < this.elementClass.length; i++) {
                target.classList.remove(this.elementClass[i]);
            }
        } else {
            target.classList.remove(this.elementClass);
        }
    }
    this.detach(target);
    this._currentTarget = null;
    allocator.deallocate(target);
};
Surface.prototype.deploy = function deploy(target) {
    var content = this.getContent();
    if (content instanceof Node) {
        while (target.hasChildNodes())
            target.removeChild(target.firstChild);
        target.appendChild(content);
    } else
        target.innerHTML = content;
};
Surface.prototype.recall = function recall(target) {
    var df = document.createDocumentFragment();
    while (target.hasChildNodes())
        df.appendChild(target.firstChild);
    this.setContent(df);
};
Surface.prototype.getSize = function getSize() {
    return this._size ? this._size : this.size;
};
Surface.prototype.setSize = function setSize(size) {
    this.size = size ? [
        size[0],
        size[1]
    ] : null;
    this._sizeDirty = true;
    return this;
};
module.exports = Surface;
},{"./ElementOutput":4}],16:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = {};
Transform.precision = 0.000001;
Transform.identity = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
];
Transform.multiply4x4 = function multiply4x4(a, b) {
    return [
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3],
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3],
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3],
        a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3],
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7],
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7],
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7],
        a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7],
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11],
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11],
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11],
        a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11],
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15],
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15],
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15],
        a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]
    ];
};
Transform.multiply = function multiply(a, b) {
    return [
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2],
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2],
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2],
        0,
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6],
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6],
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6],
        0,
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10],
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10],
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10],
        0,
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12],
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13],
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14],
        1
    ];
};
Transform.thenMove = function thenMove(m, t) {
    if (!t[2])
        t[2] = 0;
    return [
        m[0],
        m[1],
        m[2],
        0,
        m[4],
        m[5],
        m[6],
        0,
        m[8],
        m[9],
        m[10],
        0,
        m[12] + t[0],
        m[13] + t[1],
        m[14] + t[2],
        1
    ];
};
Transform.moveThen = function moveThen(v, m) {
    if (!v[2])
        v[2] = 0;
    var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];
    var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];
    var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];
    return Transform.thenMove(m, [
        t0,
        t1,
        t2
    ]);
};
Transform.translate = function translate(x, y, z) {
    if (z === undefined)
        z = 0;
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        x,
        y,
        z,
        1
    ];
};
Transform.thenScale = function thenScale(m, s) {
    return [
        s[0] * m[0],
        s[1] * m[1],
        s[2] * m[2],
        0,
        s[0] * m[4],
        s[1] * m[5],
        s[2] * m[6],
        0,
        s[0] * m[8],
        s[1] * m[9],
        s[2] * m[10],
        0,
        s[0] * m[12],
        s[1] * m[13],
        s[2] * m[14],
        1
    ];
};
Transform.scale = function scale(x, y, z) {
    if (z === undefined)
        z = 1;
    if (y === undefined)
        y = x;
    return [
        x,
        0,
        0,
        0,
        0,
        y,
        0,
        0,
        0,
        0,
        z,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.rotateX = function rotateX(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [
        1,
        0,
        0,
        0,
        0,
        cosTheta,
        sinTheta,
        0,
        0,
        -sinTheta,
        cosTheta,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.rotateY = function rotateY(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [
        cosTheta,
        0,
        -sinTheta,
        0,
        0,
        1,
        0,
        0,
        sinTheta,
        0,
        cosTheta,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.rotateZ = function rotateZ(theta) {
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return [
        cosTheta,
        sinTheta,
        0,
        0,
        -sinTheta,
        cosTheta,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.rotate = function rotate(phi, theta, psi) {
    var cosPhi = Math.cos(phi);
    var sinPhi = Math.sin(phi);
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    var cosPsi = Math.cos(psi);
    var sinPsi = Math.sin(psi);
    var result = [
        cosTheta * cosPsi,
        cosPhi * sinPsi + sinPhi * sinTheta * cosPsi,
        sinPhi * sinPsi - cosPhi * sinTheta * cosPsi,
        0,
        -cosTheta * sinPsi,
        cosPhi * cosPsi - sinPhi * sinTheta * sinPsi,
        sinPhi * cosPsi + cosPhi * sinTheta * sinPsi,
        0,
        sinTheta,
        -sinPhi * cosTheta,
        cosPhi * cosTheta,
        0,
        0,
        0,
        0,
        1
    ];
    return result;
};
Transform.rotateAxis = function rotateAxis(v, theta) {
    var sinTheta = Math.sin(theta);
    var cosTheta = Math.cos(theta);
    var verTheta = 1 - cosTheta;
    var xxV = v[0] * v[0] * verTheta;
    var xyV = v[0] * v[1] * verTheta;
    var xzV = v[0] * v[2] * verTheta;
    var yyV = v[1] * v[1] * verTheta;
    var yzV = v[1] * v[2] * verTheta;
    var zzV = v[2] * v[2] * verTheta;
    var xs = v[0] * sinTheta;
    var ys = v[1] * sinTheta;
    var zs = v[2] * sinTheta;
    var result = [
        xxV + cosTheta,
        xyV + zs,
        xzV - ys,
        0,
        xyV - zs,
        yyV + cosTheta,
        yzV + xs,
        0,
        xzV + ys,
        yzV - xs,
        zzV + cosTheta,
        0,
        0,
        0,
        0,
        1
    ];
    return result;
};
Transform.aboutOrigin = function aboutOrigin(v, m) {
    var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);
    var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);
    var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);
    return Transform.thenMove(m, [
        t0,
        t1,
        t2
    ]);
};
Transform.skew = function skew(phi, theta, psi) {
    return [
        1,
        Math.tan(theta),
        0,
        0,
        Math.tan(psi),
        1,
        0,
        0,
        0,
        Math.tan(phi),
        1,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.skewX = function skewX(angle) {
    return [
        1,
        0,
        0,
        0,
        Math.tan(angle),
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.skewY = function skewY(angle) {
    return [
        1,
        Math.tan(angle),
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1
    ];
};
Transform.perspective = function perspective(focusZ) {
    return [
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        -1 / focusZ,
        0,
        0,
        0,
        1
    ];
};
Transform.getTranslate = function getTranslate(m) {
    return [
        m[12],
        m[13],
        m[14]
    ];
};
Transform.inverse = function inverse(m) {
    var c0 = m[5] * m[10] - m[6] * m[9];
    var c1 = m[4] * m[10] - m[6] * m[8];
    var c2 = m[4] * m[9] - m[5] * m[8];
    var c4 = m[1] * m[10] - m[2] * m[9];
    var c5 = m[0] * m[10] - m[2] * m[8];
    var c6 = m[0] * m[9] - m[1] * m[8];
    var c8 = m[1] * m[6] - m[2] * m[5];
    var c9 = m[0] * m[6] - m[2] * m[4];
    var c10 = m[0] * m[5] - m[1] * m[4];
    var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;
    var invD = 1 / detM;
    var result = [
        invD * c0,
        -invD * c4,
        invD * c8,
        0,
        -invD * c1,
        invD * c5,
        -invD * c9,
        0,
        invD * c2,
        -invD * c6,
        invD * c10,
        0,
        0,
        0,
        0,
        1
    ];
    result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];
    result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];
    result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];
    return result;
};
Transform.transpose = function transpose(m) {
    return [
        m[0],
        m[4],
        m[8],
        m[12],
        m[1],
        m[5],
        m[9],
        m[13],
        m[2],
        m[6],
        m[10],
        m[14],
        m[3],
        m[7],
        m[11],
        m[15]
    ];
};
function _normSquared(v) {
    return v.length === 2 ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
}
function _norm(v) {
    return Math.sqrt(_normSquared(v));
}
function _sign(n) {
    return n < 0 ? -1 : 1;
}
Transform.interpret = function interpret(M) {
    var x = [
        M[0],
        M[1],
        M[2]
    ];
    var sgn = _sign(x[0]);
    var xNorm = _norm(x);
    var v = [
        x[0] + sgn * xNorm,
        x[1],
        x[2]
    ];
    var mult = 2 / _normSquared(v);
    if (mult >= Infinity) {
        return {
            translate: Transform.getTranslate(M),
            rotate: [
                0,
                0,
                0
            ],
            scale: [
                0,
                0,
                0
            ],
            skew: [
                0,
                0,
                0
            ]
        };
    }
    var Q1 = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
    ];
    Q1[0] = 1 - mult * v[0] * v[0];
    Q1[5] = 1 - mult * v[1] * v[1];
    Q1[10] = 1 - mult * v[2] * v[2];
    Q1[1] = -mult * v[0] * v[1];
    Q1[2] = -mult * v[0] * v[2];
    Q1[6] = -mult * v[1] * v[2];
    Q1[4] = Q1[1];
    Q1[8] = Q1[2];
    Q1[9] = Q1[6];
    var MQ1 = Transform.multiply(Q1, M);
    var x2 = [
        MQ1[5],
        MQ1[6]
    ];
    var sgn2 = _sign(x2[0]);
    var x2Norm = _norm(x2);
    var v2 = [
        x2[0] + sgn2 * x2Norm,
        x2[1]
    ];
    var mult2 = 2 / _normSquared(v2);
    var Q2 = [
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
    ];
    Q2[5] = 1 - mult2 * v2[0] * v2[0];
    Q2[10] = 1 - mult2 * v2[1] * v2[1];
    Q2[6] = -mult2 * v2[0] * v2[1];
    Q2[9] = Q2[6];
    var Q = Transform.multiply(Q2, Q1);
    var R = Transform.multiply(Q, M);
    var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);
    R = Transform.multiply(R, remover);
    Q = Transform.multiply(remover, Q);
    var result = {};
    result.translate = Transform.getTranslate(M);
    result.rotate = [
        Math.atan2(-Q[6], Q[10]),
        Math.asin(Q[2]),
        Math.atan2(-Q[1], Q[0])
    ];
    if (!result.rotate[0]) {
        result.rotate[0] = 0;
        result.rotate[2] = Math.atan2(Q[4], Q[5]);
    }
    result.scale = [
        R[0],
        R[5],
        R[10]
    ];
    result.skew = [
        Math.atan2(R[9], result.scale[2]),
        Math.atan2(R[8], result.scale[2]),
        Math.atan2(R[4], result.scale[0])
    ];
    if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {
        result.rotate[1] = Math.PI - result.rotate[1];
        if (result.rotate[1] > Math.PI)
            result.rotate[1] -= 2 * Math.PI;
        if (result.rotate[1] < -Math.PI)
            result.rotate[1] += 2 * Math.PI;
        if (result.rotate[0] < 0)
            result.rotate[0] += Math.PI;
        else
            result.rotate[0] -= Math.PI;
        if (result.rotate[2] < 0)
            result.rotate[2] += Math.PI;
        else
            result.rotate[2] -= Math.PI;
    }
    return result;
};
Transform.average = function average(M1, M2, t) {
    t = t === undefined ? 0.5 : t;
    var specM1 = Transform.interpret(M1);
    var specM2 = Transform.interpret(M2);
    var specAvg = {
        translate: [
            0,
            0,
            0
        ],
        rotate: [
            0,
            0,
            0
        ],
        scale: [
            0,
            0,
            0
        ],
        skew: [
            0,
            0,
            0
        ]
    };
    for (var i = 0; i < 3; i++) {
        specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];
        specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];
        specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];
        specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];
    }
    return Transform.build(specAvg);
};
Transform.build = function build(spec) {
    var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);
    var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);
    var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);
    return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
};
Transform.equals = function equals(a, b) {
    return !Transform.notEquals(a, b);
};
Transform.notEquals = function notEquals(a, b) {
    if (a === b)
        return false;
    return !(a && b) || a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] || a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] || a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] || a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];
};
Transform.normalizeRotation = function normalizeRotation(rotation) {
    var result = rotation.slice(0);
    if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {
        result[0] = -result[0];
        result[1] = Math.PI - result[1];
        result[2] -= Math.PI;
    }
    if (result[0] > Math.PI * 0.5) {
        result[0] = result[0] - Math.PI;
        result[1] = Math.PI - result[1];
        result[2] -= Math.PI;
    }
    if (result[0] < -Math.PI * 0.5) {
        result[0] = result[0] + Math.PI;
        result[1] = -Math.PI - result[1];
        result[2] -= Math.PI;
    }
    while (result[1] < -Math.PI)
        result[1] += 2 * Math.PI;
    while (result[1] >= Math.PI)
        result[1] -= 2 * Math.PI;
    while (result[2] < -Math.PI)
        result[2] += 2 * Math.PI;
    while (result[2] >= Math.PI)
        result[2] -= 2 * Math.PI;
    return result;
};
Transform.inFront = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0.001,
    1
];
Transform.behind = [
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    -0.001,
    1
];
module.exports = Transform;
},{}],17:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('./EventHandler');
var OptionsManager = require('./OptionsManager');
var RenderNode = require('./RenderNode');
var Utility = require('../utilities/Utility');
function View(options) {
    this._node = new RenderNode();
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
}
View.DEFAULT_OPTIONS = {};
View.prototype.getOptions = function getOptions(key) {
    return this._optionsManager.getOptions(key);
};
View.prototype.setOptions = function setOptions(options) {
    this._optionsManager.patch(options);
};
View.prototype.add = function add() {
    return this._node.add.apply(this._node, arguments);
};
View.prototype._add = View.prototype.add;
View.prototype.render = function render() {
    return this._node.render();
};
View.prototype.getSize = function getSize() {
    if (this._node && this._node.getSize) {
        return this._node.getSize.apply(this._node, arguments) || this.options.size;
    } else
        return this.options.size;
};
module.exports = View;
},{"../utilities/Utility":96,"./EventHandler":8,"./OptionsManager":11,"./RenderNode":12}],18:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function ViewSequence(options) {
    if (!options)
        options = [];
    if (options instanceof Array)
        options = { array: options };
    this._ = null;
    this.index = options.index || 0;
    if (options.array)
        this._ = new this.constructor.Backing(options.array);
    else if (options._)
        this._ = options._;
    if (this.index === this._.firstIndex)
        this._.firstNode = this;
    if (this.index === this._.firstIndex + this._.array.length - 1)
        this._.lastNode = this;
    if (options.loop !== undefined)
        this._.loop = options.loop;
    if (options.trackSize !== undefined)
        this._.trackSize = options.trackSize;
    this._previousNode = null;
    this._nextNode = null;
}
ViewSequence.Backing = function Backing(array) {
    this.array = array;
    this.firstIndex = 0;
    this.loop = false;
    this.firstNode = null;
    this.lastNode = null;
    this.cumulativeSizes = [[
            0,
            0
        ]];
    this.sizeDirty = true;
    this.trackSize = false;
};
ViewSequence.Backing.prototype.getValue = function getValue(i) {
    var _i = i - this.firstIndex;
    if (_i < 0 || _i >= this.array.length)
        return null;
    return this.array[_i];
};
ViewSequence.Backing.prototype.setValue = function setValue(i, value) {
    this.array[i - this.firstIndex] = value;
};
ViewSequence.Backing.prototype.getSize = function getSize(index) {
    return this.cumulativeSizes[index];
};
ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {
    index = index || this.array.length;
    var size = [
        0,
        0
    ];
    for (var i = 0; i < index; i++) {
        var nodeSize = this.array[i].getSize();
        if (!nodeSize)
            return undefined;
        if (size[0] !== undefined) {
            if (nodeSize[0] === undefined)
                size[0] = undefined;
            else
                size[0] += nodeSize[0];
        }
        if (size[1] !== undefined) {
            if (nodeSize[1] === undefined)
                size[1] = undefined;
            else
                size[1] += nodeSize[1];
        }
        this.cumulativeSizes[i + 1] = size.slice();
    }
    this.sizeDirty = false;
    return size;
};
ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {
    if (!this.array[0])
        return;
    var i = 0;
    var index = this.firstIndex;
    var indexShiftAmount = insertCount - removeCount;
    var node = this.firstNode;
    while (index < start - 1) {
        node = node.getNext();
        index++;
    }
    var spliceStartNode = node;
    for (i = 0; i < removeCount; i++) {
        node = node.getNext();
        if (node)
            node._previousNode = spliceStartNode;
    }
    var spliceResumeNode = node ? node.getNext() : null;
    spliceStartNode._nextNode = null;
    node = spliceStartNode;
    for (i = 0; i < insertCount; i++)
        node = node.getNext();
    index += insertCount;
    if (node !== spliceResumeNode) {
        node._nextNode = spliceResumeNode;
        if (spliceResumeNode)
            spliceResumeNode._previousNode = node;
    }
    if (spliceResumeNode) {
        node = spliceResumeNode;
        index++;
        while (node && index < this.array.length + this.firstIndex) {
            if (node._nextNode)
                node.index += indexShiftAmount;
            else
                node.index = index;
            node = node.getNext();
            index++;
        }
    }
    if (this.trackSize)
        this.sizeDirty = true;
};
ViewSequence.prototype.getPrevious = function getPrevious() {
    var len = this._.array.length;
    if (!len) {
        this._previousNode = null;
    } else if (this.index === this._.firstIndex) {
        if (this._.loop) {
            this._previousNode = this._.lastNode || new this.constructor({
                _: this._,
                index: this._.firstIndex + len - 1
            });
            this._previousNode._nextNode = this;
        } else {
            this._previousNode = null;
        }
    } else if (!this._previousNode) {
        this._previousNode = new this.constructor({
            _: this._,
            index: this.index - 1
        });
        this._previousNode._nextNode = this;
    }
    return this._previousNode;
};
ViewSequence.prototype.getNext = function getNext() {
    var len = this._.array.length;
    if (!len) {
        this._nextNode = null;
    } else if (this.index === this._.firstIndex + len - 1) {
        if (this._.loop) {
            this._nextNode = this._.firstNode || new this.constructor({
                _: this._,
                index: this._.firstIndex
            });
            this._nextNode._previousNode = this;
        } else {
            this._nextNode = null;
        }
    } else if (!this._nextNode) {
        this._nextNode = new this.constructor({
            _: this._,
            index: this.index + 1
        });
        this._nextNode._previousNode = this;
    }
    return this._nextNode;
};
ViewSequence.prototype.indexOf = function indexOf(item) {
    return this._.array.indexOf(item);
};
ViewSequence.prototype.getIndex = function getIndex() {
    return this.index;
};
ViewSequence.prototype.toString = function toString() {
    return '' + this.index;
};
ViewSequence.prototype.unshift = function unshift(value) {
    this._.array.unshift.apply(this._.array, arguments);
    this._.firstIndex -= arguments.length;
    if (this._.trackSize)
        this._.sizeDirty = true;
};
ViewSequence.prototype.push = function push(value) {
    this._.array.push.apply(this._.array, arguments);
    if (this._.trackSize)
        this._.sizeDirty = true;
};
ViewSequence.prototype.splice = function splice(index, howMany) {
    var values = Array.prototype.slice.call(arguments, 2);
    this._.array.splice.apply(this._.array, [
        index - this._.firstIndex,
        howMany
    ].concat(values));
    this._.reindex(index, howMany, values.length);
};
ViewSequence.prototype.swap = function swap(other) {
    var otherValue = other.get();
    var myValue = this.get();
    this._.setValue(this.index, otherValue);
    this._.setValue(other.index, myValue);
    var myPrevious = this._previousNode;
    var myNext = this._nextNode;
    var myIndex = this.index;
    var otherPrevious = other._previousNode;
    var otherNext = other._nextNode;
    var otherIndex = other.index;
    this.index = otherIndex;
    this._previousNode = otherPrevious === this ? other : otherPrevious;
    if (this._previousNode)
        this._previousNode._nextNode = this;
    this._nextNode = otherNext === this ? other : otherNext;
    if (this._nextNode)
        this._nextNode._previousNode = this;
    other.index = myIndex;
    other._previousNode = myPrevious === other ? this : myPrevious;
    if (other._previousNode)
        other._previousNode._nextNode = other;
    other._nextNode = myNext === other ? this : myNext;
    if (other._nextNode)
        other._nextNode._previousNode = other;
    if (this.index === this._.firstIndex)
        this._.firstNode = this;
    else if (this.index === this._.firstIndex + this._.array.length - 1)
        this._.lastNode = this;
    if (other.index === this._.firstIndex)
        this._.firstNode = other;
    else if (other.index === this._.firstIndex + this._.array.length - 1)
        this._.lastNode = other;
    if (this._.trackSize)
        this._.sizeDirty = true;
};
ViewSequence.prototype.get = function get() {
    return this._.getValue(this.index);
};
ViewSequence.prototype.getSize = function getSize() {
    var target = this.get();
    return target ? target.getSize() : null;
};
ViewSequence.prototype.render = function render() {
    if (this._.trackSize && this._.sizeDirty)
        this._.calculateSize();
    var target = this.get();
    return target ? target.render.apply(target, arguments) : null;
};
module.exports = ViewSequence;
},{}],19:[function(require,module,exports){
module.exports = {
  Context: require('./Context'),
  ElementAllocator: require('./ElementAllocator'),
  ElementOutput: require('./ElementOutput'),
  Engine: require('./Engine'),
  Entity: require('./Entity'),
  EventEmitter: require('./EventEmitter'),
  EventHandler: require('./EventHandler'),
  Group: require('./Group'),
  Modifier: require('./Modifier'),
  OptionsManager: require('./OptionsManager'),
  RenderNode: require('./RenderNode'),
  Scene: require('./Scene'),
  SpecParser: require('./SpecParser'),
  Surface: require('./Surface'),
  Transform: require('./Transform'),
  View: require('./View'),
  ViewSequence: require('./ViewSequence')
};

},{"./Context":2,"./ElementAllocator":3,"./ElementOutput":4,"./Engine":5,"./Entity":6,"./EventEmitter":7,"./EventHandler":8,"./Group":9,"./Modifier":10,"./OptionsManager":11,"./RenderNode":12,"./Scene":13,"./SpecParser":14,"./Surface":15,"./Transform":16,"./View":17,"./ViewSequence":18}],20:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function EventArbiter(startMode) {
    this.dispatchers = {};
    this.currMode = undefined;
    this.setMode(startMode);
}
EventArbiter.prototype.setMode = function setMode(mode) {
    if (mode !== this.currMode) {
        var startMode = this.currMode;
        if (this.dispatchers[this.currMode])
            this.dispatchers[this.currMode].trigger('unpipe');
        this.currMode = mode;
        if (this.dispatchers[mode])
            this.dispatchers[mode].emit('pipe');
        this.emit('change', {
            from: startMode,
            to: mode
        });
    }
};
EventArbiter.prototype.forMode = function forMode(mode) {
    if (!this.dispatchers[mode])
        this.dispatchers[mode] = new EventHandler();
    return this.dispatchers[mode];
};
EventArbiter.prototype.emit = function emit(eventType, event) {
    if (this.currMode === undefined)
        return false;
    if (!event)
        event = {};
    var dispatcher = this.dispatchers[this.currMode];
    if (dispatcher)
        return dispatcher.trigger(eventType, event);
};
module.exports = EventArbiter;
},{"../core/EventHandler":8}],21:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function EventFilter(condition) {
    EventHandler.call(this);
    this._condition = condition;
}
EventFilter.prototype = Object.create(EventHandler.prototype);
EventFilter.prototype.constructor = EventFilter;
EventFilter.prototype.emit = function emit(type, data) {
    if (this._condition(type, data))
        return EventHandler.prototype.emit.apply(this, arguments);
};
EventFilter.prototype.trigger = EventFilter.prototype.emit;
module.exports = EventFilter;
},{"../core/EventHandler":8}],22:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function EventMapper(mappingFunction) {
    EventHandler.call(this);
    this._mappingFunction = mappingFunction;
}
EventMapper.prototype = Object.create(EventHandler.prototype);
EventMapper.prototype.constructor = EventMapper;
EventMapper.prototype.subscribe = null;
EventMapper.prototype.unsubscribe = null;
EventMapper.prototype.emit = function emit(type, data) {
    var target = this._mappingFunction.apply(this, arguments);
    if (target && target.emit instanceof Function)
        target.emit(type, data);
};
EventMapper.prototype.trigger = EventMapper.prototype.emit;
module.exports = EventMapper;
},{"../core/EventHandler":8}],23:[function(require,module,exports){
module.exports = {
  EventArbiter: require('./EventArbiter'),
  EventFilter: require('./EventFilter'),
  EventMapper: require('./EventMapper')
};

},{"./EventArbiter":20,"./EventFilter":21,"./EventMapper":22}],24:[function(require,module,exports){
module.exports = {
  core: require('./core'),
  events: require('./events'),
  inputs: require('./inputs'),
  math: require('./math'),
  modifiers: require('./modifiers'),
  physics: require('./physics'),
  surfaces: require('./surfaces'),
  transitions: require('./transitions'),
  utilities: require('./utilities'),
  views: require('./views'),
  widgets: require('./widgets')
};

},{"./core":19,"./events":23,"./inputs":37,"./math":43,"./modifiers":48,"./physics":72,"./surfaces":83,"./transitions":93,"./utilities":97,"./views":113,"./widgets":118}],25:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
var Transitionable = require('../transitions/Transitionable');
function Accumulator(value, eventName) {
    if (eventName === undefined)
        eventName = 'update';
    this._state = value && value.get && value.set ? value : new Transitionable(value || 0);
    this._eventInput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    this._eventInput.on(eventName, _handleUpdate.bind(this));
}
function _handleUpdate(data) {
    var delta = data.delta;
    var state = this.get();
    if (delta.constructor === state.constructor) {
        var newState = delta instanceof Array ? [
            state[0] + delta[0],
            state[1] + delta[1]
        ] : state + delta;
        this.set(newState);
    }
}
Accumulator.prototype.get = function get() {
    return this._state.get();
};
Accumulator.prototype.set = function set(value) {
    this._state.set(value);
};
module.exports = Accumulator;
},{"../core/EventHandler":8,"../transitions/Transitionable":89}],26:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var hasTouch = 'ontouchstart' in window;
function kill(type) {
    window.addEventListener(type, function (event) {
        event.stopPropagation();
        return false;
    }, true);
}
if (hasTouch) {
    kill('mousedown');
    kill('mousemove');
    kill('mouseup');
    kill('mouseleave');
}
},{}],27:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
(function () {
    if (!window.CustomEvent)
        return;
    var clickThreshold = 300;
    var clickWindow = 500;
    var potentialClicks = {};
    var recentlyDispatched = {};
    var _now = Date.now;
    window.addEventListener('touchstart', function (event) {
        var timestamp = _now();
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            potentialClicks[touch.identifier] = timestamp;
        }
    });
    window.addEventListener('touchmove', function (event) {
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            delete potentialClicks[touch.identifier];
        }
    });
    window.addEventListener('touchend', function (event) {
        var currTime = _now();
        for (var i = 0; i < event.changedTouches.length; i++) {
            var touch = event.changedTouches[i];
            var startTime = potentialClicks[touch.identifier];
            if (startTime && currTime - startTime < clickThreshold) {
                var clickEvt = new window.CustomEvent('click', {
                    'bubbles': true,
                    'detail': touch
                });
                recentlyDispatched[currTime] = event;
                event.target.dispatchEvent(clickEvt);
            }
            delete potentialClicks[touch.identifier];
        }
    });
    window.addEventListener('click', function (event) {
        var currTime = _now();
        for (var i in recentlyDispatched) {
            var previousEvent = recentlyDispatched[i];
            if (currTime - i < clickWindow) {
                if (event instanceof window.MouseEvent && event.target === previousEvent.target)
                    event.stopPropagation();
            } else
                delete recentlyDispatched[i];
        }
    }, true);
}());
},{}],28:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function GenericSync(syncs, options) {
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._syncs = {};
    if (syncs)
        this.addSync(syncs);
    if (options)
        this.setOptions(options);
}
GenericSync.DIRECTION_X = 0;
GenericSync.DIRECTION_Y = 1;
GenericSync.DIRECTION_Z = 2;
var registry = {};
GenericSync.register = function register(syncObject) {
    for (var key in syncObject) {
        if (registry[key]) {
            if (registry[key] !== syncObject[key])
                throw new Error('Conflicting sync classes for key: ' + key);
        } else
            registry[key] = syncObject[key];
    }
};
GenericSync.prototype.setOptions = function (options) {
    for (var key in this._syncs) {
        this._syncs[key].setOptions(options);
    }
};
GenericSync.prototype.pipeSync = function pipeToSync(key) {
    var sync = this._syncs[key];
    this._eventInput.pipe(sync);
    sync.pipe(this._eventOutput);
};
GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {
    var sync = this._syncs[key];
    this._eventInput.unpipe(sync);
    sync.unpipe(this._eventOutput);
};
function _addSingleSync(key, options) {
    if (!registry[key])
        return;
    this._syncs[key] = new registry[key](options);
    this.pipeSync(key);
}
GenericSync.prototype.addSync = function addSync(syncs) {
    if (syncs instanceof Array)
        for (var i = 0; i < syncs.length; i++)
            _addSingleSync.call(this, syncs[i]);
    else if (syncs instanceof Object)
        for (var key in syncs)
            _addSingleSync.call(this, key, syncs[key]);
};
module.exports = GenericSync;
},{"../core/EventHandler":8}],29:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
var OptionsManager = require('../core/OptionsManager');
function MouseSync(options) {
    this.options = Object.create(MouseSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._eventInput.on('mousedown', _handleStart.bind(this));
    this._eventInput.on('mousemove', _handleMove.bind(this));
    this._eventInput.on('mouseup', _handleEnd.bind(this));
    if (this.options.propogate)
        this._eventInput.on('mouseleave', _handleLeave.bind(this));
    else
        this._eventInput.on('mouseleave', _handleEnd.bind(this));
    if (this.options.clickThreshold) {
        window.addEventListener('click', function (event) {
            if (Math.sqrt(Math.pow(this._displacement[0], 2) + Math.pow(this._displacement[1], 2)) > this.options.clickThreshold) {
                event.stopPropagation();
            }
        }.bind(this), true);
    }
    this._payload = {
        delta: null,
        position: null,
        velocity: null,
        clientX: 0,
        clientY: 0,
        offsetX: 0,
        offsetY: 0
    };
    this._positionHistory = [];
    this._position = null;
    this._prevCoord = undefined;
    this._prevTime = undefined;
    this._down = false;
    this._moved = false;
    this._displacement = [
        0,
        0
    ];
    this._documentActive = false;
}
MouseSync.DEFAULT_OPTIONS = {
    clickThreshold: undefined,
    direction: undefined,
    rails: false,
    scale: 1,
    propogate: true,
    velocitySampleLength: 10,
    preventDefault: true
};
MouseSync.DIRECTION_X = 0;
MouseSync.DIRECTION_Y = 1;
var MINIMUM_TICK_TIME = 8;
function _handleStart(event) {
    var delta;
    var velocity;
    if (this.options.preventDefault)
        event.preventDefault();
    var x = event.clientX;
    var y = event.clientY;
    this._prevCoord = [
        x,
        y
    ];
    this._prevTime = Date.now();
    this._down = true;
    this._move = false;
    if (this.options.direction !== undefined) {
        this._position = 0;
        delta = 0;
        velocity = 0;
    } else {
        this._position = [
            0,
            0
        ];
        delta = [
            0,
            0
        ];
        velocity = [
            0,
            0
        ];
    }
    if (this.options.clickThreshold) {
        this._displacement = [
            0,
            0
        ];
    }
    var payload = this._payload;
    payload.delta = delta;
    payload.position = this._position;
    payload.velocity = velocity;
    payload.clientX = x;
    payload.clientY = y;
    payload.offsetX = event.offsetX;
    payload.offsetY = event.offsetY;
    this._positionHistory.push({
        position: payload.position.slice ? payload.position.slice(0) : payload.position,
        time: this._prevTime
    });
    this._eventOutput.emit('start', payload);
    this._documentActive = false;
}
function _handleMove(event) {
    if (!this._prevCoord)
        return;
    var prevCoord = this._prevCoord;
    var prevTime = this._prevTime;
    var x = event.clientX;
    var y = event.clientY;
    var currTime = Date.now();
    var diffX = x - prevCoord[0];
    var diffY = y - prevCoord[1];
    if (this.options.rails) {
        if (Math.abs(diffX) > Math.abs(diffY))
            diffY = 0;
        else
            diffX = 0;
    }
    var diffTime = Math.max(currTime - this._positionHistory[0].time, MINIMUM_TICK_TIME);
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === MouseSync.DIRECTION_X) {
        nextDelta = scale * diffX;
        this._position += nextDelta;
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
    } else if (this.options.direction === MouseSync.DIRECTION_Y) {
        nextDelta = scale * diffY;
        this._position += nextDelta;
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
    } else {
        nextDelta = [
            scale * diffX,
            scale * diffY
        ];
        nextVel = [
            scale * (this._position[0] - this._positionHistory[0].position[0]) / diffTime,
            scale * (this._position[1] - this._positionHistory[0].position[1]) / diffTime
        ];
        this._position[0] += nextDelta[0];
        this._position[1] += nextDelta[1];
    }
    if (this.options.clickThreshold !== false) {
        this._displacement[0] += diffX;
        this._displacement[1] += diffY;
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.position = this._position;
    payload.velocity = nextVel;
    payload.clientX = x;
    payload.clientY = y;
    payload.offsetX = event.offsetX;
    payload.offsetY = event.offsetY;
    if (this._positionHistory.length === this.options.velocitySampleLength) {
        this._positionHistory.shift();
    }
    this._positionHistory.push({
        position: payload.position.slice ? payload.position.slice(0) : payload.position,
        time: currTime
    });
    this._eventOutput.emit('update', payload);
    this._prevCoord = [
        x,
        y
    ];
    this._prevTime = currTime;
    this._move = true;
}
function _handleEnd(event) {
    if (!this._down)
        return;
    this._eventOutput.emit('end', this._payload);
    this._prevCoord = undefined;
    this._prevTime = undefined;
    this._down = false;
    this._move = false;
    this._positionHistory = [];
}
function _handleLeave(event) {
    if (!this._down || !this._move)
        return;
    if (!this._documentActive) {
        var boundMove = _handleMove.bind(this);
        var boundEnd = function (event) {
            _handleEnd.call(this, event);
            document.removeEventListener('mousemove', boundMove);
            document.removeEventListener('mouseup', boundEnd);
        }.bind(this, event);
        document.addEventListener('mousemove', boundMove);
        document.addEventListener('mouseup', boundEnd);
        this._documentActive = true;
    }
}
MouseSync.prototype.getOptions = function getOptions() {
    return this.options;
};
MouseSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
module.exports = MouseSync;
},{"../core/EventHandler":8,"../core/OptionsManager":11}],30:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var TwoFingerSync = require('./TwoFingerSync');
var OptionsManager = require('../core/OptionsManager');
function PinchSync(options) {
    TwoFingerSync.call(this);
    this.options = Object.create(PinchSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._displacement = 0;
    this._previousDistance = 0;
}
PinchSync.prototype = Object.create(TwoFingerSync.prototype);
PinchSync.prototype.constructor = PinchSync;
PinchSync.DEFAULT_OPTIONS = { scale: 1 };
PinchSync.prototype._startUpdate = function _startUpdate(event) {
    this._previousDistance = TwoFingerSync.calculateDistance(this.posA, this.posB);
    this._displacement = 0;
    this._eventOutput.emit('start', {
        count: event.touches.length,
        touches: [
            this.touchAId,
            this.touchBId
        ],
        distance: this._dist,
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)
    });
};
PinchSync.prototype._moveUpdate = function _moveUpdate(diffTime) {
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);
    var scale = this.options.scale;
    var delta = scale * (currDist - this._previousDistance);
    var velocity = delta / diffTime;
    this._previousDistance = currDist;
    this._displacement += delta;
    this._eventOutput.emit('update', {
        delta: delta,
        velocity: velocity,
        distance: currDist,
        displacement: this._displacement,
        center: center,
        touches: [
            this.touchAId,
            this.touchBId
        ]
    });
};
PinchSync.prototype.getOptions = function getOptions() {
    return this.options;
};
PinchSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
module.exports = PinchSync;
},{"../core/OptionsManager":11,"./TwoFingerSync":36}],31:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var TwoFingerSync = require('./TwoFingerSync');
var OptionsManager = require('../core/OptionsManager');
function RotateSync(options) {
    TwoFingerSync.call(this);
    this.options = Object.create(RotateSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._angle = 0;
    this._previousAngle = 0;
}
RotateSync.prototype = Object.create(TwoFingerSync.prototype);
RotateSync.prototype.constructor = RotateSync;
RotateSync.DEFAULT_OPTIONS = { scale: 1 };
RotateSync.prototype._startUpdate = function _startUpdate(event) {
    this._angle = 0;
    this._previousAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);
    this._eventOutput.emit('start', {
        count: event.touches.length,
        angle: this._angle,
        center: center,
        touches: [
            this.touchAId,
            this.touchBId
        ]
    });
};
RotateSync.prototype._moveUpdate = function _moveUpdate(diffTime) {
    var scale = this.options.scale;
    var currAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);
    var diffTheta = scale * (currAngle - this._previousAngle);
    var velTheta = diffTheta / diffTime;
    this._angle += diffTheta;
    this._eventOutput.emit('update', {
        delta: diffTheta,
        velocity: velTheta,
        angle: this._angle,
        center: center,
        touches: [
            this.touchAId,
            this.touchBId
        ]
    });
    this._previousAngle = currAngle;
};
RotateSync.prototype.getOptions = function getOptions() {
    return this.options;
};
RotateSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
module.exports = RotateSync;
},{"../core/OptionsManager":11,"./TwoFingerSync":36}],32:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var TwoFingerSync = require('./TwoFingerSync');
var OptionsManager = require('../core/OptionsManager');
function ScaleSync(options) {
    TwoFingerSync.call(this);
    this.options = Object.create(ScaleSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._scaleFactor = 1;
    this._startDist = 0;
    this._eventInput.on('pipe', _reset.bind(this));
}
ScaleSync.prototype = Object.create(TwoFingerSync.prototype);
ScaleSync.prototype.constructor = ScaleSync;
ScaleSync.DEFAULT_OPTIONS = { scale: 1 };
function _reset() {
    this.touchAId = undefined;
    this.touchBId = undefined;
}
ScaleSync.prototype._startUpdate = function _startUpdate(event) {
    this._scaleFactor = 1;
    this._startDist = TwoFingerSync.calculateDistance(this.posA, this.posB);
    this._eventOutput.emit('start', {
        count: event.touches.length,
        touches: [
            this.touchAId,
            this.touchBId
        ],
        distance: this._startDist,
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)
    });
};
ScaleSync.prototype._moveUpdate = function _moveUpdate(diffTime) {
    var scale = this.options.scale;
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);
    var delta = (currDist - this._startDist) / this._startDist;
    var newScaleFactor = Math.max(1 + scale * delta, 0);
    var veloScale = (newScaleFactor - this._scaleFactor) / diffTime;
    this._eventOutput.emit('update', {
        delta: delta,
        scale: newScaleFactor,
        velocity: veloScale,
        distance: currDist,
        center: center,
        touches: [
            this.touchAId,
            this.touchBId
        ]
    });
    this._scaleFactor = newScaleFactor;
};
ScaleSync.prototype.getOptions = function getOptions() {
    return this.options;
};
ScaleSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
module.exports = ScaleSync;
},{"../core/OptionsManager":11,"./TwoFingerSync":36}],33:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
var Engine = require('../core/Engine');
var OptionsManager = require('../core/OptionsManager');
function ScrollSync(options) {
    this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._payload = {
        delta: null,
        position: null,
        velocity: null,
        slip: true
    };
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._position = this.options.direction === undefined ? [
        0,
        0
    ] : 0;
    this._prevTime = undefined;
    this._prevVel = undefined;
    this._eventInput.on('mousewheel', _handleMove.bind(this));
    this._eventInput.on('wheel', _handleMove.bind(this));
    this._inProgress = false;
    this._loopBound = false;
}
ScrollSync.DEFAULT_OPTIONS = {
    direction: undefined,
    minimumEndSpeed: Infinity,
    rails: false,
    scale: 1,
    stallTime: 50,
    lineHeight: 40,
    preventDefault: true
};
ScrollSync.DIRECTION_X = 0;
ScrollSync.DIRECTION_Y = 1;
var MINIMUM_TICK_TIME = 8;
var _now = Date.now;
function _newFrame() {
    if (this._inProgress && _now() - this._prevTime > this.options.stallTime) {
        this._inProgress = false;
        var finalVel = Math.abs(this._prevVel) >= this.options.minimumEndSpeed ? this._prevVel : 0;
        var payload = this._payload;
        payload.position = this._position;
        payload.velocity = finalVel;
        payload.slip = true;
        this._eventOutput.emit('end', payload);
    }
}
function _handleMove(event) {
    if (this.options.preventDefault)
        event.preventDefault();
    if (!this._inProgress) {
        this._inProgress = true;
        this._position = this.options.direction === undefined ? [
            0,
            0
        ] : 0;
        payload = this._payload;
        payload.slip = true;
        payload.position = this._position;
        payload.clientX = event.clientX;
        payload.clientY = event.clientY;
        payload.offsetX = event.offsetX;
        payload.offsetY = event.offsetY;
        this._eventOutput.emit('start', payload);
        if (!this._loopBound) {
            Engine.on('prerender', _newFrame.bind(this));
            this._loopBound = true;
        }
    }
    var currTime = _now();
    var prevTime = this._prevTime || currTime;
    var diffX = event.wheelDeltaX !== undefined ? event.wheelDeltaX : -event.deltaX;
    var diffY = event.wheelDeltaY !== undefined ? event.wheelDeltaY : -event.deltaY;
    if (event.deltaMode === 1) {
        diffX *= this.options.lineHeight;
        diffY *= this.options.lineHeight;
    }
    if (this.options.rails) {
        if (Math.abs(diffX) > Math.abs(diffY))
            diffY = 0;
        else
            diffX = 0;
    }
    var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME);
    var velX = diffX / diffTime;
    var velY = diffY / diffTime;
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === ScrollSync.DIRECTION_X) {
        nextDelta = scale * diffX;
        nextVel = scale * velX;
        this._position += nextDelta;
    } else if (this.options.direction === ScrollSync.DIRECTION_Y) {
        nextDelta = scale * diffY;
        nextVel = scale * velY;
        this._position += nextDelta;
    } else {
        nextDelta = [
            scale * diffX,
            scale * diffY
        ];
        nextVel = [
            scale * velX,
            scale * velY
        ];
        this._position[0] += nextDelta[0];
        this._position[1] += nextDelta[1];
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.velocity = nextVel;
    payload.position = this._position;
    payload.slip = true;
    this._eventOutput.emit('update', payload);
    this._prevTime = currTime;
    this._prevVel = nextVel;
}
ScrollSync.prototype.getOptions = function getOptions() {
    return this.options;
};
ScrollSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
module.exports = ScrollSync;
},{"../core/Engine":5,"../core/EventHandler":8,"../core/OptionsManager":11}],34:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var TouchTracker = require('./TouchTracker');
var EventHandler = require('../core/EventHandler');
var OptionsManager = require('../core/OptionsManager');
function TouchSync(options) {
    this.options = Object.create(TouchSync.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._eventOutput = new EventHandler();
    this._touchTracker = new TouchTracker({ touchLimit: this.options.touchLimit });
    EventHandler.setOutputHandler(this, this._eventOutput);
    EventHandler.setInputHandler(this, this._touchTracker);
    this._touchTracker.on('trackstart', _handleStart.bind(this));
    this._touchTracker.on('trackmove', _handleMove.bind(this));
    this._touchTracker.on('trackend', _handleEnd.bind(this));
    this._payload = {
        delta: null,
        position: null,
        velocity: null,
        clientX: undefined,
        clientY: undefined,
        count: 0,
        touch: undefined
    };
    this._position = null;
}
TouchSync.DEFAULT_OPTIONS = {
    direction: undefined,
    rails: false,
    touchLimit: 1,
    velocitySampleLength: 10,
    scale: 1
};
TouchSync.DIRECTION_X = 0;
TouchSync.DIRECTION_Y = 1;
var MINIMUM_TICK_TIME = 8;
function _handleStart(data) {
    var velocity;
    var delta;
    if (this.options.direction !== undefined) {
        this._position = 0;
        velocity = 0;
        delta = 0;
    } else {
        this._position = [
            0,
            0
        ];
        velocity = [
            0,
            0
        ];
        delta = [
            0,
            0
        ];
    }
    var payload = this._payload;
    payload.delta = delta;
    payload.position = this._position;
    payload.velocity = velocity;
    payload.clientX = data.x;
    payload.clientY = data.y;
    payload.count = data.count;
    payload.touch = data.identifier;
    this._eventOutput.emit('start', payload);
}
function _handleMove(data) {
    var history = data.history;
    var currHistory = history[history.length - 1];
    var prevHistory = history[history.length - 2];
    var distantHistory = history[history.length - this.options.velocitySampleLength] ? history[history.length - this.options.velocitySampleLength] : history[history.length - 2];
    var distantTime = distantHistory.timestamp;
    var currTime = currHistory.timestamp;
    var diffX = currHistory.x - prevHistory.x;
    var diffY = currHistory.y - prevHistory.y;
    var velDiffX = currHistory.x - distantHistory.x;
    var velDiffY = currHistory.y - distantHistory.y;
    if (this.options.rails) {
        if (Math.abs(diffX) > Math.abs(diffY))
            diffY = 0;
        else
            diffX = 0;
        if (Math.abs(velDiffX) > Math.abs(velDiffY))
            velDiffY = 0;
        else
            velDiffX = 0;
    }
    var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);
    var velX = velDiffX / diffTime;
    var velY = velDiffY / diffTime;
    var scale = this.options.scale;
    var nextVel;
    var nextDelta;
    if (this.options.direction === TouchSync.DIRECTION_X) {
        nextDelta = scale * diffX;
        nextVel = scale * velX;
        this._position += nextDelta;
    } else if (this.options.direction === TouchSync.DIRECTION_Y) {
        nextDelta = scale * diffY;
        nextVel = scale * velY;
        this._position += nextDelta;
    } else {
        nextDelta = [
            scale * diffX,
            scale * diffY
        ];
        nextVel = [
            scale * velX,
            scale * velY
        ];
        this._position[0] += nextDelta[0];
        this._position[1] += nextDelta[1];
    }
    var payload = this._payload;
    payload.delta = nextDelta;
    payload.velocity = nextVel;
    payload.position = this._position;
    payload.clientX = data.x;
    payload.clientY = data.y;
    payload.count = data.count;
    payload.touch = data.identifier;
    this._eventOutput.emit('update', payload);
}
function _handleEnd(data) {
    this._payload.count = data.count;
    this._eventOutput.emit('end', this._payload);
}
TouchSync.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
TouchSync.prototype.getOptions = function getOptions() {
    return this.options;
};
module.exports = TouchSync;
},{"../core/EventHandler":8,"../core/OptionsManager":11,"./TouchTracker":35}],35:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
var _now = Date.now;
function _timestampTouch(touch, event, history) {
    return {
        x: touch.clientX,
        y: touch.clientY,
        identifier: touch.identifier,
        origin: event.origin,
        timestamp: _now(),
        count: event.touches.length,
        history: history
    };
}
function _handleStart(event) {
    if (event.touches.length > this.touchLimit)
        return;
    this.isTouched = true;
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        var data = _timestampTouch(touch, event, null);
        this.eventOutput.emit('trackstart', data);
        if (!this.selective && !this.touchHistory[touch.identifier])
            this.track(data);
    }
}
function _handleMove(event) {
    if (event.touches.length > this.touchLimit)
        return;
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        var history = this.touchHistory[touch.identifier];
        if (history) {
            var data = _timestampTouch(touch, event, history);
            this.touchHistory[touch.identifier].push(data);
            this.eventOutput.emit('trackmove', data);
        }
    }
}
function _handleEnd(event) {
    if (!this.isTouched)
        return;
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        var history = this.touchHistory[touch.identifier];
        if (history) {
            var data = _timestampTouch(touch, event, history);
            this.eventOutput.emit('trackend', data);
            delete this.touchHistory[touch.identifier];
        }
    }
    this.isTouched = false;
}
function _handleUnpipe() {
    for (var i in this.touchHistory) {
        var history = this.touchHistory[i];
        this.eventOutput.emit('trackend', {
            touch: history[history.length - 1].touch,
            timestamp: Date.now(),
            count: 0,
            history: history
        });
        delete this.touchHistory[i];
    }
}
function TouchTracker(options) {
    this.selective = options.selective;
    this.touchLimit = options.touchLimit || 1;
    this.touchHistory = {};
    this.eventInput = new EventHandler();
    this.eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this.eventInput);
    EventHandler.setOutputHandler(this, this.eventOutput);
    this.eventInput.on('touchstart', _handleStart.bind(this));
    this.eventInput.on('touchmove', _handleMove.bind(this));
    this.eventInput.on('touchend', _handleEnd.bind(this));
    this.eventInput.on('touchcancel', _handleEnd.bind(this));
    this.eventInput.on('unpipe', _handleUnpipe.bind(this));
    this.isTouched = false;
}
TouchTracker.prototype.track = function track(data) {
    this.touchHistory[data.identifier] = [data];
};
module.exports = TouchTracker;
},{"../core/EventHandler":8}],36:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function TwoFingerSync() {
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this.touchAEnabled = false;
    this.touchAId = 0;
    this.posA = null;
    this.timestampA = 0;
    this.touchBEnabled = false;
    this.touchBId = 0;
    this.posB = null;
    this.timestampB = 0;
    this._eventInput.on('touchstart', this.handleStart.bind(this));
    this._eventInput.on('touchmove', this.handleMove.bind(this));
    this._eventInput.on('touchend', this.handleEnd.bind(this));
    this._eventInput.on('touchcancel', this.handleEnd.bind(this));
}
TwoFingerSync.calculateAngle = function (posA, posB) {
    var diffX = posB[0] - posA[0];
    var diffY = posB[1] - posA[1];
    return Math.atan2(diffY, diffX);
};
TwoFingerSync.calculateDistance = function (posA, posB) {
    var diffX = posB[0] - posA[0];
    var diffY = posB[1] - posA[1];
    return Math.sqrt(diffX * diffX + diffY * diffY);
};
TwoFingerSync.calculateCenter = function (posA, posB) {
    return [
        (posA[0] + posB[0]) / 2,
        (posA[1] + posB[1]) / 2
    ];
};
var _now = Date.now;
TwoFingerSync.prototype.handleStart = function handleStart(event) {
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        if (!this.touchAEnabled) {
            this.touchAId = touch.identifier;
            this.touchAEnabled = true;
            this.posA = [
                touch.pageX,
                touch.pageY
            ];
            this.timestampA = _now();
        } else if (!this.touchBEnabled) {
            this.touchBId = touch.identifier;
            this.touchBEnabled = true;
            this.posB = [
                touch.pageX,
                touch.pageY
            ];
            this.timestampB = _now();
            this._startUpdate(event);
        }
    }
};
TwoFingerSync.prototype.handleMove = function handleMove(event) {
    if (!(this.touchAEnabled && this.touchBEnabled))
        return;
    var prevTimeA = this.timestampA;
    var prevTimeB = this.timestampB;
    var diffTime;
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        if (touch.identifier === this.touchAId) {
            this.posA = [
                touch.pageX,
                touch.pageY
            ];
            this.timestampA = _now();
            diffTime = this.timestampA - prevTimeA;
        } else if (touch.identifier === this.touchBId) {
            this.posB = [
                touch.pageX,
                touch.pageY
            ];
            this.timestampB = _now();
            diffTime = this.timestampB - prevTimeB;
        }
    }
    if (diffTime)
        this._moveUpdate(diffTime);
};
TwoFingerSync.prototype.handleEnd = function handleEnd(event) {
    for (var i = 0; i < event.changedTouches.length; i++) {
        var touch = event.changedTouches[i];
        if (touch.identifier === this.touchAId || touch.identifier === this.touchBId) {
            if (this.touchAEnabled && this.touchBEnabled) {
                this._eventOutput.emit('end', {
                    touches: [
                        this.touchAId,
                        this.touchBId
                    ],
                    angle: this._angle
                });
            }
            this.touchAEnabled = false;
            this.touchAId = 0;
            this.touchBEnabled = false;
            this.touchBId = 0;
        }
    }
};
module.exports = TwoFingerSync;
},{"../core/EventHandler":8}],37:[function(require,module,exports){
module.exports = {
  Accumulator: require('./Accumulator'),
  DesktopEmulationMode: require('./DesktopEmulationMode'),
  FastClick: require('./FastClick'),
  GenericSync: require('./GenericSync'),
  MouseSync: require('./MouseSync'),
  PinchSync: require('./PinchSync'),
  RotateSync: require('./RotateSync'),
  ScaleSync: require('./ScaleSync'),
  ScrollSync: require('./ScrollSync'),
  TouchSync: require('./TouchSync'),
  TouchTracker: require('./TouchTracker'),
  TwoFingerSync: require('./TwoFingerSync')
};

},{"./Accumulator":25,"./DesktopEmulationMode":26,"./FastClick":27,"./GenericSync":28,"./MouseSync":29,"./PinchSync":30,"./RotateSync":31,"./ScaleSync":32,"./ScrollSync":33,"./TouchSync":34,"./TouchTracker":35,"./TwoFingerSync":36}],38:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Vector = require('./Vector');
function Matrix(values) {
    this.values = values || [
        [
            1,
            0,
            0
        ],
        [
            0,
            1,
            0
        ],
        [
            0,
            0,
            1
        ]
    ];
    return this;
}
var _register = new Matrix();
var _vectorRegister = new Vector();
Matrix.prototype.get = function get() {
    return this.values;
};
Matrix.prototype.set = function set(values) {
    this.values = values;
};
Matrix.prototype.vectorMultiply = function vectorMultiply(v) {
    var M = this.get();
    var v0 = v.x;
    var v1 = v.y;
    var v2 = v.z;
    var M0 = M[0];
    var M1 = M[1];
    var M2 = M[2];
    var M00 = M0[0];
    var M01 = M0[1];
    var M02 = M0[2];
    var M10 = M1[0];
    var M11 = M1[1];
    var M12 = M1[2];
    var M20 = M2[0];
    var M21 = M2[1];
    var M22 = M2[2];
    return _vectorRegister.setXYZ(M00 * v0 + M01 * v1 + M02 * v2, M10 * v0 + M11 * v1 + M12 * v2, M20 * v0 + M21 * v1 + M22 * v2);
};
Matrix.prototype.multiply = function multiply(M2) {
    var M1 = this.get();
    var result = [[]];
    for (var i = 0; i < 3; i++) {
        result[i] = [];
        for (var j = 0; j < 3; j++) {
            var sum = 0;
            for (var k = 0; k < 3; k++) {
                sum += M1[i][k] * M2[k][j];
            }
            result[i][j] = sum;
        }
    }
    return _register.set(result);
};
Matrix.prototype.transpose = function transpose() {
    var result = [
        [],
        [],
        []
    ];
    var M = this.get();
    for (var row = 0; row < 3; row++) {
        for (var col = 0; col < 3; col++) {
            result[row][col] = M[col][row];
        }
    }
    return _register.set(result);
};
Matrix.prototype.clone = function clone() {
    var values = this.get();
    var M = [];
    for (var row = 0; row < 3; row++)
        M[row] = values[row].slice();
    return new Matrix(M);
};
module.exports = Matrix;
},{"./Vector":42}],39:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Matrix = require('./Matrix');
function Quaternion(w, x, y, z) {
    if (arguments.length === 1)
        this.set(w);
    else {
        this.w = w !== undefined ? w : 1;
        this.x = x !== undefined ? x : 0;
        this.y = y !== undefined ? y : 0;
        this.z = z !== undefined ? z : 0;
    }
    return this;
}
var register = new Quaternion(1, 0, 0, 0);
Quaternion.prototype.add = function add(q) {
    return register.setWXYZ(this.w + q.w, this.x + q.x, this.y + q.y, this.z + q.z);
};
Quaternion.prototype.sub = function sub(q) {
    return register.setWXYZ(this.w - q.w, this.x - q.x, this.y - q.y, this.z - q.z);
};
Quaternion.prototype.scalarDivide = function scalarDivide(s) {
    return this.scalarMultiply(1 / s);
};
Quaternion.prototype.scalarMultiply = function scalarMultiply(s) {
    return register.setWXYZ(this.w * s, this.x * s, this.y * s, this.z * s);
};
Quaternion.prototype.multiply = function multiply(q) {
    var x1 = this.x;
    var y1 = this.y;
    var z1 = this.z;
    var w1 = this.w;
    var x2 = q.x;
    var y2 = q.y;
    var z2 = q.z;
    var w2 = q.w || 0;
    return register.setWXYZ(w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2, x1 * w2 + x2 * w1 + y2 * z1 - y1 * z2, y1 * w2 + y2 * w1 + x1 * z2 - x2 * z1, z1 * w2 + z2 * w1 + x2 * y1 - x1 * y2);
};
var conj = new Quaternion(1, 0, 0, 0);
Quaternion.prototype.rotateVector = function rotateVector(v) {
    conj.set(this.conj());
    return register.set(this.multiply(v).multiply(conj));
};
Quaternion.prototype.inverse = function inverse() {
    return register.set(this.conj().scalarDivide(this.normSquared()));
};
Quaternion.prototype.negate = function negate() {
    return this.scalarMultiply(-1);
};
Quaternion.prototype.conj = function conj() {
    return register.setWXYZ(this.w, -this.x, -this.y, -this.z);
};
Quaternion.prototype.normalize = function normalize(length) {
    length = length === undefined ? 1 : length;
    return this.scalarDivide(length * this.norm());
};
Quaternion.prototype.makeFromAngleAndAxis = function makeFromAngleAndAxis(angle, v) {
    var n = v.normalize();
    var ha = angle * 0.5;
    var s = -Math.sin(ha);
    this.x = s * n.x;
    this.y = s * n.y;
    this.z = s * n.z;
    this.w = Math.cos(ha);
    return this;
};
Quaternion.prototype.setWXYZ = function setWXYZ(w, x, y, z) {
    register.clear();
    this.w = w;
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
};
Quaternion.prototype.set = function set(v) {
    if (v instanceof Array) {
        this.w = 0;
        this.x = v[0];
        this.y = v[1];
        this.z = v[2];
    } else {
        this.w = v.w;
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
    }
    if (this !== register)
        register.clear();
    return this;
};
Quaternion.prototype.put = function put(q) {
    q.set(register);
};
Quaternion.prototype.clone = function clone() {
    return new Quaternion(this);
};
Quaternion.prototype.clear = function clear() {
    this.w = 1;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    return this;
};
Quaternion.prototype.isEqual = function isEqual(q) {
    return q.w === this.w && q.x === this.x && q.y === this.y && q.z === this.z;
};
Quaternion.prototype.dot = function dot(q) {
    return this.w * q.w + this.x * q.x + this.y * q.y + this.z * q.z;
};
Quaternion.prototype.normSquared = function normSquared() {
    return this.dot(this);
};
Quaternion.prototype.norm = function norm() {
    return Math.sqrt(this.normSquared());
};
Quaternion.prototype.isZero = function isZero() {
    return !(this.x || this.y || this.z);
};
Quaternion.prototype.getTransform = function getTransform() {
    var temp = this.normalize(1);
    var x = temp.x;
    var y = temp.y;
    var z = temp.z;
    var w = temp.w;
    return [
        1 - 2 * y * y - 2 * z * z,
        2 * x * y - 2 * z * w,
        2 * x * z + 2 * y * w,
        0,
        2 * x * y + 2 * z * w,
        1 - 2 * x * x - 2 * z * z,
        2 * y * z - 2 * x * w,
        0,
        2 * x * z - 2 * y * w,
        2 * y * z + 2 * x * w,
        1 - 2 * x * x - 2 * y * y,
        0,
        0,
        0,
        0,
        1
    ];
};
var matrixRegister = new Matrix();
Quaternion.prototype.getMatrix = function getMatrix() {
    var temp = this.normalize(1);
    var x = temp.x;
    var y = temp.y;
    var z = temp.z;
    var w = temp.w;
    return matrixRegister.set([
        [
            1 - 2 * y * y - 2 * z * z,
            2 * x * y + 2 * z * w,
            2 * x * z - 2 * y * w
        ],
        [
            2 * x * y - 2 * z * w,
            1 - 2 * x * x - 2 * z * z,
            2 * y * z + 2 * x * w
        ],
        [
            2 * x * z + 2 * y * w,
            2 * y * z - 2 * x * w,
            1 - 2 * x * x - 2 * y * y
        ]
    ]);
};
var epsilon = 0.00001;
Quaternion.prototype.slerp = function slerp(q, t) {
    var omega;
    var cosomega;
    var sinomega;
    var scaleFrom;
    var scaleTo;
    cosomega = this.dot(q);
    if (1 - cosomega > epsilon) {
        omega = Math.acos(cosomega);
        sinomega = Math.sin(omega);
        scaleFrom = Math.sin((1 - t) * omega) / sinomega;
        scaleTo = Math.sin(t * omega) / sinomega;
    } else {
        scaleFrom = 1 - t;
        scaleTo = t;
    }
    return register.set(this.scalarMultiply(scaleFrom / scaleTo).add(q).scalarMultiply(scaleTo));
};
module.exports = Quaternion;
},{"./Matrix":38}],40:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var RAND = Math.random;
function _randomFloat(min, max) {
    return min + RAND() * (max - min);
}
function _randomInteger(min, max) {
    return min + (RAND() * (max - min + 1) >> 0);
}
function _range(randomFunction, min, max, dim) {
    min = min !== undefined ? min : 0;
    max = max !== undefined ? max : 1;
    if (dim !== undefined) {
        var result = [];
        for (var i = 0; i < dim; i++)
            result.push(randomFunction(min, max));
        return result;
    } else
        return randomFunction(min, max);
}
var Random = {};
Random.integer = function integer(min, max, dim) {
    return _range(_randomInteger, min, max, dim);
};
Random.range = function range(min, max, dim) {
    return _range(_randomFloat, min, max, dim);
};
Random.sign = function sign(prob) {
    return Random.bool(prob) ? 1 : -1;
};
Random.bool = function bool(prob) {
    prob = prob !== undefined ? prob : 0.5;
    return RAND() < prob;
};
module.exports = Random;
},{}],41:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Utilities = {};
Utilities.clamp = function clamp(value, range) {
    return Math.max(Math.min(value, range[1]), range[0]);
};
Utilities.length = function length(array) {
    var distanceSquared = 0;
    for (var i = 0; i < array.length; i++) {
        distanceSquared += array[i] * array[i];
    }
    return Math.sqrt(distanceSquared);
};
module.exports = Utilities;
},{}],42:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function Vector(x, y, z) {
    if (arguments.length === 1 && x !== undefined)
        this.set(x);
    else {
        this.x = x || 0;
        this.y = y || 0;
        this.z = z || 0;
    }
    return this;
}
var _register = new Vector(0, 0, 0);
Vector.prototype.add = function add(v) {
    return _setXYZ.call(_register, this.x + v.x, this.y + v.y, this.z + v.z);
};
Vector.prototype.sub = function sub(v) {
    return _setXYZ.call(_register, this.x - v.x, this.y - v.y, this.z - v.z);
};
Vector.prototype.mult = function mult(r) {
    return _setXYZ.call(_register, r * this.x, r * this.y, r * this.z);
};
Vector.prototype.div = function div(r) {
    return this.mult(1 / r);
};
Vector.prototype.cross = function cross(v) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var vx = v.x;
    var vy = v.y;
    var vz = v.z;
    return _setXYZ.call(_register, z * vy - y * vz, x * vz - z * vx, y * vx - x * vy);
};
Vector.prototype.equals = function equals(v) {
    return v.x === this.x && v.y === this.y && v.z === this.z;
};
Vector.prototype.rotateX = function rotateX(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, x, y * cosTheta - z * sinTheta, y * sinTheta + z * cosTheta);
};
Vector.prototype.rotateY = function rotateY(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, z * sinTheta + x * cosTheta, y, z * cosTheta - x * sinTheta);
};
Vector.prototype.rotateZ = function rotateZ(theta) {
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var cosTheta = Math.cos(theta);
    var sinTheta = Math.sin(theta);
    return _setXYZ.call(_register, x * cosTheta - y * sinTheta, x * sinTheta + y * cosTheta, z);
};
Vector.prototype.dot = function dot(v) {
    return this.x * v.x + this.y * v.y + this.z * v.z;
};
Vector.prototype.normSquared = function normSquared() {
    return this.dot(this);
};
Vector.prototype.norm = function norm() {
    return Math.sqrt(this.normSquared());
};
Vector.prototype.normalize = function normalize(length) {
    if (arguments.length === 0)
        length = 1;
    var norm = this.norm();
    if (norm > 1e-7)
        return _setFromVector.call(_register, this.mult(length / norm));
    else
        return _setXYZ.call(_register, length, 0, 0);
};
Vector.prototype.clone = function clone() {
    return new Vector(this);
};
Vector.prototype.isZero = function isZero() {
    return !(this.x || this.y || this.z);
};
function _setXYZ(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
}
function _setFromArray(v) {
    return _setXYZ.call(this, v[0], v[1], v[2] || 0);
}
function _setFromVector(v) {
    return _setXYZ.call(this, v.x, v.y, v.z);
}
function _setFromNumber(x) {
    return _setXYZ.call(this, x, 0, 0);
}
Vector.prototype.set = function set(v) {
    if (v instanceof Array)
        return _setFromArray.call(this, v);
    if (typeof v === 'number')
        return _setFromNumber.call(this, v);
    return _setFromVector.call(this, v);
};
Vector.prototype.setXYZ = function (x, y, z) {
    return _setXYZ.apply(this, arguments);
};
Vector.prototype.set1D = function (x) {
    return _setFromNumber.call(this, x);
};
Vector.prototype.put = function put(v) {
    if (this === _register)
        _setFromVector.call(v, _register);
    else
        _setFromVector.call(v, this);
};
Vector.prototype.clear = function clear() {
    return _setXYZ.call(this, 0, 0, 0);
};
Vector.prototype.cap = function cap(cap) {
    if (cap === Infinity)
        return _setFromVector.call(_register, this);
    var norm = this.norm();
    if (norm > cap)
        return _setFromVector.call(_register, this.mult(cap / norm));
    else
        return _setFromVector.call(_register, this);
};
Vector.prototype.project = function project(n) {
    return n.mult(this.dot(n));
};
Vector.prototype.reflectAcross = function reflectAcross(n) {
    n.normalize().put(n);
    return _setFromVector(_register, this.sub(this.project(n).mult(2)));
};
Vector.prototype.get = function get() {
    return [
        this.x,
        this.y,
        this.z
    ];
};
Vector.prototype.get1D = function () {
    return this.x;
};
module.exports = Vector;
},{}],43:[function(require,module,exports){
module.exports = {
  Matrix: require('./Matrix'),
  Quaternion: require('./Quaternion'),
  Random: require('./Random'),
  Utilities: require('./Utilities'),
  Vector: require('./Vector')
};

},{"./Matrix":38,"./Quaternion":39,"./Random":40,"./Utilities":41,"./Vector":42}],44:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('../core/Transform');
var Transitionable = require('../transitions/Transitionable');
var EventHandler = require('../core/EventHandler');
var Utilities = require('../math/Utilities');
var GenericSync = require('../inputs/GenericSync');
var MouseSync = require('../inputs/MouseSync');
var TouchSync = require('../inputs/TouchSync');
GenericSync.register({
    'mouse': MouseSync,
    'touch': TouchSync
});
function Draggable(options) {
    this.options = Object.create(Draggable.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this._positionState = new Transitionable([
        0,
        0
    ]);
    this._differential = [
        0,
        0
    ];
    this._active = true;
    this.sync = new GenericSync([
        'mouse',
        'touch'
    ], { scale: this.options.scale });
    this.eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this.sync);
    EventHandler.setOutputHandler(this, this.eventOutput);
    _bindEvents.call(this);
}
var _direction = {
    x: 1,
    y: 2
};
Draggable.DIRECTION_X = _direction.x;
Draggable.DIRECTION_Y = _direction.y;
var _clamp = Utilities.clamp;
Draggable.DEFAULT_OPTIONS = {
    projection: _direction.x | _direction.y,
    scale: 1,
    xRange: null,
    yRange: null,
    snapX: 0,
    snapY: 0,
    transition: { duration: 0 }
};
function _mapDifferential(differential) {
    var opts = this.options;
    var projection = opts.projection;
    var snapX = opts.snapX;
    var snapY = opts.snapY;
    var tx = projection & _direction.x ? differential[0] : 0;
    var ty = projection & _direction.y ? differential[1] : 0;
    if (snapX > 0)
        tx -= tx % snapX;
    if (snapY > 0)
        ty -= ty % snapY;
    return [
        tx,
        ty
    ];
}
function _handleStart() {
    if (!this._active)
        return;
    if (this._positionState.isActive())
        this._positionState.halt();
    this.eventOutput.emit('start', { position: this.getPosition() });
}
function _handleMove(event) {
    if (!this._active)
        return;
    var options = this.options;
    this._differential = event.position;
    var newDifferential = _mapDifferential.call(this, this._differential);
    this._differential[0] -= newDifferential[0];
    this._differential[1] -= newDifferential[1];
    var pos = this.getPosition();
    pos[0] += newDifferential[0];
    pos[1] += newDifferential[1];
    if (options.xRange) {
        var xRange = [
            options.xRange[0] + 0.5 * options.snapX,
            options.xRange[1] - 0.5 * options.snapX
        ];
        pos[0] = _clamp(pos[0], xRange);
    }
    if (options.yRange) {
        var yRange = [
            options.yRange[0] + 0.5 * options.snapY,
            options.yRange[1] - 0.5 * options.snapY
        ];
        pos[1] = _clamp(pos[1], yRange);
    }
    this.eventOutput.emit('update', { position: pos });
}
function _handleEnd() {
    if (!this._active)
        return;
    this.eventOutput.emit('end', { position: this.getPosition() });
}
function _bindEvents() {
    this.sync.on('start', _handleStart.bind(this));
    this.sync.on('update', _handleMove.bind(this));
    this.sync.on('end', _handleEnd.bind(this));
}
Draggable.prototype.setOptions = function setOptions(options) {
    var currentOptions = this.options;
    if (options.projection !== undefined) {
        var proj = options.projection;
        this.options.projection = 0;
        [
            'x',
            'y'
        ].forEach(function (val) {
            if (proj.indexOf(val) !== -1)
                currentOptions.projection |= _direction[val];
        });
    }
    if (options.scale !== undefined) {
        currentOptions.scale = options.scale;
        this.sync.setOptions({ scale: options.scale });
    }
    if (options.xRange !== undefined)
        currentOptions.xRange = options.xRange;
    if (options.yRange !== undefined)
        currentOptions.yRange = options.yRange;
    if (options.snapX !== undefined)
        currentOptions.snapX = options.snapX;
    if (options.snapY !== undefined)
        currentOptions.snapY = options.snapY;
};
Draggable.prototype.getPosition = function getPosition() {
    return this._positionState.get();
};
Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {
    var currPos = this.getPosition();
    var relativePosition = [
        currPos[0] + position[0],
        currPos[1] + position[1]
    ];
    this.setPosition(relativePosition, transition, callback);
};
Draggable.prototype.setPosition = function setPosition(position, transition, callback) {
    if (this._positionState.isActive())
        this._positionState.halt();
    this._positionState.set(position, transition, callback);
};
Draggable.prototype.activate = function activate() {
    this._active = true;
};
Draggable.prototype.deactivate = function deactivate() {
    this._active = false;
};
Draggable.prototype.toggle = function toggle() {
    this._active = !this._active;
};
Draggable.prototype.modify = function modify(target) {
    var pos = this.getPosition();
    return {
        transform: Transform.translate(pos[0], pos[1]),
        target: target
    };
};
module.exports = Draggable;
},{"../core/EventHandler":8,"../core/Transform":16,"../inputs/GenericSync":28,"../inputs/MouseSync":29,"../inputs/TouchSync":34,"../math/Utilities":41,"../transitions/Transitionable":89}],45:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transitionable = require('../transitions/Transitionable');
var OptionsManager = require('../core/OptionsManager');
function Fader(options, startState) {
    this.options = Object.create(Fader.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    if (!startState)
        startState = 0;
    this.transitionHelper = new Transitionable(startState);
}
Fader.DEFAULT_OPTIONS = {
    cull: false,
    transition: true,
    pulseInTransition: true,
    pulseOutTransition: true
};
Fader.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
Fader.prototype.show = function show(transition, callback) {
    transition = transition || this.options.transition;
    this.set(1, transition, callback);
};
Fader.prototype.hide = function hide(transition, callback) {
    transition = transition || this.options.transition;
    this.set(0, transition, callback);
};
Fader.prototype.set = function set(state, transition, callback) {
    this.halt();
    this.transitionHelper.set(state, transition, callback);
};
Fader.prototype.halt = function halt() {
    this.transitionHelper.halt();
};
Fader.prototype.isVisible = function isVisible() {
    return this.transitionHelper.get() > 0;
};
Fader.prototype.modify = function modify(target) {
    var currOpacity = this.transitionHelper.get();
    if (this.options.cull && !currOpacity)
        return undefined;
    else
        return {
            opacity: currOpacity,
            target: target
        };
};
module.exports = Fader;
},{"../core/OptionsManager":11,"../transitions/Transitionable":89}],46:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function ModifierChain() {
    this._chain = [];
    if (arguments.length)
        this.addModifier.apply(this, arguments);
}
ModifierChain.prototype.addModifier = function addModifier(varargs) {
    Array.prototype.push.apply(this._chain, arguments);
};
ModifierChain.prototype.removeModifier = function removeModifier(modifier) {
    var index = this._chain.indexOf(modifier);
    if (index < 0)
        return;
    this._chain.splice(index, 1);
};
ModifierChain.prototype.modify = function modify(input) {
    var chain = this._chain;
    var result = input;
    for (var i = 0; i < chain.length; i++) {
        result = chain[i].modify(result);
    }
    return result;
};
module.exports = ModifierChain;
},{}],47:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Modifier = require('../core/Modifier');
var Transform = require('../core/Transform');
var Transitionable = require('../transitions/Transitionable');
var TransitionableTransform = require('../transitions/TransitionableTransform');
function StateModifier(options) {
    this._transformState = new TransitionableTransform(Transform.identity);
    this._opacityState = new Transitionable(1);
    this._originState = new Transitionable([
        0,
        0
    ]);
    this._alignState = new Transitionable([
        0,
        0
    ]);
    this._sizeState = new Transitionable([
        0,
        0
    ]);
    this._proportionsState = new Transitionable([
        0,
        0
    ]);
    this._modifier = new Modifier({
        transform: this._transformState,
        opacity: this._opacityState,
        origin: null,
        align: null,
        size: null,
        proportions: null
    });
    this._hasOrigin = false;
    this._hasAlign = false;
    this._hasSize = false;
    this._hasProportions = false;
    if (options) {
        if (options.transform)
            this.setTransform(options.transform);
        if (options.opacity !== undefined)
            this.setOpacity(options.opacity);
        if (options.origin)
            this.setOrigin(options.origin);
        if (options.align)
            this.setAlign(options.align);
        if (options.size)
            this.setSize(options.size);
        if (options.proportions)
            this.setProportions(options.proportions);
    }
}
StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {
    this._transformState.set(transform, transition, callback);
    return this;
};
StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
    this._opacityState.set(opacity, transition, callback);
    return this;
};
StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
    if (origin === null) {
        if (this._hasOrigin) {
            this._modifier.originFrom(null);
            this._hasOrigin = false;
        }
        return this;
    } else if (!this._hasOrigin) {
        this._hasOrigin = true;
        this._modifier.originFrom(this._originState);
    }
    this._originState.set(origin, transition, callback);
    return this;
};
StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {
    if (align === null) {
        if (this._hasAlign) {
            this._modifier.alignFrom(null);
            this._hasAlign = false;
        }
        return this;
    } else if (!this._hasAlign) {
        this._hasAlign = true;
        this._modifier.alignFrom(this._alignState);
    }
    this._alignState.set(align, transition, callback);
    return this;
};
StateModifier.prototype.setSize = function setSize(size, transition, callback) {
    if (size === null) {
        if (this._hasSize) {
            this._modifier.sizeFrom(null);
            this._hasSize = false;
        }
        return this;
    } else if (!this._hasSize) {
        this._hasSize = true;
        this._modifier.sizeFrom(this._sizeState);
    }
    this._sizeState.set(size, transition, callback);
    return this;
};
StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {
    if (proportions === null) {
        if (this._hasProportions) {
            this._modifier.proportionsFrom(null);
            this._hasProportions = false;
        }
        return this;
    } else if (!this._hasProportions) {
        this._hasProportions = true;
        this._modifier.proportionsFrom(this._proportionsState);
    }
    this._proportionsState.set(proportions, transition, callback);
    return this;
};
StateModifier.prototype.halt = function halt() {
    this._transformState.halt();
    this._opacityState.halt();
    this._originState.halt();
    this._alignState.halt();
    this._sizeState.halt();
    this._proportionsState.halt();
};
StateModifier.prototype.getTransform = function getTransform() {
    return this._transformState.get();
};
StateModifier.prototype.getFinalTransform = function getFinalTransform() {
    return this._transformState.getFinal();
};
StateModifier.prototype.getOpacity = function getOpacity() {
    return this._opacityState.get();
};
StateModifier.prototype.getOrigin = function getOrigin() {
    return this._hasOrigin ? this._originState.get() : null;
};
StateModifier.prototype.getAlign = function getAlign() {
    return this._hasAlign ? this._alignState.get() : null;
};
StateModifier.prototype.getSize = function getSize() {
    return this._hasSize ? this._sizeState.get() : null;
};
StateModifier.prototype.getProportions = function getProportions() {
    return this._hasProportions ? this._proportionsState.get() : null;
};
StateModifier.prototype.modify = function modify(target) {
    return this._modifier.modify(target);
};
module.exports = StateModifier;
},{"../core/Modifier":10,"../core/Transform":16,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90}],48:[function(require,module,exports){
module.exports = {
  Draggable: require('./Draggable'),
  Fader: require('./Fader'),
  ModifierChain: require('./ModifierChain'),
  StateModifier: require('./StateModifier')
};

},{"./Draggable":44,"./Fader":45,"./ModifierChain":46,"./StateModifier":47}],49:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../core/EventHandler');
function PhysicsEngine(options) {
    this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this._particles = [];
    this._bodies = [];
    this._agentData = {};
    this._forces = [];
    this._constraints = [];
    this._buffer = 0;
    this._prevTime = now();
    this._isSleeping = false;
    this._eventHandler = null;
    this._currAgentId = 0;
    this._hasBodies = false;
    this._eventHandler = null;
}
var TIMESTEP = 17;
var MIN_TIME_STEP = 1000 / 120;
var MAX_TIME_STEP = 17;
var now = Date.now;
var _events = {
    start: 'start',
    update: 'update',
    end: 'end'
};
PhysicsEngine.DEFAULT_OPTIONS = {
    constraintSteps: 1,
    sleepTolerance: 1e-7,
    velocityCap: undefined,
    angularVelocityCap: undefined
};
PhysicsEngine.prototype.setOptions = function setOptions(opts) {
    for (var key in opts)
        if (this.options[key])
            this.options[key] = opts[key];
};
PhysicsEngine.prototype.addBody = function addBody(body) {
    body._engine = this;
    if (body.isBody) {
        this._bodies.push(body);
        this._hasBodies = true;
    } else
        this._particles.push(body);
    body.on('start', this.wake.bind(this));
    return body;
};
PhysicsEngine.prototype.removeBody = function removeBody(body) {
    var array = body.isBody ? this._bodies : this._particles;
    var index = array.indexOf(body);
    if (index > -1) {
        for (var agentKey in this._agentData) {
            if (this._agentData.hasOwnProperty(agentKey)) {
                this.detachFrom(this._agentData[agentKey].id, body);
            }
        }
        array.splice(index, 1);
    }
    if (this.getBodies().length === 0)
        this._hasBodies = false;
};
function _mapAgentArray(agent) {
    if (agent.applyForce)
        return this._forces;
    if (agent.applyConstraint)
        return this._constraints;
}
function _attachOne(agent, targets, source) {
    if (targets === undefined)
        targets = this.getParticlesAndBodies();
    if (!(targets instanceof Array))
        targets = [targets];
    agent.on('change', this.wake.bind(this));
    this._agentData[this._currAgentId] = {
        agent: agent,
        id: this._currAgentId,
        targets: targets,
        source: source
    };
    _mapAgentArray.call(this, agent).push(this._currAgentId);
    return this._currAgentId++;
}
PhysicsEngine.prototype.attach = function attach(agents, targets, source) {
    this.wake();
    if (agents instanceof Array) {
        var agentIDs = [];
        for (var i = 0; i < agents.length; i++)
            agentIDs[i] = _attachOne.call(this, agents[i], targets, source);
        return agentIDs;
    } else
        return _attachOne.call(this, agents, targets, source);
};
PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {
    _getAgentData.call(this, agentID).targets.push(target);
};
PhysicsEngine.prototype.detach = function detach(id) {
    var agent = this.getAgent(id);
    var agentArray = _mapAgentArray.call(this, agent);
    var index = agentArray.indexOf(id);
    agentArray.splice(index, 1);
    delete this._agentData[id];
};
PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {
    var boundAgent = _getAgentData.call(this, id);
    if (boundAgent.source === target)
        this.detach(id);
    else {
        var targets = boundAgent.targets;
        var index = targets.indexOf(target);
        if (index > -1)
            targets.splice(index, 1);
    }
};
PhysicsEngine.prototype.detachAll = function detachAll() {
    this._agentData = {};
    this._forces = [];
    this._constraints = [];
    this._currAgentId = 0;
};
function _getAgentData(id) {
    return this._agentData[id];
}
PhysicsEngine.prototype.getAgent = function getAgent(id) {
    return _getAgentData.call(this, id).agent;
};
PhysicsEngine.prototype.getParticles = function getParticles() {
    return this._particles;
};
PhysicsEngine.prototype.getBodies = function getBodies() {
    return this._bodies;
};
PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {
    return this.getParticles().concat(this.getBodies());
};
PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {
    var particles = this.getParticles();
    for (var index = 0, len = particles.length; index < len; index++)
        fn.call(this, particles[index], dt);
};
PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {
    if (!this._hasBodies)
        return;
    var bodies = this.getBodies();
    for (var index = 0, len = bodies.length; index < len; index++)
        fn.call(this, bodies[index], dt);
};
PhysicsEngine.prototype.forEach = function forEach(fn, dt) {
    this.forEachParticle(fn, dt);
    this.forEachBody(fn, dt);
};
function _updateForce(index) {
    var boundAgent = _getAgentData.call(this, this._forces[index]);
    boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);
}
function _updateForces() {
    for (var index = this._forces.length - 1; index > -1; index--)
        _updateForce.call(this, index);
}
function _updateConstraint(index, dt) {
    var boundAgent = this._agentData[this._constraints[index]];
    return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);
}
function _updateConstraints(dt) {
    var iteration = 0;
    while (iteration < this.options.constraintSteps) {
        for (var index = this._constraints.length - 1; index > -1; index--)
            _updateConstraint.call(this, index, dt);
        iteration++;
    }
}
function _updateVelocities(body, dt) {
    body.integrateVelocity(dt);
    if (this.options.velocityCap)
        body.velocity.cap(this.options.velocityCap).put(body.velocity);
}
function _updateAngularVelocities(body, dt) {
    body.integrateAngularMomentum(dt);
    body.updateAngularVelocity();
    if (this.options.angularVelocityCap)
        body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);
}
function _updateOrientations(body, dt) {
    body.integrateOrientation(dt);
}
function _updatePositions(body, dt) {
    body.integratePosition(dt);
    body.emit(_events.update, body);
}
function _integrate(dt) {
    _updateForces.call(this, dt);
    this.forEach(_updateVelocities, dt);
    this.forEachBody(_updateAngularVelocities, dt);
    _updateConstraints.call(this, dt);
    this.forEachBody(_updateOrientations, dt);
    this.forEach(_updatePositions, dt);
}
function _getParticlesEnergy() {
    var energy = 0;
    var particleEnergy = 0;
    this.forEach(function (particle) {
        particleEnergy = particle.getEnergy();
        energy += particleEnergy;
    });
    return energy;
}
function _getAgentsEnergy() {
    var energy = 0;
    for (var id in this._agentData)
        energy += this.getAgentEnergy(id);
    return energy;
}
PhysicsEngine.prototype.getAgentEnergy = function (agentId) {
    var agentData = _getAgentData.call(this, agentId);
    return agentData.agent.getEnergy(agentData.targets, agentData.source);
};
PhysicsEngine.prototype.getEnergy = function getEnergy() {
    return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);
};
PhysicsEngine.prototype.step = function step() {
    if (this.isSleeping())
        return;
    var currTime = now();
    var dtFrame = currTime - this._prevTime;
    this._prevTime = currTime;
    if (dtFrame < MIN_TIME_STEP)
        return;
    if (dtFrame > MAX_TIME_STEP)
        dtFrame = MAX_TIME_STEP;
    _integrate.call(this, TIMESTEP);
    this.emit(_events.update, this);
    if (this.getEnergy() < this.options.sleepTolerance)
        this.sleep();
};
PhysicsEngine.prototype.isSleeping = function isSleeping() {
    return this._isSleeping;
};
PhysicsEngine.prototype.isActive = function isSleeping() {
    return !this._isSleeping;
};
PhysicsEngine.prototype.sleep = function sleep() {
    if (this._isSleeping)
        return;
    this.forEach(function (body) {
        body.sleep();
    });
    this.emit(_events.end, this);
    this._isSleeping = true;
};
PhysicsEngine.prototype.wake = function wake() {
    if (!this._isSleeping)
        return;
    this._prevTime = now();
    this.emit(_events.start, this);
    this._isSleeping = false;
};
PhysicsEngine.prototype.emit = function emit(type, data) {
    if (this._eventHandler === null)
        return;
    this._eventHandler.emit(type, data);
};
PhysicsEngine.prototype.on = function on(event, fn) {
    if (this._eventHandler === null)
        this._eventHandler = new EventHandler();
    this._eventHandler.on(event, fn);
};
module.exports = PhysicsEngine;
},{"../core/EventHandler":8}],50:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Particle = require('./Particle');
var Transform = require('../../core/Transform');
var Vector = require('../../math/Vector');
var Quaternion = require('../../math/Quaternion');
var Matrix = require('../../math/Matrix');
var Integrator = require('../integrators/SymplecticEuler');
function Body(options) {
    Particle.call(this, options);
    options = options || {};
    this.orientation = new Quaternion();
    this.angularVelocity = new Vector();
    this.angularMomentum = new Vector();
    this.torque = new Vector();
    if (options.orientation)
        this.orientation.set(options.orientation);
    if (options.angularVelocity)
        this.angularVelocity.set(options.angularVelocity);
    if (options.angularMomentum)
        this.angularMomentum.set(options.angularMomentum);
    if (options.torque)
        this.torque.set(options.torque);
    this.angularVelocity.w = 0;
    this.setMomentsOfInertia();
    this.pWorld = new Vector();
}
Body.DEFAULT_OPTIONS = Particle.DEFAULT_OPTIONS;
Body.DEFAULT_OPTIONS.orientation = [
    0,
    0,
    0,
    1
];
Body.DEFAULT_OPTIONS.angularVelocity = [
    0,
    0,
    0
];
Body.prototype = Object.create(Particle.prototype);
Body.prototype.constructor = Body;
Body.prototype.isBody = true;
Body.prototype.setMass = function setMass() {
    Particle.prototype.setMass.apply(this, arguments);
    this.setMomentsOfInertia();
};
Body.prototype.setMomentsOfInertia = function setMomentsOfInertia() {
    this.inertia = new Matrix();
    this.inverseInertia = new Matrix();
};
Body.prototype.updateAngularVelocity = function updateAngularVelocity() {
    this.angularVelocity.set(this.inverseInertia.vectorMultiply(this.angularMomentum));
};
Body.prototype.toWorldCoordinates = function toWorldCoordinates(localPosition) {
    return this.pWorld.set(this.orientation.rotateVector(localPosition));
};
Body.prototype.getEnergy = function getEnergy() {
    return Particle.prototype.getEnergy.call(this) + 0.5 * this.inertia.vectorMultiply(this.angularVelocity).dot(this.angularVelocity);
};
Body.prototype.reset = function reset(p, v, q, L) {
    Particle.prototype.reset.call(this, p, v);
    this.angularVelocity.clear();
    this.setOrientation(q || [
        1,
        0,
        0,
        0
    ]);
    this.setAngularMomentum(L || [
        0,
        0,
        0
    ]);
};
Body.prototype.setOrientation = function setOrientation(q) {
    this.orientation.set(q);
};
Body.prototype.setAngularVelocity = function setAngularVelocity(w) {
    this.wake();
    this.angularVelocity.set(w);
};
Body.prototype.setAngularMomentum = function setAngularMomentum(L) {
    this.wake();
    this.angularMomentum.set(L);
};
Body.prototype.applyForce = function applyForce(force, location) {
    Particle.prototype.applyForce.call(this, force);
    if (location !== undefined)
        this.applyTorque(location.cross(force));
};
Body.prototype.applyTorque = function applyTorque(torque) {
    this.wake();
    this.torque.set(this.torque.add(torque));
};
Body.prototype.getTransform = function getTransform() {
    return Transform.thenMove(this.orientation.getTransform(), Transform.getTranslate(Particle.prototype.getTransform.call(this)));
};
Body.prototype._integrate = function _integrate(dt) {
    Particle.prototype._integrate.call(this, dt);
    this.integrateAngularMomentum(dt);
    this.updateAngularVelocity(dt);
    this.integrateOrientation(dt);
};
Body.prototype.integrateAngularMomentum = function integrateAngularMomentum(dt) {
    Integrator.integrateAngularMomentum(this, dt);
};
Body.prototype.integrateOrientation = function integrateOrientation(dt) {
    Integrator.integrateOrientation(this, dt);
};
module.exports = Body;
},{"../../core/Transform":16,"../../math/Matrix":38,"../../math/Quaternion":39,"../../math/Vector":42,"../integrators/SymplecticEuler":73,"./Particle":52}],51:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Body = require('./Body');
var Matrix = require('../../math/Matrix');
function Circle(options) {
    options = options || {};
    this.setRadius(options.radius || 0);
    Body.call(this, options);
}
Circle.prototype = Object.create(Body.prototype);
Circle.prototype.constructor = Circle;
Circle.prototype.setRadius = function setRadius(r) {
    this.radius = r;
    this.size = [
        2 * this.radius,
        2 * this.radius
    ];
    this.setMomentsOfInertia();
};
Circle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {
    var m = this.mass;
    var r = this.radius;
    this.inertia = new Matrix([
        [
            0.25 * m * r * r,
            0,
            0
        ],
        [
            0,
            0.25 * m * r * r,
            0
        ],
        [
            0,
            0,
            0.5 * m * r * r
        ]
    ]);
    this.inverseInertia = new Matrix([
        [
            4 / (m * r * r),
            0,
            0
        ],
        [
            0,
            4 / (m * r * r),
            0
        ],
        [
            0,
            0,
            2 / (m * r * r)
        ]
    ]);
};
module.exports = Circle;
},{"../../math/Matrix":38,"./Body":50}],52:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Vector = require('../../math/Vector');
var Transform = require('../../core/Transform');
var EventHandler = require('../../core/EventHandler');
var Integrator = require('../integrators/SymplecticEuler');
function Particle(options) {
    options = options || {};
    var defaults = Particle.DEFAULT_OPTIONS;
    this.position = new Vector();
    this.velocity = new Vector();
    this.force = new Vector();
    this._engine = null;
    this._isSleeping = true;
    this._eventOutput = null;
    this.mass = options.mass !== undefined ? options.mass : defaults.mass;
    this.inverseMass = 1 / this.mass;
    this.setPosition(options.position || defaults.position);
    this.setVelocity(options.velocity || defaults.velocity);
    this.force.set(options.force || [
        0,
        0,
        0
    ]);
    this.transform = Transform.identity.slice();
    this._spec = {
        size: [
            true,
            true
        ],
        target: {
            transform: this.transform,
            origin: [
                0.5,
                0.5
            ],
            target: null
        }
    };
}
Particle.DEFAULT_OPTIONS = {
    position: [
        0,
        0,
        0
    ],
    velocity: [
        0,
        0,
        0
    ],
    mass: 1
};
var _events = {
    start: 'start',
    update: 'update',
    end: 'end'
};
var now = Date.now;
Particle.prototype.isBody = false;
Particle.prototype.isActive = function isActive() {
    return !this._isSleeping;
};
Particle.prototype.sleep = function sleep() {
    if (this._isSleeping)
        return;
    this.emit(_events.end, this);
    this._isSleeping = true;
};
Particle.prototype.wake = function wake() {
    if (!this._isSleeping)
        return;
    this.emit(_events.start, this);
    this._isSleeping = false;
    this._prevTime = now();
    if (this._engine)
        this._engine.wake();
};
Particle.prototype.setPosition = function setPosition(position) {
    this.position.set(position);
};
Particle.prototype.setPosition1D = function setPosition1D(x) {
    this.position.x = x;
};
Particle.prototype.getPosition = function getPosition() {
    this._engine.step();
    return this.position.get();
};
Particle.prototype.getPosition1D = function getPosition1D() {
    this._engine.step();
    return this.position.x;
};
Particle.prototype.setVelocity = function setVelocity(velocity) {
    this.velocity.set(velocity);
    if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0))
        this.wake();
};
Particle.prototype.setVelocity1D = function setVelocity1D(x) {
    this.velocity.x = x;
    if (x !== 0)
        this.wake();
};
Particle.prototype.getVelocity = function getVelocity() {
    return this.velocity.get();
};
Particle.prototype.setForce = function setForce(force) {
    this.force.set(force);
    this.wake();
};
Particle.prototype.getVelocity1D = function getVelocity1D() {
    return this.velocity.x;
};
Particle.prototype.setMass = function setMass(mass) {
    this.mass = mass;
    this.inverseMass = 1 / mass;
};
Particle.prototype.getMass = function getMass() {
    return this.mass;
};
Particle.prototype.reset = function reset(position, velocity) {
    this.setPosition(position || [
        0,
        0,
        0
    ]);
    this.setVelocity(velocity || [
        0,
        0,
        0
    ]);
};
Particle.prototype.applyForce = function applyForce(force) {
    if (force.isZero())
        return;
    this.force.add(force).put(this.force);
    this.wake();
};
Particle.prototype.applyImpulse = function applyImpulse(impulse) {
    if (impulse.isZero())
        return;
    var velocity = this.velocity;
    velocity.add(impulse.mult(this.inverseMass)).put(velocity);
};
Particle.prototype.integrateVelocity = function integrateVelocity(dt) {
    Integrator.integrateVelocity(this, dt);
};
Particle.prototype.integratePosition = function integratePosition(dt) {
    Integrator.integratePosition(this, dt);
};
Particle.prototype._integrate = function _integrate(dt) {
    this.integrateVelocity(dt);
    this.integratePosition(dt);
};
Particle.prototype.getEnergy = function getEnergy() {
    return 0.5 * this.mass * this.velocity.normSquared();
};
Particle.prototype.getTransform = function getTransform() {
    this._engine.step();
    var position = this.position;
    var transform = this.transform;
    transform[12] = position.x;
    transform[13] = position.y;
    transform[14] = position.z;
    return transform;
};
Particle.prototype.modify = function modify(target) {
    var _spec = this._spec.target;
    _spec.transform = this.getTransform();
    _spec.target = target;
    return this._spec;
};
function _createEventOutput() {
    this._eventOutput = new EventHandler();
    this._eventOutput.bindThis(this);
    EventHandler.setOutputHandler(this, this._eventOutput);
}
Particle.prototype.emit = function emit(type, data) {
    if (!this._eventOutput)
        return;
    this._eventOutput.emit(type, data);
};
Particle.prototype.on = function on() {
    _createEventOutput.call(this);
    return this.on.apply(this, arguments);
};
Particle.prototype.removeListener = function removeListener() {
    _createEventOutput.call(this);
    return this.removeListener.apply(this, arguments);
};
Particle.prototype.pipe = function pipe() {
    _createEventOutput.call(this);
    return this.pipe.apply(this, arguments);
};
Particle.prototype.unpipe = function unpipe() {
    _createEventOutput.call(this);
    return this.unpipe.apply(this, arguments);
};
module.exports = Particle;
},{"../../core/EventHandler":8,"../../core/Transform":16,"../../math/Vector":42,"../integrators/SymplecticEuler":73}],53:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Body = require('./Body');
var Matrix = require('../../math/Matrix');
function Rectangle(options) {
    options = options || {};
    this.size = options.size || [
        0,
        0
    ];
    Body.call(this, options);
}
Rectangle.prototype = Object.create(Body.prototype);
Rectangle.prototype.constructor = Rectangle;
Rectangle.prototype.setSize = function setSize(size) {
    this.size = size;
    this.setMomentsOfInertia();
};
Rectangle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {
    var m = this.mass;
    var w = this.size[0];
    var h = this.size[1];
    this.inertia = new Matrix([
        [
            m * h * h / 12,
            0,
            0
        ],
        [
            0,
            m * w * w / 12,
            0
        ],
        [
            0,
            0,
            m * (w * w + h * h) / 12
        ]
    ]);
    this.inverseInertia = new Matrix([
        [
            12 / (m * h * h),
            0,
            0
        ],
        [
            0,
            12 / (m * w * w),
            0
        ],
        [
            0,
            0,
            12 / (m * (w * w + h * h))
        ]
    ]);
};
module.exports = Rectangle;
},{"../../math/Matrix":38,"./Body":50}],54:[function(require,module,exports){
module.exports = {
  Body: require('./Body'),
  Circle: require('./Circle'),
  Particle: require('./Particle'),
  Rectangle: require('./Rectangle')
};

},{"./Body":50,"./Circle":51,"./Particle":52,"./Rectangle":53}],55:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Collision(options) {
    this.options = Object.create(Collision.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.normal = new Vector();
    this.pDiff = new Vector();
    this.vDiff = new Vector();
    this.impulse1 = new Vector();
    this.impulse2 = new Vector();
    Constraint.call(this);
}
Collision.prototype = Object.create(Constraint.prototype);
Collision.prototype.constructor = Collision;
Collision.DEFAULT_OPTIONS = {
    restitution: 0.5,
    drift: 0.5,
    slop: 0
};
function _normalVelocity(particle1, particle2) {
    return particle1.velocity.dot(particle2.velocity);
}
Collision.prototype.setOptions = function setOptions(options) {
    for (var key in options)
        this.options[key] = options[key];
};
Collision.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    if (source === undefined)
        return;
    var v1 = source.velocity;
    var p1 = source.position;
    var w1 = source.inverseMass;
    var r1 = source.radius;
    var options = this.options;
    var drift = options.drift;
    var slop = -options.slop;
    var restitution = options.restitution;
    var n = this.normal;
    var pDiff = this.pDiff;
    var vDiff = this.vDiff;
    var impulse1 = this.impulse1;
    var impulse2 = this.impulse2;
    for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        if (target === source)
            continue;
        var v2 = target.velocity;
        var p2 = target.position;
        var w2 = target.inverseMass;
        var r2 = target.radius;
        pDiff.set(p2.sub(p1));
        vDiff.set(v2.sub(v1));
        var dist = pDiff.norm();
        var overlap = dist - (r1 + r2);
        var effMass = 1 / (w1 + w2);
        var gamma = 0;
        if (overlap < 0) {
            n.set(pDiff.normalize());
            if (this._eventOutput) {
                var collisionData = {
                    target: target,
                    source: source,
                    overlap: overlap,
                    normal: n
                };
                this._eventOutput.emit('preCollision', collisionData);
                this._eventOutput.emit('collision', collisionData);
            }
            var lambda = overlap <= slop ? ((1 + restitution) * n.dot(vDiff) + drift / dt * (overlap - slop)) / (gamma + dt / effMass) : (1 + restitution) * n.dot(vDiff) / (gamma + dt / effMass);
            n.mult(dt * lambda).put(impulse1);
            impulse1.mult(-1).put(impulse2);
            source.applyImpulse(impulse1);
            target.applyImpulse(impulse2);
            if (this._eventOutput)
                this._eventOutput.emit('postCollision', collisionData);
        }
    }
};
module.exports = Collision;
},{"../../math/Vector":42,"./Constraint":56}],56:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var EventHandler = require('../../core/EventHandler');
function Constraint() {
    this.options = this.options || {};
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
}
Constraint.prototype.setOptions = function setOptions(options) {
    this._eventOutput.emit('change', options);
};
Constraint.prototype.applyConstraint = function applyConstraint() {
};
Constraint.prototype.getEnergy = function getEnergy() {
    return 0;
};
module.exports = Constraint;
},{"../../core/EventHandler":8}],57:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Curve(options) {
    this.options = Object.create(Curve.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.J = new Vector();
    this.impulse = new Vector();
    Constraint.call(this);
}
Curve.prototype = Object.create(Constraint.prototype);
Curve.prototype.constructor = Curve;
var epsilon = 1e-7;
var pi = Math.PI;
Curve.DEFAULT_OPTIONS = {
    equation: function (x, y, z) {
        return 0;
    },
    plane: function (x, y, z) {
        return z;
    },
    period: 0,
    dampingRatio: 0
};
Curve.prototype.setOptions = function setOptions(options) {
    for (var key in options)
        this.options[key] = options[key];
};
Curve.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    var options = this.options;
    var impulse = this.impulse;
    var J = this.J;
    var f = options.equation;
    var g = options.plane;
    var dampingRatio = options.dampingRatio;
    var period = options.period;
    for (var i = 0; i < targets.length; i++) {
        var body = targets[i];
        var v = body.velocity;
        var p = body.position;
        var m = body.mass;
        var gamma;
        var beta;
        if (period === 0) {
            gamma = 0;
            beta = 1;
        } else {
            var c = 4 * m * pi * dampingRatio / period;
            var k = 4 * m * pi * pi / (period * period);
            gamma = 1 / (c + dt * k);
            beta = dt * k / (c + dt * k);
        }
        var x = p.x;
        var y = p.y;
        var z = p.z;
        var f0 = f(x, y, z);
        var dfx = (f(x + epsilon, y, z) - f0) / epsilon;
        var dfy = (f(x, y + epsilon, z) - f0) / epsilon;
        var dfz = (f(x, y, z + epsilon) - f0) / epsilon;
        var g0 = g(x, y, z);
        var dgx = (g(x + epsilon, y, z) - g0) / epsilon;
        var dgy = (g(x, y + epsilon, z) - g0) / epsilon;
        var dgz = (g(x, y, z + epsilon) - g0) / epsilon;
        J.setXYZ(dfx + dgx, dfy + dgy, dfz + dgz);
        var antiDrift = beta / dt * (f0 + g0);
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);
        impulse.set(J.mult(dt * lambda));
        body.applyImpulse(impulse);
    }
};
module.exports = Curve;
},{"../../math/Vector":42,"./Constraint":56}],58:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Distance(options) {
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.impulse = new Vector();
    this.normal = new Vector();
    this.diffP = new Vector();
    this.diffV = new Vector();
    Constraint.call(this);
}
Distance.prototype = Object.create(Constraint.prototype);
Distance.prototype.constructor = Distance;
Distance.DEFAULT_OPTIONS = {
    anchor: null,
    length: 0,
    minLength: 0,
    period: 0,
    dampingRatio: 0
};
var pi = Math.PI;
Distance.prototype.setOptions = function setOptions(options) {
    if (options.anchor) {
        if (options.anchor.position instanceof Vector)
            this.options.anchor = options.anchor.position;
        if (options.anchor instanceof Vector)
            this.options.anchor = options.anchor;
        if (options.anchor instanceof Array)
            this.options.anchor = new Vector(options.anchor);
    }
    if (options.length !== undefined)
        this.options.length = options.length;
    if (options.dampingRatio !== undefined)
        this.options.dampingRatio = options.dampingRatio;
    if (options.period !== undefined)
        this.options.period = options.period;
    if (options.minLength !== undefined)
        this.options.minLength = options.minLength;
};
function _calcError(impulse, body) {
    return body.mass * impulse.norm();
}
Distance.prototype.setAnchor = function setAnchor(anchor) {
    if (!this.options.anchor)
        this.options.anchor = new Vector();
    this.options.anchor.set(anchor);
};
Distance.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    var n = this.normal;
    var diffP = this.diffP;
    var diffV = this.diffV;
    var impulse = this.impulse;
    var options = this.options;
    var dampingRatio = options.dampingRatio;
    var period = options.period;
    var minLength = options.minLength;
    var p2;
    var w2;
    if (source) {
        var v2 = source.velocity;
        p2 = source.position;
        w2 = source.inverseMass;
    } else {
        p2 = this.options.anchor;
        w2 = 0;
    }
    var length = this.options.length;
    for (var i = 0; i < targets.length; i++) {
        var body = targets[i];
        var v1 = body.velocity;
        var p1 = body.position;
        var w1 = body.inverseMass;
        diffP.set(p1.sub(p2));
        n.set(diffP.normalize());
        var dist = diffP.norm() - length;
        if (Math.abs(dist) < minLength)
            return;
        if (source)
            diffV.set(v1.sub(v2));
        else
            diffV.set(v1);
        var effMass = 1 / (w1 + w2);
        var gamma;
        var beta;
        if (period === 0) {
            gamma = 0;
            beta = 1;
        } else {
            var c = 4 * effMass * pi * dampingRatio / period;
            var k = 4 * effMass * pi * pi / (period * period);
            gamma = 1 / (c + dt * k);
            beta = dt * k / (c + dt * k);
        }
        var antiDrift = beta / dt * dist;
        var lambda = -(n.dot(diffV) + antiDrift) / (gamma + dt / effMass);
        impulse.set(n.mult(dt * lambda));
        body.applyImpulse(impulse);
        if (source)
            source.applyImpulse(impulse.mult(-1));
    }
};
module.exports = Distance;
},{"../../math/Vector":42,"./Constraint":56}],59:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Snap(options) {
    Constraint.call(this);
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.pDiff = new Vector();
    this.vDiff = new Vector();
    this.impulse1 = new Vector();
    this.impulse2 = new Vector();
}
Snap.prototype = Object.create(Constraint.prototype);
Snap.prototype.constructor = Snap;
Snap.DEFAULT_OPTIONS = {
    period: 300,
    dampingRatio: 0.1,
    length: 0,
    anchor: undefined
};
var pi = Math.PI;
Snap.prototype.setOptions = function setOptions(options) {
    if (options.anchor !== undefined) {
        if (options.anchor instanceof Vector)
            this.options.anchor = options.anchor;
        if (options.anchor.position instanceof Vector)
            this.options.anchor = options.anchor.position;
        if (options.anchor instanceof Array)
            this.options.anchor = new Vector(options.anchor);
    }
    if (options.length !== undefined)
        this.options.length = options.length;
    if (options.dampingRatio !== undefined)
        this.options.dampingRatio = options.dampingRatio;
    if (options.period !== undefined)
        this.options.period = options.period;
    Constraint.prototype.setOptions.call(this, options);
};
Snap.prototype.getEnergy = function getEnergy(targets, source) {
    var options = this.options;
    var restLength = options.length;
    var anchor = options.anchor || source.position;
    var strength = Math.pow(2 * pi / options.period, 2);
    var energy = 0;
    for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        var dist = anchor.sub(target.position).norm() - restLength;
        energy += 0.5 * strength * dist * dist;
    }
    return energy;
};
Snap.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    var options = this.options;
    var pDiff = this.pDiff;
    var vDiff = this.vDiff;
    var impulse1 = this.impulse1;
    var impulse2 = this.impulse2;
    var length = options.length;
    var anchor = options.anchor || source.position;
    var period = options.period;
    var dampingRatio = options.dampingRatio;
    for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        var p1 = target.position;
        var v1 = target.velocity;
        var m1 = target.mass;
        var w1 = target.inverseMass;
        pDiff.set(p1.sub(anchor));
        var dist = pDiff.norm() - length;
        var effMass;
        if (source) {
            var w2 = source.inverseMass;
            var v2 = source.velocity;
            vDiff.set(v1.sub(v2));
            effMass = 1 / (w1 + w2);
        } else {
            vDiff.set(v1);
            effMass = m1;
        }
        var gamma;
        var beta;
        if (this.options.period === 0) {
            gamma = 0;
            beta = 1;
        } else {
            var k = 4 * effMass * pi * pi / (period * period);
            var c = 4 * effMass * pi * dampingRatio / period;
            beta = dt * k / (c + dt * k);
            gamma = 1 / (c + dt * k);
        }
        var antiDrift = beta / dt * dist;
        pDiff.normalize(-antiDrift).sub(vDiff).mult(dt / (gamma + dt / effMass)).put(impulse1);
        target.applyImpulse(impulse1);
        if (source) {
            impulse1.mult(-1).put(impulse2);
            source.applyImpulse(impulse2);
        }
    }
};
module.exports = Snap;
},{"../../math/Vector":42,"./Constraint":56}],60:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Surface(options) {
    this.options = Object.create(Surface.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.J = new Vector();
    this.impulse = new Vector();
    Constraint.call(this);
}
Surface.prototype = Object.create(Constraint.prototype);
Surface.prototype.constructor = Surface;
Surface.DEFAULT_OPTIONS = {
    equation: undefined,
    period: 0,
    dampingRatio: 0
};
var epsilon = 1e-7;
var pi = Math.PI;
Surface.prototype.setOptions = function setOptions(options) {
    for (var key in options)
        this.options[key] = options[key];
};
Surface.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    var impulse = this.impulse;
    var J = this.J;
    var options = this.options;
    var f = options.equation;
    var dampingRatio = options.dampingRatio;
    var period = options.period;
    for (var i = 0; i < targets.length; i++) {
        var particle = targets[i];
        var v = particle.velocity;
        var p = particle.position;
        var m = particle.mass;
        var gamma;
        var beta;
        if (period === 0) {
            gamma = 0;
            beta = 1;
        } else {
            var c = 4 * m * pi * dampingRatio / period;
            var k = 4 * m * pi * pi / (period * period);
            gamma = 1 / (c + dt * k);
            beta = dt * k / (c + dt * k);
        }
        var x = p.x;
        var y = p.y;
        var z = p.z;
        var f0 = f(x, y, z);
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;
        J.setXYZ(dfx, dfy, dfz);
        var antiDrift = beta / dt * f0;
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);
        impulse.set(J.mult(dt * lambda));
        particle.applyImpulse(impulse);
    }
};
module.exports = Surface;
},{"../../math/Vector":42,"./Constraint":56}],61:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Vector = require('../../math/Vector');
function Wall(options) {
    this.options = Object.create(Wall.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.diff = new Vector();
    this.impulse = new Vector();
    Constraint.call(this);
}
Wall.prototype = Object.create(Constraint.prototype);
Wall.prototype.constructor = Wall;
Wall.ON_CONTACT = {
    REFLECT: 0,
    SILENT: 1
};
Wall.DEFAULT_OPTIONS = {
    restitution: 0.5,
    drift: 0.5,
    slop: 0,
    normal: [
        1,
        0,
        0
    ],
    distance: 0,
    onContact: Wall.ON_CONTACT.REFLECT
};
Wall.prototype.setOptions = function setOptions(options) {
    if (options.normal !== undefined) {
        if (options.normal instanceof Vector)
            this.options.normal = options.normal.clone();
        if (options.normal instanceof Array)
            this.options.normal = new Vector(options.normal);
    }
    if (options.restitution !== undefined)
        this.options.restitution = options.restitution;
    if (options.drift !== undefined)
        this.options.drift = options.drift;
    if (options.slop !== undefined)
        this.options.slop = options.slop;
    if (options.distance !== undefined)
        this.options.distance = options.distance;
    if (options.onContact !== undefined)
        this.options.onContact = options.onContact;
};
function _getNormalVelocity(n, v) {
    return v.dot(n);
}
function _getDistanceFromOrigin(p) {
    var n = this.options.normal;
    var d = this.options.distance;
    return p.dot(n) + d;
}
function _onEnter(particle, overlap, dt) {
    var p = particle.position;
    var v = particle.velocity;
    var m = particle.mass;
    var n = this.options.normal;
    var action = this.options.onContact;
    var restitution = this.options.restitution;
    var impulse = this.impulse;
    var drift = this.options.drift;
    var slop = -this.options.slop;
    var gamma = 0;
    if (this._eventOutput) {
        var data = {
            particle: particle,
            wall: this,
            overlap: overlap,
            normal: n
        };
        this._eventOutput.emit('preCollision', data);
        this._eventOutput.emit('collision', data);
    }
    switch (action) {
    case Wall.ON_CONTACT.REFLECT:
        var lambda = overlap < slop ? -((1 + restitution) * n.dot(v) + drift / dt * (overlap - slop)) / (m * dt + gamma) : -((1 + restitution) * n.dot(v)) / (m * dt + gamma);
        impulse.set(n.mult(dt * lambda));
        particle.applyImpulse(impulse);
        particle.setPosition(p.add(n.mult(-overlap)));
        break;
    }
    if (this._eventOutput)
        this._eventOutput.emit('postCollision', data);
}
function _onExit(particle, overlap, dt) {
    var action = this.options.onContact;
    var p = particle.position;
    var n = this.options.normal;
    if (action === Wall.ON_CONTACT.REFLECT) {
        particle.setPosition(p.add(n.mult(-overlap)));
    }
}
Wall.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    var n = this.options.normal;
    for (var i = 0; i < targets.length; i++) {
        var particle = targets[i];
        var p = particle.position;
        var v = particle.velocity;
        var r = particle.radius || 0;
        var overlap = _getDistanceFromOrigin.call(this, p.add(n.mult(-r)));
        var nv = _getNormalVelocity.call(this, n, v);
        if (overlap <= 0) {
            if (nv < 0)
                _onEnter.call(this, particle, overlap, dt);
            else
                _onExit.call(this, particle, overlap, dt);
        }
    }
};
module.exports = Wall;
},{"../../math/Vector":42,"./Constraint":56}],62:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Constraint = require('./Constraint');
var Wall = require('./Wall');
var Vector = require('../../math/Vector');
function Walls(options) {
    this.options = Object.create(Walls.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    _createComponents.call(this, options.sides || this.options.sides);
    Constraint.call(this);
}
Walls.prototype = Object.create(Constraint.prototype);
Walls.prototype.constructor = Walls;
Walls.ON_CONTACT = Wall.ON_CONTACT;
Walls.SIDES = {
    LEFT: 0,
    RIGHT: 1,
    TOP: 2,
    BOTTOM: 3,
    FRONT: 4,
    BACK: 5,
    TWO_DIMENSIONAL: [
        0,
        1,
        2,
        3
    ],
    THREE_DIMENSIONAL: [
        0,
        1,
        2,
        3,
        4,
        5
    ]
};
Walls.DEFAULT_OPTIONS = {
    sides: Walls.SIDES.TWO_DIMENSIONAL,
    size: [
        window.innerWidth,
        window.innerHeight,
        0
    ],
    origin: [
        0.5,
        0.5,
        0.5
    ],
    drift: 0.5,
    slop: 0,
    restitution: 0.5,
    onContact: Walls.ON_CONTACT.REFLECT
};
var _SIDE_NORMALS = {
    0: new Vector(1, 0, 0),
    1: new Vector(-1, 0, 0),
    2: new Vector(0, 1, 0),
    3: new Vector(0, -1, 0),
    4: new Vector(0, 0, 1),
    5: new Vector(0, 0, -1)
};
function _getDistance(side, size, origin) {
    var distance;
    var SIDES = Walls.SIDES;
    switch (parseInt(side)) {
    case SIDES.LEFT:
        distance = size[0] * origin[0];
        break;
    case SIDES.TOP:
        distance = size[1] * origin[1];
        break;
    case SIDES.FRONT:
        distance = size[2] * origin[2];
        break;
    case SIDES.RIGHT:
        distance = size[0] * (1 - origin[0]);
        break;
    case SIDES.BOTTOM:
        distance = size[1] * (1 - origin[1]);
        break;
    case SIDES.BACK:
        distance = size[2] * (1 - origin[2]);
        break;
    }
    return distance;
}
Walls.prototype.setOptions = function setOptions(options) {
    var resizeFlag = false;
    if (options.restitution !== undefined)
        _setOptionsForEach.call(this, { restitution: options.restitution });
    if (options.drift !== undefined)
        _setOptionsForEach.call(this, { drift: options.drift });
    if (options.slop !== undefined)
        _setOptionsForEach.call(this, { slop: options.slop });
    if (options.onContact !== undefined)
        _setOptionsForEach.call(this, { onContact: options.onContact });
    if (options.size !== undefined)
        resizeFlag = true;
    if (options.sides !== undefined)
        this.options.sides = options.sides;
    if (options.origin !== undefined)
        resizeFlag = true;
    if (resizeFlag)
        this.setSize(options.size, options.origin);
};
function _createComponents(sides) {
    this.components = {};
    var components = this.components;
    for (var i = 0; i < sides.length; i++) {
        var side = sides[i];
        components[i] = new Wall({
            normal: _SIDE_NORMALS[side].clone(),
            distance: _getDistance(side, this.options.size, this.options.origin)
        });
    }
}
Walls.prototype.setSize = function setSize(size, origin) {
    origin = origin || this.options.origin;
    if (origin.length < 3)
        origin[2] = 0.5;
    this.forEach(function (wall, side) {
        var d = _getDistance(side, size, origin);
        wall.setOptions({ distance: d });
    });
    this.options.size = size;
    this.options.origin = origin;
};
function _setOptionsForEach(options) {
    this.forEach(function (wall) {
        wall.setOptions(options);
    });
    for (var key in options)
        this.options[key] = options[key];
}
Walls.prototype.applyConstraint = function applyConstraint(targets, source, dt) {
    this.forEach(function (wall) {
        wall.applyConstraint(targets, source, dt);
    });
};
Walls.prototype.forEach = function forEach(fn) {
    var sides = this.options.sides;
    for (var key in this.sides)
        fn(sides[key], key);
};
Walls.prototype.rotateZ = function rotateZ(angle) {
    this.forEach(function (wall) {
        var n = wall.options.normal;
        n.rotateZ(angle).put(n);
    });
};
Walls.prototype.rotateX = function rotateX(angle) {
    this.forEach(function (wall) {
        var n = wall.options.normal;
        n.rotateX(angle).put(n);
    });
};
Walls.prototype.rotateY = function rotateY(angle) {
    this.forEach(function (wall) {
        var n = wall.options.normal;
        n.rotateY(angle).put(n);
    });
};
Walls.prototype.reset = function reset() {
    var sides = this.options.sides;
    for (var i in sides) {
        var component = this.components[i];
        component.options.normal.set(_SIDE_NORMALS[i]);
    }
};
module.exports = Walls;
},{"../../math/Vector":42,"./Constraint":56,"./Wall":61}],63:[function(require,module,exports){
module.exports = {
  Collision: require('./Collision'),
  Constraint: require('./Constraint'),
  Curve: require('./Curve'),
  Distance: require('./Distance'),
  Snap: require('./Snap'),
  Surface: require('./Surface'),
  Wall: require('./Wall'),
  Walls: require('./Walls')
};

},{"./Collision":55,"./Constraint":56,"./Curve":57,"./Distance":58,"./Snap":59,"./Surface":60,"./Wall":61,"./Walls":62}],64:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Force = require('./Force');
function Drag(options) {
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    Force.call(this);
}
Drag.prototype = Object.create(Force.prototype);
Drag.prototype.constructor = Drag;
Drag.FORCE_FUNCTIONS = {
    LINEAR: function (velocity) {
        return velocity;
    },
    QUADRATIC: function (velocity) {
        return velocity.mult(velocity.norm());
    }
};
Drag.DEFAULT_OPTIONS = {
    strength: 0.01,
    forceFunction: Drag.FORCE_FUNCTIONS.LINEAR
};
Drag.prototype.applyForce = function applyForce(targets) {
    var strength = this.options.strength;
    var forceFunction = this.options.forceFunction;
    var force = this.force;
    var index;
    var particle;
    for (index = 0; index < targets.length; index++) {
        particle = targets[index];
        forceFunction(particle.velocity).mult(-strength).put(force);
        particle.applyForce(force);
    }
};
Drag.prototype.setOptions = function setOptions(options) {
    for (var key in options)
        this.options[key] = options[key];
};
module.exports = Drag;
},{"./Force":65}],65:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Vector = require('../../math/Vector');
var EventHandler = require('../../core/EventHandler');
function Force(force) {
    this.force = new Vector(force);
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
}
Force.prototype.setOptions = function setOptions(options) {
    this._eventOutput.emit('change', options);
};
Force.prototype.applyForce = function applyForce(targets) {
    var length = targets.length;
    while (length--) {
        targets[length].applyForce(this.force);
    }
};
Force.prototype.getEnergy = function getEnergy() {
    return 0;
};
module.exports = Force;
},{"../../core/EventHandler":8,"../../math/Vector":42}],66:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Force = require('./Force');
var Vector = require('../../math/Vector');
function Repulsion(options) {
    this.options = Object.create(Repulsion.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.disp = new Vector();
    Force.call(this);
}
Repulsion.prototype = Object.create(Force.prototype);
Repulsion.prototype.constructor = Repulsion;
Repulsion.DECAY_FUNCTIONS = {
    LINEAR: function (r, cutoff) {
        return Math.max(1 - 1 / cutoff * r, 0);
    },
    MORSE: function (r, cutoff) {
        var r0 = cutoff === 0 ? 100 : cutoff;
        var rShifted = r + r0 * (1 - Math.log(2));
        return Math.max(1 - Math.pow(1 - Math.exp(rShifted / r0 - 1), 2), 0);
    },
    INVERSE: function (r, cutoff) {
        return 1 / (1 - cutoff + r);
    },
    GRAVITY: function (r, cutoff) {
        return 1 / (1 - cutoff + r * r);
    }
};
Repulsion.DEFAULT_OPTIONS = {
    strength: 1,
    anchor: undefined,
    range: [
        0,
        Infinity
    ],
    cutoff: 0,
    cap: Infinity,
    decayFunction: Repulsion.DECAY_FUNCTIONS.GRAVITY
};
Repulsion.prototype.setOptions = function setOptions(options) {
    if (options.anchor !== undefined) {
        if (options.anchor.position instanceof Vector)
            this.options.anchor = options.anchor.position;
        if (options.anchor instanceof Array)
            this.options.anchor = new Vector(options.anchor);
        delete options.anchor;
    }
    for (var key in options)
        this.options[key] = options[key];
};
Repulsion.prototype.applyForce = function applyForce(targets, source) {
    var options = this.options;
    var force = this.force;
    var disp = this.disp;
    var strength = options.strength;
    var anchor = options.anchor || source.position;
    var cap = options.cap;
    var cutoff = options.cutoff;
    var rMin = options.range[0];
    var rMax = options.range[1];
    var decayFn = options.decayFunction;
    if (strength === 0)
        return;
    var length = targets.length;
    var particle;
    var m1;
    var p1;
    var r;
    while (length--) {
        particle = targets[length];
        if (particle === source)
            continue;
        m1 = particle.mass;
        p1 = particle.position;
        disp.set(p1.sub(anchor));
        r = disp.norm();
        if (r < rMax && r > rMin) {
            force.set(disp.normalize(strength * m1 * decayFn(r, cutoff)).cap(cap));
            particle.applyForce(force);
        }
    }
};
module.exports = Repulsion;
},{"../../math/Vector":42,"./Force":65}],67:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Drag = require('./Drag');
function RotationalDrag(options) {
    Drag.call(this, options);
}
RotationalDrag.prototype = Object.create(Drag.prototype);
RotationalDrag.prototype.constructor = RotationalDrag;
RotationalDrag.DEFAULT_OPTIONS = Drag.DEFAULT_OPTIONS;
RotationalDrag.FORCE_FUNCTIONS = Drag.FORCE_FUNCTIONS;
RotationalDrag.FORCE_FUNCTIONS = {
    LINEAR: function (angularVelocity) {
        return angularVelocity;
    },
    QUADRATIC: function (angularVelocity) {
        return angularVelocity.mult(angularVelocity.norm());
    }
};
RotationalDrag.prototype.applyForce = function applyForce(targets) {
    var strength = this.options.strength;
    var forceFunction = this.options.forceFunction;
    var force = this.force;
    var index;
    var particle;
    for (index = 0; index < targets.length; index++) {
        particle = targets[index];
        forceFunction(particle.angularVelocity).mult(-100 * strength).put(force);
        particle.applyTorque(force);
    }
};
RotationalDrag.prototype.setOptions = function setOptions(options) {
    for (var key in options)
        this.options[key] = options[key];
};
module.exports = RotationalDrag;
},{"./Drag":64}],68:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Force = require('./Force');
var Spring = require('./Spring');
var Quaternion = require('../../math/Quaternion');
function RotationalSpring(options) {
    Spring.call(this, options);
}
RotationalSpring.prototype = Object.create(Spring.prototype);
RotationalSpring.prototype.constructor = RotationalSpring;
RotationalSpring.DEFAULT_OPTIONS = Spring.DEFAULT_OPTIONS;
RotationalSpring.FORCE_FUNCTIONS = Spring.FORCE_FUNCTIONS;
var pi = Math.PI;
function _calcStiffness() {
    var options = this.options;
    options.stiffness = Math.pow(2 * pi / options.period, 2);
}
function _calcDamping() {
    var options = this.options;
    options.damping = 4 * pi * options.dampingRatio / options.period;
}
function _init() {
    _calcStiffness.call(this);
    _calcDamping.call(this);
}
RotationalSpring.prototype.setOptions = function setOptions(options) {
    if (options.anchor !== undefined) {
        if (options.anchor instanceof Quaternion)
            this.options.anchor = options.anchor;
        if (options.anchor instanceof Array)
            this.options.anchor = new Quaternion(options.anchor);
    }
    if (options.period !== undefined) {
        this.options.period = options.period;
    }
    if (options.dampingRatio !== undefined)
        this.options.dampingRatio = options.dampingRatio;
    if (options.length !== undefined)
        this.options.length = options.length;
    if (options.forceFunction !== undefined)
        this.options.forceFunction = options.forceFunction;
    if (options.maxLength !== undefined)
        this.options.maxLength = options.maxLength;
    _init.call(this);
    Force.prototype.setOptions.call(this, options);
};
RotationalSpring.prototype.applyForce = function applyForce(targets) {
    var force = this.force;
    var options = this.options;
    var disp = this.disp;
    var stiffness = options.stiffness;
    var damping = options.damping;
    var restLength = options.length;
    var anchor = options.anchor;
    var forceFunction = options.forceFunction;
    var maxLength = options.maxLength;
    var i;
    var target;
    var dist;
    var m;
    for (i = 0; i < targets.length; i++) {
        target = targets[i];
        disp.set(anchor.sub(target.orientation));
        dist = disp.norm() - restLength;
        if (dist === 0)
            return;
        m = target.mass;
        stiffness *= m;
        damping *= m;
        force.set(disp.normalize(stiffness * forceFunction(dist, maxLength)));
        if (damping)
            force.add(target.angularVelocity.mult(-damping)).put(force);
        target.applyTorque(force);
    }
};
RotationalSpring.prototype.getEnergy = function getEnergy(targets) {
    var options = this.options;
    var restLength = options.length;
    var anchor = options.anchor;
    var strength = options.stiffness;
    var energy = 0;
    for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        var dist = anchor.sub(target.orientation).norm() - restLength;
        energy += 0.5 * strength * dist * dist;
    }
    return energy;
};
module.exports = RotationalSpring;
},{"../../math/Quaternion":39,"./Force":65,"./Spring":69}],69:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Force = require('./Force');
var Vector = require('../../math/Vector');
function Spring(options) {
    Force.call(this);
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.disp = new Vector(0, 0, 0);
    _init.call(this);
}
Spring.prototype = Object.create(Force.prototype);
Spring.prototype.constructor = Spring;
var pi = Math.PI;
var MIN_PERIOD = 150;
Spring.FORCE_FUNCTIONS = {
    FENE: function (dist, rMax) {
        var rMaxSmall = rMax * 0.99;
        var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);
        return r / (1 - r * r / (rMax * rMax));
    },
    HOOK: function (dist) {
        return dist;
    }
};
Spring.DEFAULT_OPTIONS = {
    period: 300,
    dampingRatio: 0.1,
    length: 0,
    maxLength: Infinity,
    anchor: undefined,
    forceFunction: Spring.FORCE_FUNCTIONS.HOOK
};
function _calcStiffness() {
    var options = this.options;
    options.stiffness = Math.pow(2 * pi / options.period, 2);
}
function _calcDamping() {
    var options = this.options;
    options.damping = 4 * pi * options.dampingRatio / options.period;
}
function _init() {
    _calcStiffness.call(this);
    _calcDamping.call(this);
}
Spring.prototype.setOptions = function setOptions(options) {
    if (options.anchor !== undefined) {
        if (options.anchor.position instanceof Vector)
            this.options.anchor = options.anchor.position;
        if (options.anchor instanceof Vector)
            this.options.anchor = options.anchor;
        if (options.anchor instanceof Array)
            this.options.anchor = new Vector(options.anchor);
    }
    if (options.period !== undefined) {
        if (options.period < MIN_PERIOD) {
            options.period = MIN_PERIOD;
            console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
        }
        this.options.period = options.period;
    }
    if (options.dampingRatio !== undefined)
        this.options.dampingRatio = options.dampingRatio;
    if (options.length !== undefined)
        this.options.length = options.length;
    if (options.forceFunction !== undefined)
        this.options.forceFunction = options.forceFunction;
    if (options.maxLength !== undefined)
        this.options.maxLength = options.maxLength;
    _init.call(this);
    Force.prototype.setOptions.call(this, options);
};
Spring.prototype.applyForce = function applyForce(targets, source) {
    var force = this.force;
    var disp = this.disp;
    var options = this.options;
    var stiffness = options.stiffness;
    var damping = options.damping;
    var restLength = options.length;
    var maxLength = options.maxLength;
    var anchor = options.anchor || source.position;
    var forceFunction = options.forceFunction;
    var i;
    var target;
    var p2;
    var v2;
    var dist;
    var m;
    for (i = 0; i < targets.length; i++) {
        target = targets[i];
        p2 = target.position;
        v2 = target.velocity;
        anchor.sub(p2).put(disp);
        dist = disp.norm() - restLength;
        if (dist === 0)
            return;
        m = target.mass;
        stiffness *= m;
        damping *= m;
        disp.normalize(stiffness * forceFunction(dist, maxLength)).put(force);
        if (damping)
            if (source)
                force.add(v2.sub(source.velocity).mult(-damping)).put(force);
            else
                force.add(v2.mult(-damping)).put(force);
        target.applyForce(force);
        if (source)
            source.applyForce(force.mult(-1));
    }
};
Spring.prototype.getEnergy = function getEnergy(targets, source) {
    var options = this.options;
    var restLength = options.length;
    var anchor = source ? source.position : options.anchor;
    var strength = options.stiffness;
    var energy = 0;
    for (var i = 0; i < targets.length; i++) {
        var target = targets[i];
        var dist = anchor.sub(target.position).norm() - restLength;
        energy += 0.5 * strength * dist * dist;
    }
    return energy;
};
module.exports = Spring;
},{"../../math/Vector":42,"./Force":65}],70:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Force = require('./Force');
var Vector = require('../../math/Vector');
function VectorField(options) {
    Force.call(this);
    this.options = Object.create(VectorField.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this.evaluation = new Vector();
}
VectorField.prototype = Object.create(Force.prototype);
VectorField.prototype.constructor = VectorField;
VectorField.FIELDS = {
    CONSTANT: function (v, options) {
        options.direction.put(this.evaluation);
    },
    LINEAR: function (v) {
        v.put(this.evaluation);
    },
    RADIAL: function (v) {
        v.mult(-1).put(this.evaluation);
    },
    POINT_ATTRACTOR: function (v, options) {
        options.position.sub(v).put(this.evaluation);
    }
};
VectorField.DEFAULT_OPTIONS = {
    strength: 0.01,
    field: VectorField.FIELDS.CONSTANT
};
VectorField.prototype.setOptions = function setOptions(options) {
    if (options.strength !== undefined)
        this.options.strength = options.strength;
    if (options.direction !== undefined)
        this.options.direction = options.direction;
    if (options.field !== undefined) {
        this.options.field = options.field;
        _setFieldOptions.call(this, this.options.field);
    }
};
function _setFieldOptions(field) {
    var FIELDS = VectorField.FIELDS;
    switch (field) {
    case FIELDS.CONSTANT:
        if (!this.options.direction)
            this.options.direction = new Vector(0, 1, 0);
        else if (this.options.direction instanceof Array)
            this.options.direction = new Vector(this.options.direction);
        break;
    case FIELDS.POINT_ATTRACTOR:
        if (!this.options.position)
            this.options.position = new Vector(0, 0, 0);
        else if (this.options.position instanceof Array)
            this.options.position = new Vector(this.options.position);
        break;
    }
}
VectorField.prototype.applyForce = function applyForce(targets) {
    var force = this.force;
    var strength = this.options.strength;
    var field = this.options.field;
    var i;
    var target;
    for (i = 0; i < targets.length; i++) {
        target = targets[i];
        field.call(this, target.position, this.options);
        this.evaluation.mult(target.mass * strength).put(force);
        target.applyForce(force);
    }
};
VectorField.prototype.getEnergy = function getEnergy(targets) {
    var field = this.options.field;
    var FIELDS = VectorField.FIELDS;
    var energy = 0;
    var i;
    var target;
    switch (field) {
    case FIELDS.CONSTANT:
        energy = targets.length * this.options.direction.norm();
        break;
    case FIELDS.RADIAL:
        for (i = 0; i < targets.length; i++) {
            target = targets[i];
            energy += target.position.norm();
        }
        break;
    case FIELDS.POINT_ATTRACTOR:
        for (i = 0; i < targets.length; i++) {
            target = targets[i];
            energy += target.position.sub(this.options.position).norm();
        }
        break;
    }
    energy *= this.options.strength;
    return energy;
};
module.exports = VectorField;
},{"../../math/Vector":42,"./Force":65}],71:[function(require,module,exports){
module.exports = {
  Drag: require('./Drag'),
  Force: require('./Force'),
  Repulsion: require('./Repulsion'),
  RotationalDrag: require('./RotationalDrag'),
  RotationalSpring: require('./RotationalSpring'),
  Spring: require('./Spring'),
  VectorField: require('./VectorField')
};

},{"./Drag":64,"./Force":65,"./Repulsion":66,"./RotationalDrag":67,"./RotationalSpring":68,"./Spring":69,"./VectorField":70}],72:[function(require,module,exports){
module.exports = {
  PhysicsEngine: require('./PhysicsEngine'),
  bodies: require('./bodies'),
  constraints: require('./constraints'),
  forces: require('./forces'),
  integrators: require('./integrators')
};

},{"./PhysicsEngine":49,"./bodies":54,"./constraints":63,"./forces":71,"./integrators":74}],73:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var SymplecticEuler = {};
SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {
    var v = body.velocity;
    var w = body.inverseMass;
    var f = body.force;
    if (f.isZero())
        return;
    v.add(f.mult(dt * w)).put(v);
    f.clear();
};
SymplecticEuler.integratePosition = function integratePosition(body, dt) {
    var p = body.position;
    var v = body.velocity;
    p.add(v.mult(dt)).put(p);
};
SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {
    var L = body.angularMomentum;
    var t = body.torque;
    if (t.isZero())
        return;
    L.add(t.mult(dt)).put(L);
    t.clear();
};
SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {
    var q = body.orientation;
    var w = body.angularVelocity;
    if (w.isZero())
        return;
    q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);
};
module.exports = SymplecticEuler;
},{}],74:[function(require,module,exports){
module.exports = {
  SymplecticEuler: require('./SymplecticEuler')
};

},{"./SymplecticEuler":73}],75:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
function CanvasSurface(options) {
    if (options && options.canvasSize)
        this._canvasSize = options.canvasSize;
    Surface.apply(this, arguments);
    if (!this._canvasSize)
        this._canvasSize = this.getSize();
    this._backBuffer = document.createElement('canvas');
    if (this._canvasSize) {
        this._backBuffer.width = this._canvasSize[0];
        this._backBuffer.height = this._canvasSize[1];
    }
    this._contextId = undefined;
}
CanvasSurface.prototype = Object.create(Surface.prototype);
CanvasSurface.prototype.constructor = CanvasSurface;
CanvasSurface.prototype.elementType = 'canvas';
CanvasSurface.prototype.elementClass = 'famous-surface';
CanvasSurface.prototype.setContent = function setContent() {
};
CanvasSurface.prototype.deploy = function deploy(target) {
    if (this._canvasSize) {
        target.width = this._canvasSize[0];
        target.height = this._canvasSize[1];
    }
    if (this._contextId === '2d') {
        target.getContext(this._contextId).drawImage(this._backBuffer, 0, 0);
        this._backBuffer.width = 0;
        this._backBuffer.height = 0;
    }
};
CanvasSurface.prototype.recall = function recall(target) {
    var size = this.getSize();
    this._backBuffer.width = target.width;
    this._backBuffer.height = target.height;
    if (this._contextId === '2d') {
        this._backBuffer.getContext(this._contextId).drawImage(target, 0, 0);
        target.width = 0;
        target.height = 0;
    }
};
CanvasSurface.prototype.getContext = function getContext(contextId) {
    this._contextId = contextId;
    return this._currentTarget ? this._currentTarget.getContext(contextId) : this._backBuffer.getContext(contextId);
};
CanvasSurface.prototype.setSize = function setSize(size, canvasSize) {
    Surface.prototype.setSize.apply(this, arguments);
    if (canvasSize)
        this._canvasSize = [
            canvasSize[0],
            canvasSize[1]
        ];
    if (this._currentTarget) {
        this._currentTarget.width = this._canvasSize[0];
        this._currentTarget.height = this._canvasSize[1];
    }
};
module.exports = CanvasSurface;
},{"../core/Surface":15}],76:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
var Context = require('../core/Context');
function ContainerSurface(options) {
    Surface.call(this, options);
    this._container = document.createElement('div');
    this._container.classList.add('famous-group');
    this._container.classList.add('famous-container-group');
    this._shouldRecalculateSize = false;
    this.context = new Context(this._container);
    this.setContent(this._container);
}
ContainerSurface.prototype = Object.create(Surface.prototype);
ContainerSurface.prototype.constructor = ContainerSurface;
ContainerSurface.prototype.elementType = 'div';
ContainerSurface.prototype.elementClass = 'famous-surface';
ContainerSurface.prototype.add = function add() {
    return this.context.add.apply(this.context, arguments);
};
ContainerSurface.prototype.render = function render() {
    if (this._sizeDirty)
        this._shouldRecalculateSize = true;
    return Surface.prototype.render.apply(this, arguments);
};
ContainerSurface.prototype.deploy = function deploy() {
    this._shouldRecalculateSize = true;
    return Surface.prototype.deploy.apply(this, arguments);
};
ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {
    var previousSize = this._size ? [
        this._size[0],
        this._size[1]
    ] : null;
    var result = Surface.prototype.commit.apply(this, arguments);
    if (this._shouldRecalculateSize || previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1])) {
        this.context.setSize();
        this._shouldRecalculateSize = false;
    }
    this.context.update();
    return result;
};
module.exports = ContainerSurface;
},{"../core/Context":2,"../core/Surface":15}],77:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var ContainerSurface = require('./ContainerSurface');
function FormContainerSurface(options) {
    if (options)
        this._method = options.method || '';
    ContainerSurface.apply(this, arguments);
}
FormContainerSurface.prototype = Object.create(ContainerSurface.prototype);
FormContainerSurface.prototype.constructor = FormContainerSurface;
FormContainerSurface.prototype.elementType = 'form';
FormContainerSurface.prototype.deploy = function deploy(target) {
    if (this._method)
        target.method = this._method;
    return ContainerSurface.prototype.deploy.apply(this, arguments);
};
module.exports = FormContainerSurface;
},{"./ContainerSurface":76}],78:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
function ImageSurface(options) {
    this._imageUrl = undefined;
    Surface.apply(this, arguments);
}
var urlCache = [];
var countCache = [];
var nodeCache = [];
var cacheEnabled = true;
ImageSurface.enableCache = function enableCache() {
    cacheEnabled = true;
};
ImageSurface.disableCache = function disableCache() {
    cacheEnabled = false;
};
ImageSurface.clearCache = function clearCache() {
    urlCache = [];
    countCache = [];
    nodeCache = [];
};
ImageSurface.getCache = function getCache() {
    return {
        urlCache: urlCache,
        countCache: countCache,
        nodeCache: nodeCache
    };
};
ImageSurface.prototype = Object.create(Surface.prototype);
ImageSurface.prototype.constructor = ImageSurface;
ImageSurface.prototype.elementType = 'img';
ImageSurface.prototype.elementClass = 'famous-surface';
ImageSurface.prototype.setContent = function setContent(imageUrl) {
    var urlIndex = urlCache.indexOf(this._imageUrl);
    if (urlIndex !== -1) {
        if (countCache[urlIndex] === 1) {
            urlCache.splice(urlIndex, 1);
            countCache.splice(urlIndex, 1);
            nodeCache.splice(urlIndex, 1);
        } else {
            countCache[urlIndex]--;
        }
    }
    urlIndex = urlCache.indexOf(imageUrl);
    if (urlIndex === -1) {
        urlCache.push(imageUrl);
        countCache.push(1);
    } else {
        countCache[urlIndex]++;
    }
    this._imageUrl = imageUrl;
    this._contentDirty = true;
};
ImageSurface.prototype.deploy = function deploy(target) {
    var urlIndex = urlCache.indexOf(this._imageUrl);
    if (nodeCache[urlIndex] === undefined && cacheEnabled) {
        var img = new Image();
        img.src = this._imageUrl || '';
        nodeCache[urlIndex] = img;
    }
    target.src = this._imageUrl || '';
};
ImageSurface.prototype.recall = function recall(target) {
    target.src = '';
};
module.exports = ImageSurface;
},{"../core/Surface":15}],79:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
function InputSurface(options) {
    this._placeholder = options.placeholder || '';
    this._value = options.value || '';
    this._type = options.type || 'text';
    this._name = options.name || '';
    Surface.apply(this, arguments);
    this.on('click', this.focus.bind(this));
    window.addEventListener('click', function (event) {
        if (event.target !== this._currentTarget)
            this.blur();
    }.bind(this));
}
InputSurface.prototype = Object.create(Surface.prototype);
InputSurface.prototype.constructor = InputSurface;
InputSurface.prototype.elementType = 'input';
InputSurface.prototype.elementClass = 'famous-surface';
InputSurface.prototype.setPlaceholder = function setPlaceholder(str) {
    this._placeholder = str;
    this._contentDirty = true;
    return this;
};
InputSurface.prototype.focus = function focus() {
    if (this._currentTarget)
        this._currentTarget.focus();
    return this;
};
InputSurface.prototype.blur = function blur() {
    if (this._currentTarget)
        this._currentTarget.blur();
    return this;
};
InputSurface.prototype.setValue = function setValue(str) {
    this._value = str;
    this._contentDirty = true;
    return this;
};
InputSurface.prototype.setType = function setType(str) {
    this._type = str;
    this._contentDirty = true;
    return this;
};
InputSurface.prototype.getValue = function getValue() {
    if (this._currentTarget) {
        return this._currentTarget.value;
    } else {
        return this._value;
    }
};
InputSurface.prototype.setName = function setName(str) {
    this._name = str;
    this._contentDirty = true;
    return this;
};
InputSurface.prototype.getName = function getName() {
    return this._name;
};
InputSurface.prototype.deploy = function deploy(target) {
    if (this._placeholder !== '')
        target.placeholder = this._placeholder;
    target.value = this._value;
    target.type = this._type;
    target.name = this._name;
};
module.exports = InputSurface;
},{"../core/Surface":15}],80:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var InputSurface = require('./InputSurface');
function SubmitInputSurface(options) {
    InputSurface.apply(this, arguments);
    this._type = 'submit';
    if (options && options.onClick)
        this.setOnClick(options.onClick);
}
SubmitInputSurface.prototype = Object.create(InputSurface.prototype);
SubmitInputSurface.prototype.constructor = SubmitInputSurface;
SubmitInputSurface.prototype.setOnClick = function (onClick) {
    this.onClick = onClick;
};
SubmitInputSurface.prototype.deploy = function deploy(target) {
    if (this.onclick)
        target.onClick = this.onClick;
    InputSurface.prototype.deploy.apply(this, arguments);
};
module.exports = SubmitInputSurface;
},{"./InputSurface":79}],81:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
function TextareaSurface(options) {
    this._placeholder = options.placeholder || '';
    this._value = options.value || '';
    this._name = options.name || '';
    this._wrap = options.wrap || '';
    this._cols = options.cols || '';
    this._rows = options.rows || '';
    Surface.apply(this, arguments);
    this.on('click', this.focus.bind(this));
}
TextareaSurface.prototype = Object.create(Surface.prototype);
TextareaSurface.prototype.constructor = TextareaSurface;
TextareaSurface.prototype.elementType = 'textarea';
TextareaSurface.prototype.elementClass = 'famous-surface';
TextareaSurface.prototype.setPlaceholder = function setPlaceholder(str) {
    this._placeholder = str;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.focus = function focus() {
    if (this._currentTarget)
        this._currentTarget.focus();
    return this;
};
TextareaSurface.prototype.blur = function blur() {
    if (this._currentTarget)
        this._currentTarget.blur();
    return this;
};
TextareaSurface.prototype.setValue = function setValue(str) {
    this._value = str;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.getValue = function getValue() {
    if (this._currentTarget) {
        return this._currentTarget.value;
    } else {
        return this._value;
    }
};
TextareaSurface.prototype.setName = function setName(str) {
    this._name = str;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.getName = function getName() {
    return this._name;
};
TextareaSurface.prototype.setWrap = function setWrap(str) {
    this._wrap = str;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.setColumns = function setColumns(num) {
    this._cols = num;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.setRows = function setRows(num) {
    this._rows = num;
    this._contentDirty = true;
    return this;
};
TextareaSurface.prototype.deploy = function deploy(target) {
    if (this._placeholder !== '')
        target.placeholder = this._placeholder;
    if (this._value !== '')
        target.value = this._value;
    if (this._name !== '')
        target.name = this._name;
    if (this._wrap !== '')
        target.wrap = this._wrap;
    if (this._cols !== '')
        target.cols = this._cols;
    if (this._rows !== '')
        target.rows = this._rows;
};
module.exports = TextareaSurface;
},{"../core/Surface":15}],82:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
function VideoSurface(options) {
    Surface.apply(this, arguments);
    this._videoUrl = undefined;
    this.options = Object.create(VideoSurface.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
}
VideoSurface.prototype = Object.create(Surface.prototype);
VideoSurface.prototype.constructor = VideoSurface;
VideoSurface.DEFAULT_OPTIONS = { autoplay: false };
VideoSurface.prototype.elementType = 'video';
VideoSurface.prototype.elementClass = 'famous-surface';
VideoSurface.prototype.setOptions = function setOptions(options) {
    if (options.size)
        this.setSize(options.size);
    if (options.classes)
        this.setClasses(options.classes);
    if (options.properties)
        this.setProperties(options.properties);
    if (options.autoplay)
        this.options.autoplay = options.autoplay;
    if (options.src) {
        this._videoUrl = options.src;
        this._contentDirty = true;
    }
};
VideoSurface.prototype.setContent = function setContent(videoUrl) {
    this._videoUrl = videoUrl;
    this._contentDirty = true;
};
VideoSurface.prototype.deploy = function deploy(target) {
    target.src = this._videoUrl;
    target.autoplay = this.options.autoplay;
};
VideoSurface.prototype.recall = function recall(target) {
    target.src = '';
};
module.exports = VideoSurface;
},{"../core/Surface":15}],83:[function(require,module,exports){
module.exports = {
  CanvasSurface: require('./CanvasSurface'),
  ContainerSurface: require('./ContainerSurface'),
  FormContainerSurface: require('./FormContainerSurface'),
  ImageSurface: require('./ImageSurface'),
  InputSurface: require('./InputSurface'),
  SubmitInputSurface: require('./SubmitInputSurface'),
  TextareaSurface: require('./TextareaSurface'),
  VideoSurface: require('./VideoSurface')
};

},{"./CanvasSurface":75,"./ContainerSurface":76,"./FormContainerSurface":77,"./ImageSurface":78,"./InputSurface":79,"./SubmitInputSurface":80,"./TextareaSurface":81,"./VideoSurface":82}],84:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function CachedMap(mappingFunction) {
    this._map = mappingFunction || null;
    this._cachedOutput = null;
    this._cachedInput = Number.NaN;
}
CachedMap.create = function create(mappingFunction) {
    var instance = new CachedMap(mappingFunction);
    return instance.get.bind(instance);
};
CachedMap.prototype.get = function get(input) {
    if (input !== this._cachedInput) {
        this._cachedInput = input;
        this._cachedOutput = this._map(input);
    }
    return this._cachedOutput;
};
module.exports = CachedMap;
},{}],85:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Easing = {
    inQuad: function (t) {
        return t * t;
    },
    outQuad: function (t) {
        return -(t -= 1) * t + 1;
    },
    inOutQuad: function (t) {
        if ((t /= 0.5) < 1)
            return 0.5 * t * t;
        return -0.5 * (--t * (t - 2) - 1);
    },
    inCubic: function (t) {
        return t * t * t;
    },
    outCubic: function (t) {
        return --t * t * t + 1;
    },
    inOutCubic: function (t) {
        if ((t /= 0.5) < 1)
            return 0.5 * t * t * t;
        return 0.5 * ((t -= 2) * t * t + 2);
    },
    inQuart: function (t) {
        return t * t * t * t;
    },
    outQuart: function (t) {
        return -(--t * t * t * t - 1);
    },
    inOutQuart: function (t) {
        if ((t /= 0.5) < 1)
            return 0.5 * t * t * t * t;
        return -0.5 * ((t -= 2) * t * t * t - 2);
    },
    inQuint: function (t) {
        return t * t * t * t * t;
    },
    outQuint: function (t) {
        return --t * t * t * t * t + 1;
    },
    inOutQuint: function (t) {
        if ((t /= 0.5) < 1)
            return 0.5 * t * t * t * t * t;
        return 0.5 * ((t -= 2) * t * t * t * t + 2);
    },
    inSine: function (t) {
        return -1 * Math.cos(t * (Math.PI / 2)) + 1;
    },
    outSine: function (t) {
        return Math.sin(t * (Math.PI / 2));
    },
    inOutSine: function (t) {
        return -0.5 * (Math.cos(Math.PI * t) - 1);
    },
    inExpo: function (t) {
        return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));
    },
    outExpo: function (t) {
        return t === 1 ? 1 : -Math.pow(2, -10 * t) + 1;
    },
    inOutExpo: function (t) {
        if (t === 0)
            return 0;
        if (t === 1)
            return 1;
        if ((t /= 0.5) < 1)
            return 0.5 * Math.pow(2, 10 * (t - 1));
        return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    },
    inCirc: function (t) {
        return -(Math.sqrt(1 - t * t) - 1);
    },
    outCirc: function (t) {
        return Math.sqrt(1 - --t * t);
    },
    inOutCirc: function (t) {
        if ((t /= 0.5) < 1)
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
        return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    },
    inElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0)
            return 0;
        if (t === 1)
            return 1;
        if (!p)
            p = 0.3;
        s = p / (2 * Math.PI) * Math.asin(1 / a);
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    },
    outElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0)
            return 0;
        if (t === 1)
            return 1;
        if (!p)
            p = 0.3;
        s = p / (2 * Math.PI) * Math.asin(1 / a);
        return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
    },
    inOutElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0)
            return 0;
        if ((t /= 0.5) === 2)
            return 1;
        if (!p)
            p = 0.3 * 1.5;
        s = p / (2 * Math.PI) * Math.asin(1 / a);
        if (t < 1)
            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
    },
    inBack: function (t, s) {
        if (s === undefined)
            s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    outBack: function (t, s) {
        if (s === undefined)
            s = 1.70158;
        return --t * t * ((s + 1) * t + s) + 1;
    },
    inOutBack: function (t, s) {
        if (s === undefined)
            s = 1.70158;
        if ((t /= 0.5) < 1)
            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    inBounce: function (t) {
        return 1 - Easing.outBounce(1 - t);
    },
    outBounce: function (t) {
        if (t < 1 / 2.75) {
            return 7.5625 * t * t;
        } else if (t < 2 / 2.75) {
            return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
        } else if (t < 2.5 / 2.75) {
            return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
        } else {
            return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
        }
    },
    inOutBounce: function (t) {
        if (t < 0.5)
            return Easing.inBounce(t * 2) * 0.5;
        return Easing.outBounce(t * 2 - 1) * 0.5 + 0.5;
    }
};
module.exports = Easing;
},{}],86:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Utility = require('../utilities/Utility');
function MultipleTransition(method) {
    this.method = method;
    this._instances = [];
    this.state = [];
}
MultipleTransition.SUPPORTS_MULTIPLE = true;
MultipleTransition.prototype.get = function get() {
    for (var i = 0; i < this._instances.length; i++) {
        this.state[i] = this._instances[i].get();
    }
    return this.state;
};
MultipleTransition.prototype.set = function set(endState, transition, callback) {
    var _allCallback = Utility.after(endState.length, callback);
    for (var i = 0; i < endState.length; i++) {
        if (!this._instances[i])
            this._instances[i] = new this.method();
        this._instances[i].set(endState[i], transition, _allCallback);
    }
};
MultipleTransition.prototype.reset = function reset(startState) {
    for (var i = 0; i < startState.length; i++) {
        if (!this._instances[i])
            this._instances[i] = new this.method();
        this._instances[i].reset(startState[i]);
    }
};
module.exports = MultipleTransition;
},{"../utilities/Utility":96}],87:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var PE = require('../physics/PhysicsEngine');
var Particle = require('../physics/bodies/Particle');
var Spring = require('../physics/constraints/Snap');
var Vector = require('../math/Vector');
function SnapTransition(state) {
    state = state || 0;
    this.endState = new Vector(state);
    this.initState = new Vector();
    this._dimensions = 1;
    this._restTolerance = 1e-10;
    this._absRestTolerance = this._restTolerance;
    this._callback = undefined;
    this.PE = new PE();
    this.particle = new Particle();
    this.spring = new Spring({ anchor: this.endState });
    this.PE.addBody(this.particle);
    this.PE.attach(this.spring, this.particle);
}
SnapTransition.SUPPORTS_MULTIPLE = 3;
SnapTransition.DEFAULT_OPTIONS = {
    period: 100,
    dampingRatio: 0.2,
    velocity: 0
};
function _getEnergy() {
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);
}
function _setAbsoluteRestTolerance() {
    var distance = this.endState.sub(this.initState).normSquared();
    this._absRestTolerance = distance === 0 ? this._restTolerance : this._restTolerance * distance;
}
function _setTarget(target) {
    this.endState.set(target);
    _setAbsoluteRestTolerance.call(this);
}
function _wake() {
    this.PE.wake();
}
function _sleep() {
    this.PE.sleep();
}
function _setParticlePosition(p) {
    this.particle.position.set(p);
}
function _setParticleVelocity(v) {
    this.particle.velocity.set(v);
}
function _getParticlePosition() {
    return this._dimensions === 0 ? this.particle.getPosition1D() : this.particle.getPosition();
}
function _getParticleVelocity() {
    return this._dimensions === 0 ? this.particle.getVelocity1D() : this.particle.getVelocity();
}
function _setCallback(callback) {
    this._callback = callback;
}
function _setupDefinition(definition) {
    var defaults = SnapTransition.DEFAULT_OPTIONS;
    if (definition.period === undefined)
        definition.period = defaults.period;
    if (definition.dampingRatio === undefined)
        definition.dampingRatio = defaults.dampingRatio;
    if (definition.velocity === undefined)
        definition.velocity = defaults.velocity;
    this.spring.setOptions({
        period: definition.period,
        dampingRatio: definition.dampingRatio
    });
    _setParticleVelocity.call(this, definition.velocity);
}
function _update() {
    if (this.PE.isSleeping()) {
        if (this._callback) {
            var cb = this._callback;
            this._callback = undefined;
            cb();
        }
        return;
    }
    if (_getEnergy.call(this) < this._absRestTolerance) {
        _setParticlePosition.call(this, this.endState);
        _setParticleVelocity.call(this, [
            0,
            0,
            0
        ]);
        _sleep.call(this);
    }
}
SnapTransition.prototype.reset = function reset(state, velocity) {
    this._dimensions = state instanceof Array ? state.length : 0;
    this.initState.set(state);
    _setParticlePosition.call(this, state);
    _setTarget.call(this, state);
    if (velocity)
        _setParticleVelocity.call(this, velocity);
    _setCallback.call(this, undefined);
};
SnapTransition.prototype.getVelocity = function getVelocity() {
    return _getParticleVelocity.call(this);
};
SnapTransition.prototype.setVelocity = function setVelocity(velocity) {
    this.call(this, _setParticleVelocity(velocity));
};
SnapTransition.prototype.isActive = function isActive() {
    return !this.PE.isSleeping();
};
SnapTransition.prototype.halt = function halt() {
    this.set(this.get());
};
SnapTransition.prototype.get = function get() {
    _update.call(this);
    return _getParticlePosition.call(this);
};
SnapTransition.prototype.set = function set(state, definition, callback) {
    if (!definition) {
        this.reset(state);
        if (callback)
            callback();
        return;
    }
    this._dimensions = state instanceof Array ? state.length : 0;
    _wake.call(this);
    _setupDefinition.call(this, definition);
    _setTarget.call(this, state);
    _setCallback.call(this, callback);
};
module.exports = SnapTransition;
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/constraints/Snap":59}],88:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var PE = require('../physics/PhysicsEngine');
var Particle = require('../physics/bodies/Particle');
var Spring = require('../physics/forces/Spring');
var Vector = require('../math/Vector');
function SpringTransition(state) {
    state = state || 0;
    this.endState = new Vector(state);
    this.initState = new Vector();
    this._dimensions = undefined;
    this._restTolerance = 1e-10;
    this._absRestTolerance = this._restTolerance;
    this._callback = undefined;
    this.PE = new PE();
    this.spring = new Spring({ anchor: this.endState });
    this.particle = new Particle();
    this.PE.addBody(this.particle);
    this.PE.attach(this.spring, this.particle);
}
SpringTransition.SUPPORTS_MULTIPLE = 3;
SpringTransition.DEFAULT_OPTIONS = {
    period: 300,
    dampingRatio: 0.5,
    velocity: 0
};
function _getEnergy() {
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);
}
function _setParticlePosition(p) {
    this.particle.setPosition(p);
}
function _setParticleVelocity(v) {
    this.particle.setVelocity(v);
}
function _getParticlePosition() {
    return this._dimensions === 0 ? this.particle.getPosition1D() : this.particle.getPosition();
}
function _getParticleVelocity() {
    return this._dimensions === 0 ? this.particle.getVelocity1D() : this.particle.getVelocity();
}
function _setCallback(callback) {
    this._callback = callback;
}
function _wake() {
    this.PE.wake();
}
function _sleep() {
    this.PE.sleep();
}
function _update() {
    if (this.PE.isSleeping()) {
        if (this._callback) {
            var cb = this._callback;
            this._callback = undefined;
            cb();
        }
        return;
    }
    if (_getEnergy.call(this) < this._absRestTolerance) {
        _setParticlePosition.call(this, this.endState);
        _setParticleVelocity.call(this, [
            0,
            0,
            0
        ]);
        _sleep.call(this);
    }
}
function _setupDefinition(definition) {
    var defaults = SpringTransition.DEFAULT_OPTIONS;
    if (definition.period === undefined)
        definition.period = defaults.period;
    if (definition.dampingRatio === undefined)
        definition.dampingRatio = defaults.dampingRatio;
    if (definition.velocity === undefined)
        definition.velocity = defaults.velocity;
    if (definition.period < 150) {
        definition.period = 150;
        console.warn('The period of a SpringTransition is capped at 150 ms. Use a SnapTransition for faster transitions');
    }
    this.spring.setOptions({
        period: definition.period,
        dampingRatio: definition.dampingRatio
    });
    _setParticleVelocity.call(this, definition.velocity);
}
function _setAbsoluteRestTolerance() {
    var distance = this.endState.sub(this.initState).normSquared();
    this._absRestTolerance = distance === 0 ? this._restTolerance : this._restTolerance * distance;
}
function _setTarget(target) {
    this.endState.set(target);
    _setAbsoluteRestTolerance.call(this);
}
SpringTransition.prototype.reset = function reset(pos, vel) {
    this._dimensions = pos instanceof Array ? pos.length : 0;
    this.initState.set(pos);
    _setParticlePosition.call(this, pos);
    _setTarget.call(this, pos);
    if (vel)
        _setParticleVelocity.call(this, vel);
    _setCallback.call(this, undefined);
};
SpringTransition.prototype.getVelocity = function getVelocity() {
    return _getParticleVelocity.call(this);
};
SpringTransition.prototype.setVelocity = function setVelocity(v) {
    this.call(this, _setParticleVelocity(v));
};
SpringTransition.prototype.isActive = function isActive() {
    return !this.PE.isSleeping();
};
SpringTransition.prototype.halt = function halt() {
    this.set(this.get());
};
SpringTransition.prototype.get = function get() {
    _update.call(this);
    return _getParticlePosition.call(this);
};
SpringTransition.prototype.set = function set(endState, definition, callback) {
    if (!definition) {
        this.reset(endState);
        if (callback)
            callback();
        return;
    }
    this._dimensions = endState instanceof Array ? endState.length : 0;
    _wake.call(this);
    _setupDefinition.call(this, definition);
    _setTarget.call(this, endState);
    _setCallback.call(this, callback);
};
module.exports = SpringTransition;
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/forces/Spring":69}],89:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var MultipleTransition = require('./MultipleTransition');
var TweenTransition = require('./TweenTransition');
function Transitionable(start) {
    this.currentAction = null;
    this.actionQueue = [];
    this.callbackQueue = [];
    this.state = 0;
    this.velocity = undefined;
    this._callback = undefined;
    this._engineInstance = null;
    this._currentMethod = null;
    this.set(start);
}
var transitionMethods = {};
Transitionable.register = function register(methods) {
    var success = true;
    for (var method in methods) {
        if (!Transitionable.registerMethod(method, methods[method]))
            success = false;
    }
    return success;
};
Transitionable.registerMethod = function registerMethod(name, engineClass) {
    if (!(name in transitionMethods)) {
        transitionMethods[name] = engineClass;
        return true;
    } else
        return false;
};
Transitionable.unregisterMethod = function unregisterMethod(name) {
    if (name in transitionMethods) {
        delete transitionMethods[name];
        return true;
    } else
        return false;
};
function _loadNext() {
    if (this._callback) {
        var callback = this._callback;
        this._callback = undefined;
        callback();
    }
    if (this.actionQueue.length <= 0) {
        this.set(this.get());
        return;
    }
    this.currentAction = this.actionQueue.shift();
    this._callback = this.callbackQueue.shift();
    var method = null;
    var endValue = this.currentAction[0];
    var transition = this.currentAction[1];
    if (transition instanceof Object && transition.method) {
        method = transition.method;
        if (typeof method === 'string')
            method = transitionMethods[method];
    } else {
        method = TweenTransition;
    }
    if (this._currentMethod !== method) {
        if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
            this._engineInstance = new method();
        } else {
            this._engineInstance = new MultipleTransition(method);
        }
        this._currentMethod = method;
    }
    this._engineInstance.reset(this.state, this.velocity);
    if (this.velocity !== undefined)
        transition.velocity = this.velocity;
    this._engineInstance.set(endValue, transition, _loadNext.bind(this));
}
Transitionable.prototype.set = function set(endState, transition, callback) {
    if (!transition) {
        this.reset(endState);
        if (callback)
            callback();
        return this;
    }
    var action = [
        endState,
        transition
    ];
    this.actionQueue.push(action);
    this.callbackQueue.push(callback);
    if (!this.currentAction)
        _loadNext.call(this);
    return this;
};
Transitionable.prototype.reset = function reset(startState, startVelocity) {
    this._currentMethod = null;
    this._engineInstance = null;
    this._callback = undefined;
    this.state = startState;
    this.velocity = startVelocity;
    this.currentAction = null;
    this.actionQueue = [];
    this.callbackQueue = [];
};
Transitionable.prototype.delay = function delay(duration, callback) {
    var endValue;
    if (this.actionQueue.length)
        endValue = this.actionQueue[this.actionQueue.length - 1][0];
    else if (this.currentAction)
        endValue = this.currentAction[0];
    else
        endValue = this.get();
    return this.set(endValue, {
        duration: duration,
        curve: function () {
            return 0;
        }
    }, callback);
};
Transitionable.prototype.get = function get(timestamp) {
    if (this._engineInstance) {
        if (this._engineInstance.getVelocity)
            this.velocity = this._engineInstance.getVelocity();
        this.state = this._engineInstance.get(timestamp);
    }
    return this.state;
};
Transitionable.prototype.isActive = function isActive() {
    return !!this.currentAction;
};
Transitionable.prototype.halt = function halt() {
    return this.set(this.get());
};
module.exports = Transitionable;
},{"./MultipleTransition":86,"./TweenTransition":91}],90:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transitionable = require('./Transitionable');
var Transform = require('../core/Transform');
var Utility = require('../utilities/Utility');
function TransitionableTransform(transform) {
    this._final = Transform.identity.slice();
    this._finalTranslate = [
        0,
        0,
        0
    ];
    this._finalRotate = [
        0,
        0,
        0
    ];
    this._finalSkew = [
        0,
        0,
        0
    ];
    this._finalScale = [
        1,
        1,
        1
    ];
    this.translate = new Transitionable(this._finalTranslate);
    this.rotate = new Transitionable(this._finalRotate);
    this.skew = new Transitionable(this._finalSkew);
    this.scale = new Transitionable(this._finalScale);
    if (transform)
        this.set(transform);
}
function _build() {
    return Transform.build({
        translate: this.translate.get(),
        rotate: this.rotate.get(),
        skew: this.skew.get(),
        scale: this.scale.get()
    });
}
function _buildFinal() {
    return Transform.build({
        translate: this._finalTranslate,
        rotate: this._finalRotate,
        skew: this._finalSkew,
        scale: this._finalScale
    });
}
TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {
    this._finalTranslate = translate;
    this._final = _buildFinal.call(this);
    this.translate.set(translate, transition, callback);
    return this;
};
TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {
    this._finalScale = scale;
    this._final = _buildFinal.call(this);
    this.scale.set(scale, transition, callback);
    return this;
};
TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {
    this._finalRotate = eulerAngles;
    this._final = _buildFinal.call(this);
    this.rotate.set(eulerAngles, transition, callback);
    return this;
};
TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {
    this._finalSkew = skewAngles;
    this._final = _buildFinal.call(this);
    this.skew.set(skewAngles, transition, callback);
    return this;
};
TransitionableTransform.prototype.set = function set(transform, transition, callback) {
    var components = Transform.interpret(transform);
    this._finalTranslate = components.translate;
    this._finalRotate = components.rotate;
    this._finalSkew = components.skew;
    this._finalScale = components.scale;
    this._final = transform;
    var _callback = callback ? Utility.after(4, callback) : null;
    this.translate.set(components.translate, transition, _callback);
    this.rotate.set(components.rotate, transition, _callback);
    this.skew.set(components.skew, transition, _callback);
    this.scale.set(components.scale, transition, _callback);
    return this;
};
TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {
    this.translate.setDefault(transition);
    this.rotate.setDefault(transition);
    this.skew.setDefault(transition);
    this.scale.setDefault(transition);
};
TransitionableTransform.prototype.get = function get() {
    if (this.isActive()) {
        return _build.call(this);
    } else
        return this._final;
};
TransitionableTransform.prototype.getFinal = function getFinal() {
    return this._final;
};
TransitionableTransform.prototype.isActive = function isActive() {
    return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();
};
TransitionableTransform.prototype.halt = function halt() {
    this.translate.halt();
    this.rotate.halt();
    this.skew.halt();
    this.scale.halt();
    this._final = this.get();
    this._finalTranslate = this.translate.get();
    this._finalRotate = this.rotate.get();
    this._finalSkew = this.skew.get();
    this._finalScale = this.scale.get();
    return this;
};
module.exports = TransitionableTransform;
},{"../core/Transform":16,"../utilities/Utility":96,"./Transitionable":89}],91:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
function TweenTransition(options) {
    this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);
    if (options)
        this.setOptions(options);
    this._startTime = 0;
    this._startValue = 0;
    this._updateTime = 0;
    this._endValue = 0;
    this._curve = undefined;
    this._duration = 0;
    this._active = false;
    this._callback = undefined;
    this.state = 0;
    this.velocity = undefined;
}
TweenTransition.Curves = {
    linear: function (t) {
        return t;
    },
    easeIn: function (t) {
        return t * t;
    },
    easeOut: function (t) {
        return t * (2 - t);
    },
    easeInOut: function (t) {
        if (t <= 0.5)
            return 2 * t * t;
        else
            return -2 * t * t + 4 * t - 1;
    },
    easeOutBounce: function (t) {
        return t * (3 - 2 * t);
    },
    spring: function (t) {
        return (1 - t) * Math.sin(6 * Math.PI * t) + t;
    }
};
TweenTransition.SUPPORTS_MULTIPLE = true;
TweenTransition.DEFAULT_OPTIONS = {
    curve: TweenTransition.Curves.linear,
    duration: 500,
    speed: 0
};
var registeredCurves = {};
TweenTransition.registerCurve = function registerCurve(curveName, curve) {
    if (!registeredCurves[curveName]) {
        registeredCurves[curveName] = curve;
        return true;
    } else {
        return false;
    }
};
TweenTransition.unregisterCurve = function unregisterCurve(curveName) {
    if (registeredCurves[curveName]) {
        delete registeredCurves[curveName];
        return true;
    } else {
        return false;
    }
};
TweenTransition.getCurve = function getCurve(curveName) {
    var curve = registeredCurves[curveName];
    if (curve !== undefined)
        return curve;
    else
        throw new Error('curve not registered');
};
TweenTransition.getCurves = function getCurves() {
    return registeredCurves;
};
function _interpolate(a, b, t) {
    return (1 - t) * a + t * b;
}
function _clone(obj) {
    if (obj instanceof Object) {
        if (obj instanceof Array)
            return obj.slice(0);
        else
            return Object.create(obj);
    } else
        return obj;
}
function _normalize(transition, defaultTransition) {
    var result = { curve: defaultTransition.curve };
    if (defaultTransition.duration)
        result.duration = defaultTransition.duration;
    if (defaultTransition.speed)
        result.speed = defaultTransition.speed;
    if (transition instanceof Object) {
        if (transition.duration !== undefined)
            result.duration = transition.duration;
        if (transition.curve)
            result.curve = transition.curve;
        if (transition.speed)
            result.speed = transition.speed;
    }
    if (typeof result.curve === 'string')
        result.curve = TweenTransition.getCurve(result.curve);
    return result;
}
TweenTransition.prototype.setOptions = function setOptions(options) {
    if (options.curve !== undefined)
        this.options.curve = options.curve;
    if (options.duration !== undefined)
        this.options.duration = options.duration;
    if (options.speed !== undefined)
        this.options.speed = options.speed;
};
TweenTransition.prototype.set = function set(endValue, transition, callback) {
    if (!transition) {
        this.reset(endValue);
        if (callback)
            callback();
        return;
    }
    this._startValue = _clone(this.get());
    transition = _normalize(transition, this.options);
    if (transition.speed) {
        var startValue = this._startValue;
        if (startValue instanceof Object) {
            var variance = 0;
            for (var i in startValue)
                variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);
            transition.duration = Math.sqrt(variance) / transition.speed;
        } else {
            transition.duration = Math.abs(endValue - startValue) / transition.speed;
        }
    }
    this._startTime = Date.now();
    this._endValue = _clone(endValue);
    this._startVelocity = _clone(transition.velocity);
    this._duration = transition.duration;
    this._curve = transition.curve;
    this._active = true;
    this._callback = callback;
};
TweenTransition.prototype.reset = function reset(startValue, startVelocity) {
    if (this._callback) {
        var callback = this._callback;
        this._callback = undefined;
        callback();
    }
    this.state = _clone(startValue);
    this.velocity = _clone(startVelocity);
    this._startTime = 0;
    this._duration = 0;
    this._updateTime = 0;
    this._startValue = this.state;
    this._startVelocity = this.velocity;
    this._endValue = this.state;
    this._active = false;
};
TweenTransition.prototype.getVelocity = function getVelocity() {
    return this.velocity;
};
TweenTransition.prototype.get = function get(timestamp) {
    this.update(timestamp);
    return this.state;
};
function _calculateVelocity(current, start, curve, duration, t) {
    var velocity;
    var eps = 1e-7;
    var speed = (curve(t) - curve(t - eps)) / eps;
    if (current instanceof Array) {
        velocity = [];
        for (var i = 0; i < current.length; i++) {
            if (typeof current[i] === 'number')
                velocity[i] = speed * (current[i] - start[i]) / duration;
            else
                velocity[i] = 0;
        }
    } else
        velocity = speed * (current - start) / duration;
    return velocity;
}
function _calculateState(start, end, t) {
    var state;
    if (start instanceof Array) {
        state = [];
        for (var i = 0; i < start.length; i++) {
            if (typeof start[i] === 'number')
                state[i] = _interpolate(start[i], end[i], t);
            else
                state[i] = start[i];
        }
    } else
        state = _interpolate(start, end, t);
    return state;
}
TweenTransition.prototype.update = function update(timestamp) {
    if (!this._active) {
        if (this._callback) {
            var callback = this._callback;
            this._callback = undefined;
            callback();
        }
        return;
    }
    if (!timestamp)
        timestamp = Date.now();
    if (this._updateTime >= timestamp)
        return;
    this._updateTime = timestamp;
    var timeSinceStart = timestamp - this._startTime;
    if (timeSinceStart >= this._duration) {
        this.state = this._endValue;
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);
        this._active = false;
    } else if (timeSinceStart < 0) {
        this.state = this._startValue;
        this.velocity = this._startVelocity;
    } else {
        var t = timeSinceStart / this._duration;
        this.state = _calculateState(this._startValue, this._endValue, this._curve(t));
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);
    }
};
TweenTransition.prototype.isActive = function isActive() {
    return this._active;
};
TweenTransition.prototype.halt = function halt() {
    this.reset(this.get());
};
TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);
TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);
TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);
TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);
TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);
TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);
TweenTransition.customCurve = function customCurve(v1, v2) {
    v1 = v1 || 0;
    v2 = v2 || 0;
    return function (t) {
        return v1 * t + (-2 * v1 - v2 + 3) * t * t + (v1 + v2 - 2) * t * t * t;
    };
};
module.exports = TweenTransition;
},{}],92:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var PE = require('../physics/PhysicsEngine');
var Particle = require('../physics/bodies/Particle');
var Spring = require('../physics/forces/Spring');
var Wall = require('../physics/constraints/Wall');
var Vector = require('../math/Vector');
function WallTransition(state) {
    state = state || 0;
    this.endState = new Vector(state);
    this.initState = new Vector();
    this.spring = new Spring({ anchor: this.endState });
    this.wall = new Wall();
    this._restTolerance = 1e-10;
    this._dimensions = 1;
    this._absRestTolerance = this._restTolerance;
    this._callback = undefined;
    this.PE = new PE();
    this.particle = new Particle();
    this.PE.addBody(this.particle);
    this.PE.attach([
        this.wall,
        this.spring
    ], this.particle);
}
WallTransition.SUPPORTS_MULTIPLE = 3;
WallTransition.DEFAULT_OPTIONS = {
    period: 300,
    dampingRatio: 0.5,
    velocity: 0,
    restitution: 0.5
};
function _getEnergy() {
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);
}
function _setAbsoluteRestTolerance() {
    var distance = this.endState.sub(this.initState).normSquared();
    this._absRestTolerance = distance === 0 ? this._restTolerance : this._restTolerance * distance;
}
function _wake() {
    this.PE.wake();
}
function _sleep() {
    this.PE.sleep();
}
function _setTarget(target) {
    this.endState.set(target);
    var dist = this.endState.sub(this.initState).norm();
    this.wall.setOptions({
        distance: this.endState.norm(),
        normal: dist === 0 ? this.particle.velocity.normalize(-1) : this.endState.sub(this.initState).normalize(-1)
    });
    _setAbsoluteRestTolerance.call(this);
}
function _setParticlePosition(p) {
    this.particle.position.set(p);
}
function _setParticleVelocity(v) {
    this.particle.velocity.set(v);
}
function _getParticlePosition() {
    return this._dimensions === 0 ? this.particle.getPosition1D() : this.particle.getPosition();
}
function _getParticleVelocity() {
    return this._dimensions === 0 ? this.particle.getVelocity1D() : this.particle.getVelocity();
}
function _setCallback(callback) {
    this._callback = callback;
}
function _update() {
    if (this.PE.isSleeping()) {
        if (this._callback) {
            var cb = this._callback;
            this._callback = undefined;
            cb();
        }
        return;
    }
    var energy = _getEnergy.call(this);
    if (energy < this._absRestTolerance) {
        _sleep.call(this);
        _setParticlePosition.call(this, this.endState);
        _setParticleVelocity.call(this, [
            0,
            0,
            0
        ]);
    }
}
function _setupDefinition(def) {
    var defaults = WallTransition.DEFAULT_OPTIONS;
    if (def.period === undefined)
        def.period = defaults.period;
    if (def.dampingRatio === undefined)
        def.dampingRatio = defaults.dampingRatio;
    if (def.velocity === undefined)
        def.velocity = defaults.velocity;
    if (def.restitution === undefined)
        def.restitution = defaults.restitution;
    if (def.drift === undefined)
        def.drift = Wall.DEFAULT_OPTIONS.drift;
    if (def.slop === undefined)
        def.slop = Wall.DEFAULT_OPTIONS.slop;
    this.spring.setOptions({
        period: def.period,
        dampingRatio: def.dampingRatio
    });
    this.wall.setOptions({
        restitution: def.restitution,
        drift: def.drift,
        slop: def.slop
    });
    _setParticleVelocity.call(this, def.velocity);
}
WallTransition.prototype.reset = function reset(state, velocity) {
    this._dimensions = state instanceof Array ? state.length : 0;
    this.initState.set(state);
    _setParticlePosition.call(this, state);
    if (velocity)
        _setParticleVelocity.call(this, velocity);
    _setTarget.call(this, state);
    _setCallback.call(this, undefined);
};
WallTransition.prototype.getVelocity = function getVelocity() {
    return _getParticleVelocity.call(this);
};
WallTransition.prototype.setVelocity = function setVelocity(velocity) {
    this.call(this, _setParticleVelocity(velocity));
};
WallTransition.prototype.isActive = function isActive() {
    return !this.PE.isSleeping();
};
WallTransition.prototype.halt = function halt() {
    this.set(this.get());
};
WallTransition.prototype.get = function get() {
    _update.call(this);
    return _getParticlePosition.call(this);
};
WallTransition.prototype.set = function set(state, definition, callback) {
    if (!definition) {
        this.reset(state);
        if (callback)
            callback();
        return;
    }
    this._dimensions = state instanceof Array ? state.length : 0;
    _wake.call(this);
    _setupDefinition.call(this, definition);
    _setTarget.call(this, state);
    _setCallback.call(this, callback);
};
module.exports = WallTransition;
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/constraints/Wall":61,"../physics/forces/Spring":69}],93:[function(require,module,exports){
module.exports = {
  CachedMap: require('./CachedMap'),
  Easing: require('./Easing'),
  MultipleTransition: require('./MultipleTransition'),
  SnapTransition: require('./SnapTransition'),
  SpringTransition: require('./SpringTransition'),
  Transitionable: require('./Transitionable'),
  TransitionableTransform: require('./TransitionableTransform'),
  TweenTransition: require('./TweenTransition'),
  WallTransition: require('./WallTransition')
};

},{"./CachedMap":84,"./Easing":85,"./MultipleTransition":86,"./SnapTransition":87,"./SpringTransition":88,"./Transitionable":89,"./TransitionableTransform":90,"./TweenTransition":91,"./WallTransition":92}],94:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var KeyCodes = {
    0: 48,
    1: 49,
    2: 50,
    3: 51,
    4: 52,
    5: 53,
    6: 54,
    7: 55,
    8: 56,
    9: 57,
    a: 97,
    b: 98,
    c: 99,
    d: 100,
    e: 101,
    f: 102,
    g: 103,
    h: 104,
    i: 105,
    j: 106,
    k: 107,
    l: 108,
    m: 109,
    n: 110,
    o: 111,
    p: 112,
    q: 113,
    r: 114,
    s: 115,
    t: 116,
    u: 117,
    v: 118,
    w: 119,
    x: 120,
    y: 121,
    z: 122,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    ENTER: 13,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
    UP_ARROW: 38,
    DOWN_ARROW: 40,
    SPACE: 32,
    SHIFT: 16,
    TAB: 9
};
module.exports = KeyCodes;
},{}],95:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var FamousEngine = require('../core/Engine');
var _event = 'prerender';
var getTime = window.performance && window.performance.now ? function () {
    return window.performance.now();
} : function () {
    return Date.now();
};
function addTimerFunction(fn) {
    FamousEngine.on(_event, fn);
    return fn;
}
function setTimeout(fn, duration) {
    var t = getTime();
    var callback = function () {
        var t2 = getTime();
        if (t2 - t >= duration) {
            fn.apply(this, arguments);
            FamousEngine.removeListener(_event, callback);
        }
    };
    return addTimerFunction(callback);
}
function setInterval(fn, duration) {
    var t = getTime();
    var callback = function () {
        var t2 = getTime();
        if (t2 - t >= duration) {
            fn.apply(this, arguments);
            t = getTime();
        }
    };
    return addTimerFunction(callback);
}
function after(fn, numTicks) {
    if (numTicks === undefined)
        return undefined;
    var callback = function () {
        numTicks--;
        if (numTicks <= 0) {
            fn.apply(this, arguments);
            clear(callback);
        }
    };
    return addTimerFunction(callback);
}
function every(fn, numTicks) {
    numTicks = numTicks || 1;
    var initial = numTicks;
    var callback = function () {
        numTicks--;
        if (numTicks <= 0) {
            fn.apply(this, arguments);
            numTicks = initial;
        }
    };
    return addTimerFunction(callback);
}
function clear(fn) {
    FamousEngine.removeListener(_event, fn);
}
function debounce(func, wait) {
    var timeout;
    var ctx;
    var timestamp;
    var result;
    var args;
    return function () {
        ctx = this;
        args = arguments;
        timestamp = getTime();
        var fn = function () {
            var last = getTime - timestamp;
            if (last < wait) {
                timeout = setTimeout(fn, wait - last);
            } else {
                timeout = null;
                result = func.apply(ctx, args);
            }
        };
        clear(timeout);
        timeout = setTimeout(fn, wait);
        return result;
    };
}
module.exports = {
    setTimeout: setTimeout,
    setInterval: setInterval,
    debounce: debounce,
    after: after,
    every: every,
    clear: clear
};
},{"../core/Engine":5}],96:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Utility = {};
Utility.Direction = {
    X: 0,
    Y: 1,
    Z: 2
};
Utility.after = function after(count, callback) {
    var counter = count;
    return function () {
        counter--;
        if (counter === 0)
            callback.apply(this, arguments);
    };
};
Utility.loadURL = function loadURL(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function onreadystatechange() {
        if (this.readyState === 4) {
            if (callback)
                callback(this.responseText);
        }
    };
    xhr.open('GET', url);
    xhr.send();
};
Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {
    var element = document.createElement('div');
    element.innerHTML = html;
    var result = document.createDocumentFragment();
    while (element.hasChildNodes())
        result.appendChild(element.firstChild);
    return result;
};
Utility.clone = function clone(b) {
    var a;
    if (typeof b === 'object') {
        a = b instanceof Array ? [] : {};
        for (var key in b) {
            if (typeof b[key] === 'object' && b[key] !== null) {
                if (b[key] instanceof Array) {
                    a[key] = new Array(b[key].length);
                    for (var i = 0; i < b[key].length; i++) {
                        a[key][i] = Utility.clone(b[key][i]);
                    }
                } else {
                    a[key] = Utility.clone(b[key]);
                }
            } else {
                a[key] = b[key];
            }
        }
    } else {
        a = b;
    }
    return a;
};
module.exports = Utility;
},{}],97:[function(require,module,exports){
module.exports = {
  KeyCodes: require('./KeyCodes'),
  Timer: require('./Timer'),
  Utility: require('./Utility')
};

},{"./KeyCodes":94,"./Timer":95,"./Utility":96}],98:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('../core/Entity');
var Transform = require('../core/Transform');
var EventHandler = require('../core/EventHandler');
var OptionsManager = require('../core/OptionsManager');
function ContextualView(options) {
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS || ContextualView.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._id = Entity.register(this);
}
ContextualView.DEFAULT_OPTIONS = {};
ContextualView.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
ContextualView.prototype.getOptions = function getOptions(key) {
    return this._optionsManager.getOptions(key);
};
ContextualView.prototype.render = function render() {
    return this._id;
};
ContextualView.prototype.commit = function commit(context) {
};
module.exports = ContextualView;
},{"../core/Entity":6,"../core/EventHandler":8,"../core/OptionsManager":11,"../core/Transform":16}],99:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('../core/Transform');
var OptionsManager = require('../core/OptionsManager');
var Transitionable = require('../transitions/Transitionable');
var Utility = require('../utilities/Utility');
var SequentialLayout = require('./SequentialLayout');
function Deck(options) {
    SequentialLayout.apply(this, arguments);
    this.state = new Transitionable(0);
    this._isOpen = false;
    this.setOutputFunction(function (input, offset, index) {
        var state = _getState.call(this);
        var positionMatrix = this.options.direction === Utility.Direction.X ? Transform.translate(state * offset, 0, 0.001 * (state - 1) * offset) : Transform.translate(0, state * offset, 0.001 * (state - 1) * offset);
        var output = input.render();
        if (this.options.stackRotation) {
            var amount = this.options.stackRotation * index * (1 - state);
            output = {
                transform: Transform.rotateZ(amount),
                origin: [
                    0.5,
                    0.5
                ],
                target: output
            };
        }
        return {
            transform: positionMatrix,
            size: input.getSize(),
            target: output
        };
    });
}
Deck.prototype = Object.create(SequentialLayout.prototype);
Deck.prototype.constructor = Deck;
Deck.DEFAULT_OPTIONS = OptionsManager.patch(SequentialLayout.DEFAULT_OPTIONS, {
    transition: {
        curve: 'easeOutBounce',
        duration: 500
    },
    stackRotation: 0
});
Deck.prototype.getSize = function getSize() {
    var originalSize = SequentialLayout.prototype.getSize.apply(this, arguments);
    var firstSize = this._items ? this._items.get().getSize() : [
        0,
        0
    ];
    if (!firstSize)
        firstSize = [
            0,
            0
        ];
    var state = _getState.call(this);
    var invState = 1 - state;
    return [
        firstSize[0] * invState + originalSize[0] * state,
        firstSize[1] * invState + originalSize[1] * state
    ];
};
function _getState(returnFinal) {
    if (returnFinal)
        return this._isOpen ? 1 : 0;
    else
        return this.state.get();
}
function _setState(pos, transition, callback) {
    this.state.halt();
    this.state.set(pos, transition, callback);
}
Deck.prototype.isOpen = function isOpen() {
    return this._isOpen;
};
Deck.prototype.open = function open(callback) {
    this._isOpen = true;
    _setState.call(this, 1, this.options.transition, callback);
};
Deck.prototype.close = function close(callback) {
    this._isOpen = false;
    _setState.call(this, 0, this.options.transition, callback);
};
Deck.prototype.toggle = function toggle(callback) {
    if (this._isOpen)
        this.close(callback);
    else
        this.open(callback);
};
module.exports = Deck;
},{"../core/OptionsManager":11,"../core/Transform":16,"../transitions/Transitionable":89,"../utilities/Utility":96,"./SequentialLayout":111}],100:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var RenderNode = require('../core/RenderNode');
var Transform = require('../core/Transform');
var OptionsManager = require('../core/OptionsManager');
var Transitionable = require('../transitions/Transitionable');
var EventHandler = require('../core/EventHandler');
function DrawerLayout(options) {
    this.options = Object.create(DrawerLayout.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._position = new Transitionable(0);
    this._direction = _getDirectionFromSide(this.options.side);
    this._orientation = _getOrientationFromSide(this.options.side);
    this._isOpen = false;
    this._cachedLength = 0;
    this.drawer = new RenderNode();
    this.content = new RenderNode();
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    this._eventInput.on('update', _handleUpdate.bind(this));
    this._eventInput.on('end', _handleEnd.bind(this));
}
var DIRECTION_X = 0;
var DIRECTION_Y = 1;
DrawerLayout.SIDES = {
    LEFT: 0,
    TOP: 1,
    RIGHT: 2,
    BOTTOM: 3
};
DrawerLayout.DEFAULT_OPTIONS = {
    side: DrawerLayout.SIDES.LEFT,
    drawerLength: 0,
    velocityThreshold: 0,
    positionThreshold: 0,
    transition: true
};
function _getDirectionFromSide(side) {
    var SIDES = DrawerLayout.SIDES;
    return side === SIDES.LEFT || side === SIDES.RIGHT ? DIRECTION_X : DIRECTION_Y;
}
function _getOrientationFromSide(side) {
    var SIDES = DrawerLayout.SIDES;
    return side === SIDES.LEFT || side === SIDES.TOP ? 1 : -1;
}
function _resolveNodeSize(node) {
    var options = this.options;
    var size;
    if (options.drawerLength)
        size = options.drawerLength;
    else {
        var nodeSize = node.getSize();
        size = nodeSize ? nodeSize[this._direction] : options.drawerLength;
    }
    return this._orientation * size;
}
function _handleUpdate(data) {
    var newPosition = this.getPosition() + data.delta;
    var MIN_LENGTH;
    var MAX_LENGTH;
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);
    if (this._orientation === 1) {
        MIN_LENGTH = 0;
        MAX_LENGTH = this._cachedLength;
    } else {
        MIN_LENGTH = this._cachedLength;
        MAX_LENGTH = 0;
    }
    if (newPosition > MAX_LENGTH)
        newPosition = MAX_LENGTH;
    else if (newPosition < MIN_LENGTH)
        newPosition = MIN_LENGTH;
    this.setPosition(newPosition);
}
function _handleEnd(data) {
    var velocity = data.velocity;
    var position = this._orientation * this.getPosition();
    var options = this.options;
    var MAX_LENGTH = this._orientation * this._cachedLength;
    var positionThreshold = options.positionThreshold || MAX_LENGTH / 2;
    var velocityThreshold = options.velocityThreshold;
    if (options.transition instanceof Object)
        options.transition.velocity = data.velocity;
    if (position === 0) {
        this._isOpen = false;
        return;
    }
    if (position === MAX_LENGTH) {
        this._isOpen = true;
        return;
    }
    var shouldToggle = Math.abs(velocity) > velocityThreshold || !this._isOpen && position > positionThreshold || this._isOpen && position < positionThreshold;
    if (shouldToggle)
        this.toggle();
    else
        this.reset();
}
DrawerLayout.prototype.setOptions = function setOptions(options) {
    this._optionsManager.setOptions(options);
    if (options.side !== undefined) {
        this._direction = _getDirectionFromSide(options.side);
        this._orientation = _getOrientationFromSide(options.side);
    }
};
DrawerLayout.prototype.open = function open(transition, callback) {
    if (transition instanceof Function)
        callback = transition;
    if (transition === undefined)
        transition = this.options.transition;
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);
    this.setPosition(this._cachedLength, transition, callback);
    if (!this._isOpen) {
        this._isOpen = true;
        this._eventOutput.emit('open');
    }
};
DrawerLayout.prototype.close = function close(transition, callback) {
    if (transition instanceof Function)
        callback = transition;
    if (transition === undefined)
        transition = this.options.transition;
    this.setPosition(0, transition, callback);
    if (this._isOpen) {
        this._isOpen = false;
        this._eventOutput.emit('close');
    }
};
DrawerLayout.prototype.setPosition = function setPosition(position, transition, callback) {
    if (this._position.isActive())
        this._position.halt();
    this._position.set(position, transition, callback);
};
DrawerLayout.prototype.getPosition = function getPosition() {
    return this._position.get();
};
DrawerLayout.prototype.setProgress = function setProgress(progress, transition, callback) {
    return this._position.set(progress * this._cachedLength, transition, callback);
};
DrawerLayout.prototype.getProgress = function getProgress() {
    return this._position.get() / this._cachedLength;
};
DrawerLayout.prototype.toggle = function toggle(transition) {
    if (this._isOpen)
        this.close(transition);
    else
        this.open(transition);
};
DrawerLayout.prototype.reset = function reset(transition) {
    if (this._isOpen)
        this.open(transition);
    else
        this.close(transition);
};
DrawerLayout.prototype.isOpen = function isOpen(transition) {
    return this._isOpen;
};
DrawerLayout.prototype.render = function render() {
    var position = this.getPosition();
    if (!this._isOpen && (position < 0 && this._orientation === 1) || position > 0 && this._orientation === -1) {
        position = 0;
        this.setPosition(position);
    }
    var contentTransform = this._direction === DIRECTION_X ? Transform.translate(position, 0, 0) : Transform.translate(0, position, 0);
    return [
        {
            transform: Transform.behind,
            target: this.drawer.render()
        },
        {
            transform: contentTransform,
            target: this.content.render()
        }
    ];
};
module.exports = DrawerLayout;
},{"../core/EventHandler":8,"../core/OptionsManager":11,"../core/RenderNode":12,"../core/Transform":16,"../transitions/Transitionable":89}],101:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var CachedMap = require('../transitions/CachedMap');
var Entity = require('../core/Entity');
var EventHandler = require('../core/EventHandler');
var Transform = require('../core/Transform');
var RenderController = require('./RenderController');
function EdgeSwapper(options) {
    this._currentTarget = null;
    this._size = [
        undefined,
        undefined
    ];
    this._controller = new RenderController(options);
    this._controller.inTransformFrom(CachedMap.create(_transformMap.bind(this, 0.0001)));
    this._controller.outTransformFrom(CachedMap.create(_transformMap.bind(this, -0.0001)));
    this._eventInput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    this._entityId = Entity.register(this);
    if (options)
        this.setOptions(options);
}
function _transformMap(zMax, progress) {
    return Transform.translate(this._size[0] * (1 - progress), 0, zMax * (1 - progress));
}
EdgeSwapper.prototype.show = function show(content) {
    if (this._currentTarget)
        this._eventInput.unpipe(this._currentTarget);
    this._currentTarget = content;
    if (this._currentTarget && this._currentTarget.trigger)
        this._eventInput.pipe(this._currentTarget);
    this._controller.show.apply(this._controller, arguments);
};
EdgeSwapper.prototype.setOptions = function setOptions(options) {
    this._controller.setOptions(options);
};
EdgeSwapper.prototype.render = function render() {
    return this._entityId;
};
EdgeSwapper.prototype.commit = function commit(context) {
    this._size[0] = context.size[0];
    this._size[1] = context.size[1];
    return {
        transform: context.transform,
        opacity: context.opacity,
        origin: context.origin,
        size: context.size,
        target: this._controller.render()
    };
};
module.exports = EdgeSwapper;
},{"../core/Entity":6,"../core/EventHandler":8,"../core/Transform":16,"../transitions/CachedMap":84,"./RenderController":107}],102:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('../core/Entity');
var Transform = require('../core/Transform');
var OptionsManager = require('../core/OptionsManager');
var EventHandler = require('../core/EventHandler');
var Transitionable = require('../transitions/Transitionable');
function FlexibleLayout(options) {
    this.options = Object.create(FlexibleLayout.DEFAULT_OPTIONS);
    this.optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this.id = Entity.register(this);
    this._ratios = new Transitionable(this.options.ratios);
    this._nodes = [];
    this._size = [
        0,
        0
    ];
    this._cachedDirection = null;
    this._cachedLengths = [];
    this._cachedTransforms = null;
    this._ratiosDirty = false;
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
}
FlexibleLayout.DIRECTION_X = 0;
FlexibleLayout.DIRECTION_Y = 1;
FlexibleLayout.DEFAULT_OPTIONS = {
    direction: FlexibleLayout.DIRECTION_X,
    transition: false,
    ratios: []
};
function _reflow(ratios, length, direction) {
    var currTransform;
    var translation = 0;
    var flexLength = length;
    var ratioSum = 0;
    var ratio;
    var node;
    var i;
    this._cachedLengths = [];
    this._cachedTransforms = [];
    for (i = 0; i < ratios.length; i++) {
        ratio = ratios[i];
        node = this._nodes[i];
        if (typeof ratio !== 'number')
            flexLength -= node.getSize()[direction] || 0;
        else
            ratioSum += ratio;
    }
    for (i = 0; i < ratios.length; i++) {
        node = this._nodes[i];
        ratio = ratios[i];
        length = typeof ratio === 'number' ? flexLength * ratio / ratioSum : node.getSize()[direction];
        currTransform = direction === FlexibleLayout.DIRECTION_X ? Transform.translate(translation, 0, 0) : Transform.translate(0, translation, 0);
        this._cachedTransforms.push(currTransform);
        this._cachedLengths.push(length);
        translation += length;
    }
}
function _trueSizedDirty(ratios, direction) {
    for (var i = 0; i < ratios.length; i++) {
        if (typeof ratios[i] !== 'number') {
            if (this._nodes[i].getSize()[direction] !== this._cachedLengths[i])
                return true;
        }
    }
    return false;
}
FlexibleLayout.prototype.render = function render() {
    return this.id;
};
FlexibleLayout.prototype.setOptions = function setOptions(options) {
    this.optionsManager.setOptions(options);
};
FlexibleLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {
    this._nodes = sequence;
    if (this._ratios.get().length === 0) {
        var ratios = [];
        for (var i = 0; i < this._nodes.length; i++)
            ratios.push(1);
        this.setRatios(ratios);
    }
};
FlexibleLayout.prototype.setRatios = function setRatios(ratios, transition, callback) {
    if (transition === undefined)
        transition = this.options.transition;
    var currRatios = this._ratios;
    if (currRatios.get().length === 0)
        transition = undefined;
    if (currRatios.isActive())
        currRatios.halt();
    currRatios.set(ratios, transition, callback);
    this._ratiosDirty = true;
};
FlexibleLayout.prototype.getSize = function getSize() {
    return this._size;
};
FlexibleLayout.prototype.commit = function commit(context) {
    var parentSize = context.size;
    var parentTransform = context.transform;
    var parentOrigin = context.origin;
    var parentOpacity = context.opacity;
    var ratios = this._ratios.get();
    var direction = this.options.direction;
    var length = parentSize[direction];
    var size;
    if (length !== this._size[direction] || this._ratiosDirty || this._ratios.isActive() || direction !== this._cachedDirection || _trueSizedDirty.call(this, ratios, direction)) {
        _reflow.call(this, ratios, length, direction);
        if (length !== this._size[direction]) {
            this._size[0] = parentSize[0];
            this._size[1] = parentSize[1];
        }
        if (direction !== this._cachedDirection)
            this._cachedDirection = direction;
        if (this._ratiosDirty)
            this._ratiosDirty = false;
    }
    var result = [];
    for (var i = 0; i < ratios.length; i++) {
        size = [
            undefined,
            undefined
        ];
        length = this._cachedLengths[i];
        size[direction] = length;
        result.push({
            transform: this._cachedTransforms[i],
            size: size,
            target: this._nodes[i].render()
        });
    }
    if (parentSize && (parentOrigin[0] !== 0 && parentOrigin[1] !== 0))
        parentTransform = Transform.moveThen([
            -parentSize[0] * parentOrigin[0],
            -parentSize[1] * parentOrigin[1],
            0
        ], parentTransform);
    return {
        transform: parentTransform,
        size: parentSize,
        opacity: parentOpacity,
        target: result
    };
};
module.exports = FlexibleLayout;
},{"../core/Entity":6,"../core/EventHandler":8,"../core/OptionsManager":11,"../core/Transform":16,"../transitions/Transitionable":89}],103:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('../core/Transform');
var Transitionable = require('../transitions/Transitionable');
var RenderNode = require('../core/RenderNode');
var OptionsManager = require('../core/OptionsManager');
function Flipper(options) {
    this.options = Object.create(Flipper.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this.angle = new Transitionable(0);
    this.frontNode = undefined;
    this.backNode = undefined;
    this.flipped = false;
}
Flipper.DIRECTION_X = 0;
Flipper.DIRECTION_Y = 1;
var SEPERATION_LENGTH = 1;
Flipper.DEFAULT_OPTIONS = {
    transition: true,
    direction: Flipper.DIRECTION_X
};
Flipper.prototype.flip = function flip(transition, callback) {
    var angle = this.flipped ? 0 : Math.PI;
    this.setAngle(angle, transition, callback);
    this.flipped = !this.flipped;
};
Flipper.prototype.setAngle = function setAngle(angle, transition, callback) {
    if (transition === undefined)
        transition = this.options.transition;
    if (this.angle.isActive())
        this.angle.halt();
    this.angle.set(angle, transition, callback);
};
Flipper.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
Flipper.prototype.setFront = function setFront(node) {
    this.frontNode = node;
};
Flipper.prototype.setBack = function setBack(node) {
    this.backNode = node;
};
Flipper.prototype.render = function render() {
    var angle = this.angle.get();
    var frontTransform;
    var backTransform;
    if (this.options.direction === Flipper.DIRECTION_X) {
        frontTransform = Transform.rotateY(angle);
        backTransform = Transform.rotateY(angle + Math.PI);
    } else {
        frontTransform = Transform.rotateX(angle);
        backTransform = Transform.rotateX(angle + Math.PI);
    }
    var result = [];
    if (this.frontNode) {
        result.push({
            transform: frontTransform,
            target: this.frontNode.render()
        });
    }
    if (this.backNode) {
        result.push({
            transform: Transform.moveThen([
                0,
                0,
                SEPERATION_LENGTH
            ], backTransform),
            target: this.backNode.render()
        });
    }
    return result;
};
module.exports = Flipper;
},{"../core/OptionsManager":11,"../core/RenderNode":12,"../core/Transform":16,"../transitions/Transitionable":89}],104:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('../core/Entity');
var RenderNode = require('../core/RenderNode');
var Transform = require('../core/Transform');
var ViewSequence = require('../core/ViewSequence');
var EventHandler = require('../core/EventHandler');
var Modifier = require('../core/Modifier');
var OptionsManager = require('../core/OptionsManager');
var Transitionable = require('../transitions/Transitionable');
var TransitionableTransform = require('../transitions/TransitionableTransform');
function GridLayout(options) {
    this.options = Object.create(GridLayout.DEFAULT_OPTIONS);
    this.optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this.id = Entity.register(this);
    this._modifiers = [];
    this._states = [];
    this._contextSizeCache = [
        0,
        0
    ];
    this._dimensionsCache = [
        0,
        0
    ];
    this._activeCount = 0;
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
}
function _reflow(size, cols, rows) {
    var usableSize = [
        size[0],
        size[1]
    ];
    usableSize[0] -= this.options.gutterSize[0] * (cols - 1);
    usableSize[1] -= this.options.gutterSize[1] * (rows - 1);
    var rowSize = Math.round(usableSize[1] / rows);
    var colSize = Math.round(usableSize[0] / cols);
    var currY = 0;
    var currX;
    var currIndex = 0;
    for (var i = 0; i < rows; i++) {
        currX = 0;
        for (var j = 0; j < cols; j++) {
            if (this._modifiers[currIndex] === undefined) {
                _createModifier.call(this, currIndex, [
                    colSize,
                    rowSize
                ], [
                    currX,
                    currY,
                    0
                ], 1);
            } else {
                _animateModifier.call(this, currIndex, [
                    colSize,
                    rowSize
                ], [
                    currX,
                    currY,
                    0
                ], 1);
            }
            currIndex++;
            currX += colSize + this.options.gutterSize[0];
        }
        currY += rowSize + this.options.gutterSize[1];
    }
    this._dimensionsCache = [
        this.options.dimensions[0],
        this.options.dimensions[1]
    ];
    this._contextSizeCache = [
        size[0],
        size[1]
    ];
    this._activeCount = rows * cols;
    for (i = this._activeCount; i < this._modifiers.length; i++)
        _animateModifier.call(this, i, [
            Math.round(colSize),
            Math.round(rowSize)
        ], [
            0,
            0
        ], 0);
    this._eventOutput.emit('reflow');
}
function _createModifier(index, size, position, opacity) {
    var transitionItem = {
        transform: new TransitionableTransform(Transform.translate.apply(null, position)),
        opacity: new Transitionable(opacity),
        size: new Transitionable(size)
    };
    var modifier = new Modifier({
        transform: transitionItem.transform,
        opacity: transitionItem.opacity,
        size: transitionItem.size
    });
    this._states[index] = transitionItem;
    this._modifiers[index] = modifier;
}
function _animateModifier(index, size, position, opacity) {
    var currState = this._states[index];
    var currSize = currState.size;
    var currOpacity = currState.opacity;
    var currTransform = currState.transform;
    var transition = this.options.transition;
    currTransform.halt();
    currOpacity.halt();
    currSize.halt();
    currTransform.setTranslate(position, transition);
    currSize.set(size, transition);
    currOpacity.set(opacity, transition);
}
GridLayout.DEFAULT_OPTIONS = {
    dimensions: [
        1,
        1
    ],
    transition: false,
    gutterSize: [
        0,
        0
    ]
};
GridLayout.prototype.render = function render() {
    return this.id;
};
GridLayout.prototype.setOptions = function setOptions(options) {
    return this.optionsManager.setOptions(options);
};
GridLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {
    if (sequence instanceof Array)
        sequence = new ViewSequence(sequence);
    this.sequence = sequence;
};
GridLayout.prototype.getSize = function getSize() {
    return this._contextSizeCache;
};
GridLayout.prototype.commit = function commit(context) {
    var transform = context.transform;
    var opacity = context.opacity;
    var origin = context.origin;
    var size = context.size;
    var cols = this.options.dimensions[0];
    var rows = this.options.dimensions[1];
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || cols !== this._dimensionsCache[0] || rows !== this._dimensionsCache[1]) {
        _reflow.call(this, size, cols, rows);
    }
    var sequence = this.sequence;
    var result = [];
    var currIndex = 0;
    while (sequence && currIndex < this._modifiers.length) {
        var item = sequence.get();
        var modifier = this._modifiers[currIndex];
        if (currIndex >= this._activeCount && this._states[currIndex].opacity.isActive()) {
            this._modifiers.splice(currIndex, 1);
            this._states.splice(currIndex, 1);
        }
        if (item) {
            result.push(modifier.modify({
                origin: origin,
                target: item.render()
            }));
        }
        sequence = sequence.getNext();
        currIndex++;
    }
    if (size)
        transform = Transform.moveThen([
            -size[0] * origin[0],
            -size[1] * origin[1],
            0
        ], transform);
    return {
        transform: transform,
        opacity: opacity,
        size: size,
        target: result
    };
};
module.exports = GridLayout;
},{"../core/Entity":6,"../core/EventHandler":8,"../core/Modifier":10,"../core/OptionsManager":11,"../core/RenderNode":12,"../core/Transform":16,"../core/ViewSequence":18,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90}],105:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('../core/Entity');
var RenderNode = require('../core/RenderNode');
var Transform = require('../core/Transform');
var OptionsManager = require('../core/OptionsManager');
function HeaderFooterLayout(options) {
    this.options = Object.create(HeaderFooterLayout.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._entityId = Entity.register(this);
    this.header = new RenderNode();
    this.footer = new RenderNode();
    this.content = new RenderNode();
}
HeaderFooterLayout.DIRECTION_X = 0;
HeaderFooterLayout.DIRECTION_Y = 1;
HeaderFooterLayout.DEFAULT_OPTIONS = {
    direction: HeaderFooterLayout.DIRECTION_Y,
    headerSize: undefined,
    footerSize: undefined,
    defaultHeaderSize: 0,
    defaultFooterSize: 0
};
HeaderFooterLayout.prototype.render = function render() {
    return this._entityId;
};
HeaderFooterLayout.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
function _resolveNodeSize(node, defaultSize) {
    var nodeSize = node.getSize();
    return nodeSize ? nodeSize[this.options.direction] : defaultSize;
}
function _outputTransform(offset) {
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X)
        return Transform.translate(offset, 0, 0);
    else
        return Transform.translate(0, offset, 0);
}
function _finalSize(directionSize, size) {
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X)
        return [
            directionSize,
            size[1]
        ];
    else
        return [
            size[0],
            directionSize
        ];
}
HeaderFooterLayout.prototype.commit = function commit(context) {
    var transform = context.transform;
    var origin = context.origin;
    var size = context.size;
    var opacity = context.opacity;
    var headerSize = this.options.headerSize !== undefined ? this.options.headerSize : _resolveNodeSize.call(this, this.header, this.options.defaultHeaderSize);
    var footerSize = this.options.footerSize !== undefined ? this.options.footerSize : _resolveNodeSize.call(this, this.footer, this.options.defaultFooterSize);
    var contentSize = size[this.options.direction] - headerSize - footerSize;
    if (size)
        transform = Transform.moveThen([
            -size[0] * origin[0],
            -size[1] * origin[1],
            0
        ], transform);
    var result = [
        {
            size: _finalSize.call(this, headerSize, size),
            target: this.header.render()
        },
        {
            transform: _outputTransform.call(this, headerSize),
            size: _finalSize.call(this, contentSize, size),
            target: this.content.render()
        },
        {
            transform: _outputTransform.call(this, headerSize + contentSize),
            size: _finalSize.call(this, footerSize, size),
            target: this.footer.render()
        }
    ];
    return {
        transform: transform,
        opacity: opacity,
        size: size,
        target: result
    };
};
module.exports = HeaderFooterLayout;
},{"../core/Entity":6,"../core/OptionsManager":11,"../core/RenderNode":12,"../core/Transform":16}],106:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Transform = require('../core/Transform');
var Modifier = require('../core/Modifier');
var RenderNode = require('../core/RenderNode');
var Utility = require('../utilities/Utility');
var OptionsManager = require('../core/OptionsManager');
var Transitionable = require('../transitions/Transitionable');
var TransitionableTransform = require('../transitions/TransitionableTransform');
function Lightbox(options) {
    this.options = Object.create(Lightbox.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this._showing = false;
    this.nodes = [];
    this.transforms = [];
    this.states = [];
}
Lightbox.DEFAULT_OPTIONS = {
    inTransform: Transform.scale(0.001, 0.001, 0.001),
    inOpacity: 0,
    inOrigin: [
        0.5,
        0.5
    ],
    inAlign: [
        0.5,
        0.5
    ],
    outTransform: Transform.scale(0.001, 0.001, 0.001),
    outOpacity: 0,
    outOrigin: [
        0.5,
        0.5
    ],
    outAlign: [
        0.5,
        0.5
    ],
    showTransform: Transform.identity,
    showOpacity: 1,
    showOrigin: [
        0.5,
        0.5
    ],
    showAlign: [
        0.5,
        0.5
    ],
    inTransition: true,
    outTransition: true,
    overlap: false
};
Lightbox.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
Lightbox.prototype.show = function show(renderable, transition, callback) {
    if (!renderable) {
        return this.hide(callback);
    }
    if (transition instanceof Function) {
        callback = transition;
        transition = undefined;
    }
    if (this._showing) {
        if (this.options.overlap)
            this.hide();
        else {
            return this.hide(this.show.bind(this, renderable, transition, callback));
        }
    }
    this._showing = true;
    var stateItem = {
        transform: new TransitionableTransform(this.options.inTransform),
        origin: new Transitionable(this.options.inOrigin),
        align: new Transitionable(this.options.inAlign),
        opacity: new Transitionable(this.options.inOpacity)
    };
    var transform = new Modifier({
        transform: stateItem.transform,
        opacity: stateItem.opacity,
        origin: stateItem.origin,
        align: stateItem.align
    });
    var node = new RenderNode();
    node.add(transform).add(renderable);
    this.nodes.push(node);
    this.states.push(stateItem);
    this.transforms.push(transform);
    var _cb = callback ? Utility.after(3, callback) : undefined;
    if (!transition)
        transition = this.options.inTransition;
    stateItem.transform.set(this.options.showTransform, transition, _cb);
    stateItem.opacity.set(this.options.showOpacity, transition, _cb);
    stateItem.origin.set(this.options.showOrigin, transition, _cb);
    stateItem.align.set(this.options.showAlign, transition, _cb);
};
Lightbox.prototype.hide = function hide(transition, callback) {
    if (!this._showing)
        return;
    this._showing = false;
    if (transition instanceof Function) {
        callback = transition;
        transition = undefined;
    }
    var node = this.nodes[this.nodes.length - 1];
    var transform = this.transforms[this.transforms.length - 1];
    var stateItem = this.states[this.states.length - 1];
    var _cb = Utility.after(3, function () {
        this.nodes.splice(this.nodes.indexOf(node), 1);
        this.states.splice(this.states.indexOf(stateItem), 1);
        this.transforms.splice(this.transforms.indexOf(transform), 1);
        if (callback)
            callback.call(this);
    }.bind(this));
    if (!transition)
        transition = this.options.outTransition;
    stateItem.transform.set(this.options.outTransform, transition, _cb);
    stateItem.opacity.set(this.options.outOpacity, transition, _cb);
    stateItem.origin.set(this.options.outOrigin, transition, _cb);
    stateItem.align.set(this.options.outAlign, transition, _cb);
};
Lightbox.prototype.render = function render() {
    var result = [];
    for (var i = 0; i < this.nodes.length; i++) {
        result.push(this.nodes[i].render());
    }
    return result;
};
module.exports = Lightbox;
},{"../core/Modifier":10,"../core/OptionsManager":11,"../core/RenderNode":12,"../core/Transform":16,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90,"../utilities/Utility":96}],107:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Modifier = require('../core/Modifier');
var RenderNode = require('../core/RenderNode');
var Transform = require('../core/Transform');
var Transitionable = require('../transitions/Transitionable');
var View = require('../core/View');
function RenderController(options) {
    View.apply(this, arguments);
    this._showing = -1;
    this._outgoingRenderables = [];
    this._nextRenderable = null;
    this._renderables = [];
    this._nodes = [];
    this._modifiers = [];
    this._states = [];
    this.inTransformMap = RenderController.DefaultMap.transform;
    this.inOpacityMap = RenderController.DefaultMap.opacity;
    this.inOriginMap = RenderController.DefaultMap.origin;
    this.inAlignMap = RenderController.DefaultMap.align;
    this.outTransformMap = RenderController.DefaultMap.transform;
    this.outOpacityMap = RenderController.DefaultMap.opacity;
    this.outOriginMap = RenderController.DefaultMap.origin;
    this.outAlignMap = RenderController.DefaultMap.align;
    this._output = [];
}
RenderController.prototype = Object.create(View.prototype);
RenderController.prototype.constructor = RenderController;
RenderController.DEFAULT_OPTIONS = {
    inTransition: true,
    outTransition: true,
    overlap: true
};
RenderController.DefaultMap = {
    transform: function () {
        return Transform.identity;
    },
    opacity: function (progress) {
        return progress;
    },
    origin: null,
    align: null
};
function _mappedState(map, state) {
    return map(state.get());
}
RenderController.prototype.inTransformFrom = function inTransformFrom(transform) {
    if (transform instanceof Function)
        this.inTransformMap = transform;
    else if (transform && transform.get)
        this.inTransformMap = transform.get.bind(transform);
    else
        throw new Error('inTransformFrom takes only function or getter object');
    return this;
};
RenderController.prototype.inOpacityFrom = function inOpacityFrom(opacity) {
    if (opacity instanceof Function)
        this.inOpacityMap = opacity;
    else if (opacity && opacity.get)
        this.inOpacityMap = opacity.get.bind(opacity);
    else
        throw new Error('inOpacityFrom takes only function or getter object');
    return this;
};
RenderController.prototype.inOriginFrom = function inOriginFrom(origin) {
    if (origin instanceof Function)
        this.inOriginMap = origin;
    else if (origin && origin.get)
        this.inOriginMap = origin.get.bind(origin);
    else
        throw new Error('inOriginFrom takes only function or getter object');
    return this;
};
RenderController.prototype.inAlignFrom = function inAlignFrom(align) {
    if (align instanceof Function)
        this.inAlignMap = align;
    else if (align && align.get)
        this.inAlignMap = align.get.bind(align);
    else
        throw new Error('inAlignFrom takes only function or getter object');
    return this;
};
RenderController.prototype.outTransformFrom = function outTransformFrom(transform) {
    if (transform instanceof Function)
        this.outTransformMap = transform;
    else if (transform && transform.get)
        this.outTransformMap = transform.get.bind(transform);
    else
        throw new Error('outTransformFrom takes only function or getter object');
    return this;
};
RenderController.prototype.outOpacityFrom = function outOpacityFrom(opacity) {
    if (opacity instanceof Function)
        this.outOpacityMap = opacity;
    else if (opacity && opacity.get)
        this.outOpacityMap = opacity.get.bind(opacity);
    else
        throw new Error('outOpacityFrom takes only function or getter object');
    return this;
};
RenderController.prototype.outOriginFrom = function outOriginFrom(origin) {
    if (origin instanceof Function)
        this.outOriginMap = origin;
    else if (origin && origin.get)
        this.outOriginMap = origin.get.bind(origin);
    else
        throw new Error('outOriginFrom takes only function or getter object');
    return this;
};
RenderController.prototype.outAlignFrom = function outAlignFrom(align) {
    if (align instanceof Function)
        this.outAlignMap = align;
    else if (align && align.get)
        this.outAlignMap = align.get.bind(align);
    else
        throw new Error('outAlignFrom takes only function or getter object');
    return this;
};
RenderController.prototype.show = function show(renderable, transition, callback) {
    if (!renderable) {
        return this.hide(callback);
    }
    if (transition instanceof Function) {
        callback = transition;
        transition = null;
    }
    if (this._showing >= 0) {
        if (this.options.overlap)
            this.hide();
        else {
            if (this._nextRenderable) {
                this._nextRenderable = renderable;
            } else {
                this._nextRenderable = renderable;
                this.hide(function () {
                    if (this._nextRenderable === renderable)
                        this.show(this._nextRenderable, callback);
                    this._nextRenderable = null;
                });
            }
            return undefined;
        }
    }
    var state = null;
    var renderableIndex = this._renderables.indexOf(renderable);
    if (renderableIndex >= 0) {
        this._showing = renderableIndex;
        state = this._states[renderableIndex];
        state.halt();
        var outgoingIndex = this._outgoingRenderables.indexOf(renderable);
        if (outgoingIndex >= 0)
            this._outgoingRenderables.splice(outgoingIndex, 1);
    } else {
        state = new Transitionable(0);
        var modifier = new Modifier({
            transform: this.inTransformMap ? _mappedState.bind(this, this.inTransformMap, state) : null,
            opacity: this.inOpacityMap ? _mappedState.bind(this, this.inOpacityMap, state) : null,
            origin: this.inOriginMap ? _mappedState.bind(this, this.inOriginMap, state) : null,
            align: this.inAlignMap ? _mappedState.bind(this, this.inAlignMap, state) : null
        });
        var node = new RenderNode();
        node.add(modifier).add(renderable);
        this._showing = this._nodes.length;
        this._nodes.push(node);
        this._modifiers.push(modifier);
        this._states.push(state);
        this._renderables.push(renderable);
    }
    if (!transition)
        transition = this.options.inTransition;
    state.set(1, transition, callback);
};
RenderController.prototype.hide = function hide(transition, callback) {
    if (this._showing < 0)
        return;
    var index = this._showing;
    this._showing = -1;
    if (transition instanceof Function) {
        callback = transition;
        transition = undefined;
    }
    var node = this._nodes[index];
    var modifier = this._modifiers[index];
    var state = this._states[index];
    var renderable = this._renderables[index];
    modifier.transformFrom(this.outTransformMap ? _mappedState.bind(this, this.outTransformMap, state) : null);
    modifier.opacityFrom(this.outOpacityMap ? _mappedState.bind(this, this.outOpacityMap, state) : null);
    modifier.originFrom(this.outOriginMap ? _mappedState.bind(this, this.outOriginMap, state) : null);
    modifier.alignFrom(this.outAlignMap ? _mappedState.bind(this, this.outAlignMap, state) : null);
    if (this._outgoingRenderables.indexOf(renderable) < 0)
        this._outgoingRenderables.push(renderable);
    if (!transition)
        transition = this.options.outTransition;
    state.halt();
    state.set(0, transition, function (node, modifier, state, renderable) {
        if (this._outgoingRenderables.indexOf(renderable) >= 0) {
            var index = this._nodes.indexOf(node);
            this._nodes.splice(index, 1);
            this._modifiers.splice(index, 1);
            this._states.splice(index, 1);
            this._renderables.splice(index, 1);
            this._outgoingRenderables.splice(this._outgoingRenderables.indexOf(renderable), 1);
            if (this._showing >= index)
                this._showing--;
        }
        if (callback)
            callback.call(this);
    }.bind(this, node, modifier, state, renderable));
};
RenderController.prototype.render = function render() {
    var result = this._output;
    if (result.length > this._nodes.length)
        result.splice(this._nodes.length);
    for (var i = 0; i < this._nodes.length; i++) {
        result[i] = this._nodes[i].render();
    }
    return result;
};
module.exports = RenderController;
},{"../core/Modifier":10,"../core/RenderNode":12,"../core/Transform":16,"../core/View":17,"../transitions/Transitionable":89}],108:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var ContainerSurface = require('../surfaces/ContainerSurface');
var EventHandler = require('../core/EventHandler');
var Scrollview = require('./Scrollview');
var Utility = require('../utilities/Utility');
var OptionsManager = require('../core/OptionsManager');
function ScrollContainer(options) {
    this.options = Object.create(ScrollContainer.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this.container = new ContainerSurface(this.options.container);
    this.scrollview = new Scrollview(this.options.scrollview);
    this.container.add(this.scrollview);
    this._eventInput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    this._eventInput.pipe(this.scrollview);
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
    this.container.pipe(this._eventOutput);
    this.scrollview.pipe(this._eventOutput);
}
ScrollContainer.DEFAULT_OPTIONS = {
    container: { properties: { overflow: 'hidden' } },
    scrollview: {}
};
ScrollContainer.prototype.setOptions = function setOptions(options) {
    return this._optionsManager.setOptions(options);
};
ScrollContainer.prototype.sequenceFrom = function sequenceFrom() {
    return this.scrollview.sequenceFrom.apply(this.scrollview, arguments);
};
ScrollContainer.prototype.getSize = function getSize() {
    return this.container.getSize.apply(this.container, arguments);
};
ScrollContainer.prototype.render = function render() {
    return this.container.render();
};
module.exports = ScrollContainer;
},{"../core/EventHandler":8,"../core/OptionsManager":11,"../surfaces/ContainerSurface":76,"../utilities/Utility":96,"./Scrollview":110}],109:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Entity = require('../core/Entity');
var Group = require('../core/Group');
var OptionsManager = require('../core/OptionsManager');
var Transform = require('../core/Transform');
var Utility = require('../utilities/Utility');
var ViewSequence = require('../core/ViewSequence');
var EventHandler = require('../core/EventHandler');
function Scroller(options) {
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    if (options)
        this._optionsManager.setOptions(options);
    this._node = null;
    this._position = 0;
    this._positionOffset = 0;
    this._positionGetter = null;
    this._outputFunction = null;
    this._masterOutputFunction = null;
    this.outputFrom();
    this._onEdge = 0;
    this.group = new Group();
    this.group.add({ render: _innerRender.bind(this) });
    this._entityId = Entity.register(this);
    this._size = [
        undefined,
        undefined
    ];
    this._contextSize = [
        undefined,
        undefined
    ];
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
}
Scroller.DEFAULT_OPTIONS = {
    direction: Utility.Direction.Y,
    margin: 0,
    clipSize: undefined,
    groupScroll: false
};
var EDGE_TOLERANCE = 0;
function _sizeForDir(size) {
    if (!size)
        size = this._contextSize;
    var dimension = this.options.direction;
    return size[dimension] === undefined ? this._contextSize[dimension] : size[dimension];
}
function _output(node, offset, target) {
    var size = node.getSize ? node.getSize() : this._contextSize;
    var transform = this._outputFunction(offset);
    target.push({
        transform: transform,
        target: node.render()
    });
    return _sizeForDir.call(this, size);
}
function _getClipSize() {
    if (this.options.clipSize !== undefined)
        return this.options.clipSize;
    if (this._contextSize[this.options.direction] > this.getCumulativeSize()[this.options.direction]) {
        return _sizeForDir.call(this, this.getCumulativeSize());
    } else {
        return _sizeForDir.call(this, this._contextSize);
    }
}
Scroller.prototype.getCumulativeSize = function (index) {
    if (index === undefined)
        index = this._node._.cumulativeSizes.length - 1;
    return this._node._.getSize(index);
};
Scroller.prototype.setOptions = function setOptions(options) {
    if (options.groupScroll !== this.options.groupScroll) {
        if (options.groupScroll)
            this.group.pipe(this._eventOutput);
        else
            this.group.unpipe(this._eventOutput);
    }
    this._optionsManager.setOptions(options);
};
Scroller.prototype.onEdge = function onEdge() {
    return this._onEdge;
};
Scroller.prototype.outputFrom = function outputFrom(fn, masterFn) {
    if (!fn) {
        fn = function (offset) {
            return this.options.direction === Utility.Direction.X ? Transform.translate(offset, 0) : Transform.translate(0, offset);
        }.bind(this);
        if (!masterFn)
            masterFn = fn;
    }
    this._outputFunction = fn;
    this._masterOutputFunction = masterFn ? masterFn : function (offset) {
        return Transform.inverse(fn(-offset));
    };
};
Scroller.prototype.positionFrom = function positionFrom(position) {
    if (position instanceof Function)
        this._positionGetter = position;
    else if (position && position.get)
        this._positionGetter = position.get.bind(position);
    else {
        this._positionGetter = null;
        this._position = position;
    }
    if (this._positionGetter)
        this._position = this._positionGetter.call(this);
};
Scroller.prototype.sequenceFrom = function sequenceFrom(node) {
    if (node instanceof Array)
        node = new ViewSequence({ array: node });
    this._node = node;
    this._positionOffset = 0;
};
Scroller.prototype.getSize = function getSize(actual) {
    return actual ? this._contextSize : this._size;
};
Scroller.prototype.render = function render() {
    if (!this._node)
        return null;
    if (this._positionGetter)
        this._position = this._positionGetter.call(this);
    return this._entityId;
};
Scroller.prototype.commit = function commit(context) {
    var transform = context.transform;
    var opacity = context.opacity;
    var origin = context.origin;
    var size = context.size;
    if (!this.options.clipSize && (size[0] !== this._contextSize[0] || size[1] !== this._contextSize[1])) {
        this._onEdge = 0;
        this._contextSize[0] = size[0];
        this._contextSize[1] = size[1];
        if (this.options.direction === Utility.Direction.X) {
            this._size[0] = _getClipSize.call(this);
            this._size[1] = undefined;
        } else {
            this._size[0] = undefined;
            this._size[1] = _getClipSize.call(this);
        }
    }
    var scrollTransform = this._masterOutputFunction(-this._position);
    return {
        transform: Transform.multiply(transform, scrollTransform),
        size: size,
        opacity: opacity,
        origin: origin,
        target: this.group.render()
    };
};
function _innerRender() {
    var size = null;
    var position = this._position;
    var result = [];
    var offset = -this._positionOffset;
    var clipSize = _getClipSize.call(this);
    var currNode = this._node;
    while (currNode && offset - position < clipSize + this.options.margin) {
        offset += _output.call(this, currNode, offset, result);
        currNode = currNode.getNext ? currNode.getNext() : null;
    }
    var sizeNode = this._node;
    var nodesSize = _sizeForDir.call(this, sizeNode.getSize());
    if (offset < clipSize) {
        while (sizeNode && nodesSize < clipSize) {
            sizeNode = sizeNode.getPrevious();
            if (sizeNode)
                nodesSize += _sizeForDir.call(this, sizeNode.getSize());
        }
        sizeNode = this._node;
        while (sizeNode && nodesSize < clipSize) {
            sizeNode = sizeNode.getNext();
            if (sizeNode)
                nodesSize += _sizeForDir.call(this, sizeNode.getSize());
        }
    }
    if (!currNode && offset - position < clipSize - EDGE_TOLERANCE) {
        if (this._onEdge !== 1) {
            this._onEdge = 1;
            this._eventOutput.emit('onEdge', { position: offset - clipSize });
        }
    } else if (!this._node.getPrevious() && position < -EDGE_TOLERANCE) {
        if (this._onEdge !== -1) {
            this._onEdge = -1;
            this._eventOutput.emit('onEdge', { position: 0 });
        }
    } else {
        if (this._onEdge !== 0) {
            this._onEdge = 0;
            this._eventOutput.emit('offEdge');
        }
    }
    currNode = this._node && this._node.getPrevious ? this._node.getPrevious() : null;
    offset = -this._positionOffset;
    if (currNode) {
        size = currNode.getSize ? currNode.getSize() : this._contextSize;
        offset -= _sizeForDir.call(this, size);
    }
    while (currNode && offset - position > -(clipSize + this.options.margin)) {
        _output.call(this, currNode, offset, result);
        currNode = currNode.getPrevious ? currNode.getPrevious() : null;
        if (currNode) {
            size = currNode.getSize ? currNode.getSize() : this._contextSize;
            offset -= _sizeForDir.call(this, size);
        }
    }
    return result;
}
module.exports = Scroller;
},{"../core/Entity":6,"../core/EventHandler":8,"../core/Group":9,"../core/OptionsManager":11,"../core/Transform":16,"../core/ViewSequence":18,"../utilities/Utility":96}],110:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var PhysicsEngine = require('../physics/PhysicsEngine');
var Particle = require('../physics/bodies/Particle');
var Drag = require('../physics/forces/Drag');
var Spring = require('../physics/forces/Spring');
var EventHandler = require('../core/EventHandler');
var OptionsManager = require('../core/OptionsManager');
var ViewSequence = require('../core/ViewSequence');
var Scroller = require('../views/Scroller');
var Utility = require('../utilities/Utility');
var GenericSync = require('../inputs/GenericSync');
var ScrollSync = require('../inputs/ScrollSync');
var TouchSync = require('../inputs/TouchSync');
GenericSync.register({
    scroll: ScrollSync,
    touch: TouchSync
});
var TOLERANCE = 0.5;
var SpringStates = {
    NONE: 0,
    EDGE: 1,
    PAGE: 2
};
var EdgeStates = {
    TOP: -1,
    NONE: 0,
    BOTTOM: 1
};
function Scrollview(options) {
    this.options = Object.create(Scrollview.DEFAULT_OPTIONS);
    this._optionsManager = new OptionsManager(this.options);
    this._scroller = new Scroller(this.options);
    this.sync = new GenericSync([
        'scroll',
        'touch'
    ], {
        direction: this.options.direction,
        scale: this.options.syncScale,
        rails: this.options.rails,
        preventDefault: this.options.preventDefault !== undefined ? this.options.preventDefault : this.options.direction !== Utility.Direction.Y
    });
    this._physicsEngine = new PhysicsEngine();
    this._particle = new Particle();
    this._physicsEngine.addBody(this._particle);
    this.spring = new Spring({
        anchor: [
            0,
            0,
            0
        ],
        period: this.options.edgePeriod,
        dampingRatio: this.options.edgeDamp
    });
    this.drag = new Drag({
        forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,
        strength: this.options.drag
    });
    this.friction = new Drag({
        forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,
        strength: this.options.friction
    });
    this._node = null;
    this._touchCount = 0;
    this._springState = SpringStates.NONE;
    this._onEdge = EdgeStates.NONE;
    this._pageSpringPosition = 0;
    this._edgeSpringPosition = 0;
    this._touchVelocity = 0;
    this._earlyEnd = false;
    this._needsPaginationCheck = false;
    this._displacement = 0;
    this._totalShift = 0;
    this._cachedIndex = 0;
    this._scroller.positionFrom(this.getPosition.bind(this));
    this._eventInput = new EventHandler();
    this._eventOutput = new EventHandler();
    this._eventInput.pipe(this.sync);
    this.sync.pipe(this._eventInput);
    EventHandler.setInputHandler(this, this._eventInput);
    EventHandler.setOutputHandler(this, this._eventOutput);
    _bindEvents.call(this);
    if (options)
        this.setOptions(options);
}
Scrollview.DEFAULT_OPTIONS = {
    direction: Utility.Direction.Y,
    rails: true,
    friction: 0.005,
    drag: 0.0001,
    edgeGrip: 0.2,
    edgePeriod: 300,
    edgeDamp: 1,
    margin: 1000,
    paginated: false,
    pagePeriod: 500,
    pageDamp: 0.8,
    pageStopSpeed: 10,
    pageSwitchSpeed: 0.5,
    speedLimit: 5,
    groupScroll: false,
    syncScale: 1
};
function _handleStart(event) {
    this._touchCount = event.count;
    if (event.count === undefined)
        this._touchCount = 1;
    _detachAgents.call(this);
    this.setVelocity(0);
    this._touchVelocity = 0;
    this._earlyEnd = false;
}
function _handleMove(event) {
    var velocity = -event.velocity;
    var delta = -event.delta;
    if (this._onEdge !== EdgeStates.NONE && event.slip) {
        if (velocity < 0 && this._onEdge === EdgeStates.TOP || velocity > 0 && this._onEdge === EdgeStates.BOTTOM) {
            if (!this._earlyEnd) {
                _handleEnd.call(this, event);
                this._earlyEnd = true;
            }
        } else if (this._earlyEnd && Math.abs(velocity) > Math.abs(this.getVelocity())) {
            _handleStart.call(this, event);
        }
    }
    if (this._earlyEnd)
        return;
    this._touchVelocity = velocity;
    if (event.slip) {
        var speedLimit = this.options.speedLimit;
        if (velocity < -speedLimit)
            velocity = -speedLimit;
        else if (velocity > speedLimit)
            velocity = speedLimit;
        this.setVelocity(velocity);
        var deltaLimit = speedLimit * 16;
        if (delta > deltaLimit)
            delta = deltaLimit;
        else if (delta < -deltaLimit)
            delta = -deltaLimit;
    }
    this.setPosition(this.getPosition() + delta);
    this._displacement += delta;
    if (this._springState === SpringStates.NONE)
        _normalizeState.call(this);
}
function _handleEnd(event) {
    this._touchCount = event.count || 0;
    if (!this._touchCount) {
        _detachAgents.call(this);
        if (this._onEdge !== EdgeStates.NONE)
            _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);
        _attachAgents.call(this);
        var velocity = -event.velocity;
        var speedLimit = this.options.speedLimit;
        if (event.slip)
            speedLimit *= this.options.edgeGrip;
        if (velocity < -speedLimit)
            velocity = -speedLimit;
        else if (velocity > speedLimit)
            velocity = speedLimit;
        this.setVelocity(velocity);
        this._touchVelocity = 0;
        this._needsPaginationCheck = true;
    }
}
function _bindEvents() {
    this._eventInput.bindThis(this);
    this._eventInput.on('start', _handleStart);
    this._eventInput.on('update', _handleMove);
    this._eventInput.on('end', _handleEnd);
    this._eventInput.on('resize', function () {
        this._node._.calculateSize();
    }.bind(this));
    this._scroller.on('onEdge', function (data) {
        this._edgeSpringPosition = data.position;
        _handleEdge.call(this, this._scroller.onEdge());
        this._eventOutput.emit('onEdge');
    }.bind(this));
    this._scroller.on('offEdge', function () {
        this.sync.setOptions({ scale: this.options.syncScale });
        this._onEdge = this._scroller.onEdge();
        this._eventOutput.emit('offEdge');
    }.bind(this));
    this._particle.on('update', function (particle) {
        if (this._springState === SpringStates.NONE)
            _normalizeState.call(this);
        this._displacement = particle.position.x - this._totalShift;
    }.bind(this));
    this._particle.on('end', function () {
        if (!this.options.paginated || this.options.paginated && this._springState !== SpringStates.NONE)
            this._eventOutput.emit('settle');
    }.bind(this));
}
function _attachAgents() {
    if (this._springState)
        this._physicsEngine.attach([this.spring], this._particle);
    else
        this._physicsEngine.attach([
            this.drag,
            this.friction
        ], this._particle);
}
function _detachAgents() {
    this._springState = SpringStates.NONE;
    this._physicsEngine.detachAll();
}
function _nodeSizeForDirection(node) {
    var direction = this.options.direction;
    var nodeSize = node.getSize();
    return !nodeSize ? this._scroller.getSize()[direction] : nodeSize[direction];
}
function _handleEdge(edge) {
    this.sync.setOptions({ scale: this.options.edgeGrip });
    this._onEdge = edge;
    if (!this._touchCount && this._springState !== SpringStates.EDGE) {
        _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);
    }
    if (this._springState && Math.abs(this.getVelocity()) < 0.001) {
        _detachAgents.call(this);
        _attachAgents.call(this);
    }
}
function _handlePagination() {
    if (this._touchCount)
        return;
    if (this._springState === SpringStates.EDGE)
        return;
    var velocity = this.getVelocity();
    if (Math.abs(velocity) >= this.options.pageStopSpeed)
        return;
    var position = this.getPosition();
    var velocitySwitch = Math.abs(velocity) > this.options.pageSwitchSpeed;
    var nodeSize = _nodeSizeForDirection.call(this, this._node);
    var positionNext = position > 0.5 * nodeSize;
    var positionPrev = position < 0.5 * nodeSize;
    var velocityNext = velocity > 0;
    var velocityPrev = velocity < 0;
    this._needsPaginationCheck = false;
    if (positionNext && !velocitySwitch || velocitySwitch && velocityNext) {
        this.goToNextPage();
    } else if (velocitySwitch && velocityPrev) {
        this.goToPreviousPage();
    } else
        _setSpring.call(this, 0, SpringStates.PAGE);
}
function _setSpring(position, springState) {
    var springOptions;
    if (springState === SpringStates.EDGE) {
        this._edgeSpringPosition = position;
        springOptions = {
            anchor: [
                this._edgeSpringPosition,
                0,
                0
            ],
            period: this.options.edgePeriod,
            dampingRatio: this.options.edgeDamp
        };
    } else if (springState === SpringStates.PAGE) {
        this._pageSpringPosition = position;
        springOptions = {
            anchor: [
                this._pageSpringPosition,
                0,
                0
            ],
            period: this.options.pagePeriod,
            dampingRatio: this.options.pageDamp
        };
    }
    this.spring.setOptions(springOptions);
    if (springState && !this._springState) {
        _detachAgents.call(this);
        this._springState = springState;
        _attachAgents.call(this);
    }
    this._springState = springState;
}
function _normalizeState() {
    var offset = 0;
    var position = this.getPosition();
    position += (position < 0 ? -0.5 : 0.5) >> 0;
    var nodeSize = _nodeSizeForDirection.call(this, this._node);
    var nextNode = this._node.getNext();
    while (offset + position >= nodeSize && nextNode) {
        offset -= nodeSize;
        this._scroller.sequenceFrom(nextNode);
        this._node = nextNode;
        nextNode = this._node.getNext();
        nodeSize = _nodeSizeForDirection.call(this, this._node);
    }
    var previousNode = this._node.getPrevious();
    var previousNodeSize;
    while (offset + position <= 0 && previousNode) {
        previousNodeSize = _nodeSizeForDirection.call(this, previousNode);
        this._scroller.sequenceFrom(previousNode);
        this._node = previousNode;
        offset += previousNodeSize;
        previousNode = this._node.getPrevious();
    }
    if (offset)
        _shiftOrigin.call(this, offset);
    if (this._node) {
        if (this._node.index !== this._cachedIndex) {
            if (this.getPosition() < 0.5 * nodeSize) {
                this._cachedIndex = this._node.index;
                this._eventOutput.emit('pageChange', {
                    direction: -1,
                    index: this._cachedIndex
                });
            }
        } else {
            if (this.getPosition() > 0.5 * nodeSize) {
                this._cachedIndex = this._node.index + 1;
                this._eventOutput.emit('pageChange', {
                    direction: 1,
                    index: this._cachedIndex
                });
            }
        }
    }
}
function _shiftOrigin(amount) {
    this._edgeSpringPosition += amount;
    this._pageSpringPosition += amount;
    this.setPosition(this.getPosition() + amount);
    this._totalShift += amount;
    if (this._springState === SpringStates.EDGE) {
        this.spring.setOptions({
            anchor: [
                this._edgeSpringPosition,
                0,
                0
            ]
        });
    } else if (this._springState === SpringStates.PAGE) {
        this.spring.setOptions({
            anchor: [
                this._pageSpringPosition,
                0,
                0
            ]
        });
    }
}
Scrollview.prototype.getCurrentIndex = function getCurrentIndex() {
    return this._node.index;
};
Scrollview.prototype.goToPreviousPage = function goToPreviousPage() {
    if (!this._node || this._onEdge === EdgeStates.TOP)
        return null;
    if (this.getPosition() > 1 && this._springState === SpringStates.NONE) {
        _setSpring.call(this, 0, SpringStates.PAGE);
        return this._node;
    }
    var previousNode = this._node.getPrevious();
    if (previousNode) {
        var previousNodeSize = _nodeSizeForDirection.call(this, previousNode);
        this._scroller.sequenceFrom(previousNode);
        this._node = previousNode;
        _shiftOrigin.call(this, previousNodeSize);
        _setSpring.call(this, 0, SpringStates.PAGE);
    }
    return previousNode;
};
Scrollview.prototype.goToNextPage = function goToNextPage() {
    if (!this._node || this._onEdge === EdgeStates.BOTTOM)
        return null;
    var nextNode = this._node.getNext();
    if (nextNode) {
        var currentNodeSize = _nodeSizeForDirection.call(this, this._node);
        this._scroller.sequenceFrom(nextNode);
        this._node = nextNode;
        _shiftOrigin.call(this, -currentNodeSize);
        _setSpring.call(this, 0, SpringStates.PAGE);
    }
    return nextNode;
};
Scrollview.prototype.goToPage = function goToPage(index) {
    var currentIndex = this.getCurrentIndex();
    var i;
    if (currentIndex > index) {
        for (i = 0; i < currentIndex - index; i++)
            this.goToPreviousPage();
    }
    if (currentIndex < index) {
        for (i = 0; i < index - currentIndex; i++)
            this.goToNextPage();
    }
};
Scrollview.prototype.outputFrom = function outputFrom() {
    return this._scroller.outputFrom.apply(this._scroller, arguments);
};
Scrollview.prototype.getPosition = function getPosition() {
    return this._particle.getPosition1D();
};
Scrollview.prototype.getAbsolutePosition = function getAbsolutePosition() {
    return this._scroller.getCumulativeSize(this.getCurrentIndex())[this.options.direction] + this.getPosition();
};
Scrollview.prototype.getOffset = Scrollview.prototype.getPosition;
Scrollview.prototype.setPosition = function setPosition(x) {
    this._particle.setPosition1D(x);
};
Scrollview.prototype.setOffset = Scrollview.prototype.setPosition;
Scrollview.prototype.getVelocity = function getVelocity() {
    return this._touchCount ? this._touchVelocity : this._particle.getVelocity1D();
};
Scrollview.prototype.setVelocity = function setVelocity(v) {
    this._particle.setVelocity1D(v);
};
Scrollview.prototype.setOptions = function setOptions(options) {
    if (options.direction !== undefined) {
        if (options.direction === 'x')
            options.direction = Utility.Direction.X;
        else if (options.direction === 'y')
            options.direction = Utility.Direction.Y;
    }
    if (options.groupScroll !== this.options.groupScroll) {
        if (options.groupScroll)
            this.subscribe(this._scroller);
        else
            this.unsubscribe(this._scroller);
    }
    this._optionsManager.setOptions(options);
    this._scroller.setOptions(options);
    if (options.drag !== undefined)
        this.drag.setOptions({ strength: this.options.drag });
    if (options.friction !== undefined)
        this.friction.setOptions({ strength: this.options.friction });
    if (options.edgePeriod !== undefined || options.edgeDamp !== undefined) {
        this.spring.setOptions({
            period: this.options.edgePeriod,
            dampingRatio: this.options.edgeDamp
        });
    }
    if (options.rails || options.direction !== undefined || options.syncScale !== undefined || options.preventDefault) {
        this.sync.setOptions({
            rails: this.options.rails,
            direction: this.options.direction === Utility.Direction.X ? GenericSync.DIRECTION_X : GenericSync.DIRECTION_Y,
            scale: this.options.syncScale,
            preventDefault: this.options.preventDefault
        });
    }
};
Scrollview.prototype.sequenceFrom = function sequenceFrom(node) {
    if (node instanceof Array)
        node = new ViewSequence({
            array: node,
            trackSize: true
        });
    this._node = node;
    return this._scroller.sequenceFrom(node);
};
Scrollview.prototype.getSize = function getSize() {
    return this._scroller.getSize.apply(this._scroller, arguments);
};
Scrollview.prototype.render = function render() {
    if (this.options.paginated && this._needsPaginationCheck)
        _handlePagination.call(this);
    return this._scroller.render();
};
module.exports = Scrollview;
},{"../core/EventHandler":8,"../core/OptionsManager":11,"../core/ViewSequence":18,"../inputs/GenericSync":28,"../inputs/ScrollSync":33,"../inputs/TouchSync":34,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/forces/Drag":64,"../physics/forces/Spring":69,"../utilities/Utility":96,"../views/Scroller":109}],111:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var OptionsManager = require('../core/OptionsManager');
var Entity = require('../core/Entity');
var Transform = require('../core/Transform');
var ViewSequence = require('../core/ViewSequence');
var Utility = require('../utilities/Utility');
function SequentialLayout(options) {
    this._items = null;
    this._size = null;
    this._outputFunction = SequentialLayout.DEFAULT_OUTPUT_FUNCTION;
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || SequentialLayout.DEFAULT_OPTIONS);
    this.optionsManager = new OptionsManager(this.options);
    this.id = Entity.register(this);
    this.cachedSize = [
        undefined,
        undefined
    ];
    if (options)
        this.setOptions(options);
}
SequentialLayout.DEFAULT_OPTIONS = {
    direction: Utility.Direction.Y,
    itemSpacing: 0
};
SequentialLayout.DEFAULT_OUTPUT_FUNCTION = function DEFAULT_OUTPUT_FUNCTION(input, offset, index) {
    var transform = this.options.direction === Utility.Direction.X ? Transform.translate(offset, 0) : Transform.translate(0, offset);
    return {
        size: this.cachedSize,
        transform: transform,
        target: input.render()
    };
};
SequentialLayout.prototype.getSize = function getSize() {
    if (!this._size)
        this.render();
    return this._size;
};
SequentialLayout.prototype.sequenceFrom = function sequenceFrom(items) {
    if (items instanceof Array)
        items = new ViewSequence(items);
    this._items = items;
    return this;
};
SequentialLayout.prototype.setOptions = function setOptions(options) {
    this.optionsManager.setOptions.apply(this.optionsManager, arguments);
    return this;
};
SequentialLayout.prototype.setOutputFunction = function setOutputFunction(outputFunction) {
    this._outputFunction = outputFunction;
    return this;
};
SequentialLayout.prototype.render = function render() {
    return this.id;
};
SequentialLayout.prototype.commit = function commit(parentSpec) {
    var length = 0;
    var secondaryDirection = this.options.direction ^ 1;
    var currentNode = this._items;
    var item = null;
    var itemSize = [];
    var output = {};
    var result = [];
    var i = 0;
    this._size = [
        0,
        0
    ];
    this.cachedSize = parentSpec.size;
    while (currentNode) {
        item = currentNode.get();
        if (!item)
            break;
        if (item.getSize)
            itemSize = item.getSize();
        output = this._outputFunction.call(this, item, length, i++);
        result.push(output);
        if (itemSize) {
            if (itemSize[this.options.direction])
                length += itemSize[this.options.direction];
            if (itemSize[secondaryDirection] > this._size[secondaryDirection])
                this._size[secondaryDirection] = itemSize[secondaryDirection];
            if (itemSize[secondaryDirection] === 0)
                this._size[secondaryDirection] = undefined;
        }
        currentNode = currentNode.getNext();
        if (this.options.itemSpacing && currentNode)
            length += this.options.itemSpacing;
    }
    this._size[this.options.direction] = length;
    return {
        transform: parentSpec.transform,
        origin: parentSpec.origin,
        opacity: parentSpec.opacity,
        size: this.getSize(),
        target: result
    };
};
module.exports = SequentialLayout;
},{"../core/Entity":6,"../core/OptionsManager":11,"../core/Transform":16,"../core/ViewSequence":18,"../utilities/Utility":96}],112:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var View = require('../core/View');
var Entity = require('../core/Entity');
var Transform = require('../core/Transform');
function SizeAwareView() {
    View.apply(this, arguments);
    this._id = Entity.register(this);
    this._parentSize = [];
}
SizeAwareView.prototype = Object.create(View.prototype);
SizeAwareView.prototype.constructor = SizeAwareView;
SizeAwareView.prototype.commit = function commit(context) {
    var transform = context.transform;
    var opacity = context.opacity;
    var origin = context.origin;
    if (!this._parentSize || this._parentSize[0] !== context.size[0] || this._parentSize[1] !== context.size[1]) {
        this._parentSize[0] = context.size[0];
        this._parentSize[1] = context.size[1];
        this._eventInput.emit('parentResize', this._parentSize);
        if (this.onResize)
            this.onResize(this._parentSize);
    }
    if (this._parentSize) {
        transform = Transform.moveThen([
            -this._parentSize[0] * origin[0],
            -this._parentSize[1] * origin[1],
            0
        ], transform);
    }
    return {
        transform: transform,
        opacity: opacity,
        size: this._parentSize,
        target: this._node.render()
    };
};
SizeAwareView.prototype.getParentSize = function getParentSize() {
    return this._parentSize;
};
SizeAwareView.prototype.render = function render() {
    return this._id;
};
module.exports = SizeAwareView;
},{"../core/Entity":6,"../core/Transform":16,"../core/View":17}],113:[function(require,module,exports){
module.exports = {
  ContextualView: require('./ContextualView'),
  Deck: require('./Deck'),
  DrawerLayout: require('./DrawerLayout'),
  EdgeSwapper: require('./EdgeSwapper'),
  FlexibleLayout: require('./FlexibleLayout'),
  Flipper: require('./Flipper'),
  GridLayout: require('./GridLayout'),
  HeaderFooterLayout: require('./HeaderFooterLayout'),
  Lightbox: require('./Lightbox'),
  RenderController: require('./RenderController'),
  ScrollContainer: require('./ScrollContainer'),
  Scroller: require('./Scroller'),
  Scrollview: require('./Scrollview'),
  SequentialLayout: require('./SequentialLayout'),
  SizeAwareView: require('./SizeAwareView')
};

},{"./ContextualView":98,"./Deck":99,"./DrawerLayout":100,"./EdgeSwapper":101,"./FlexibleLayout":102,"./Flipper":103,"./GridLayout":104,"./HeaderFooterLayout":105,"./Lightbox":106,"./RenderController":107,"./ScrollContainer":108,"./Scroller":109,"./Scrollview":110,"./SequentialLayout":111,"./SizeAwareView":112}],114:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Scene = require('../core/Scene');
var Surface = require('../core/Surface');
var Transform = require('../core/Transform');
var View = require('../core/View');
function NavigationBar(options) {
    View.apply(this, arguments);
    this.title = new Surface({
        classes: this.options.classes,
        content: this.options.content
    });
    this.back = new Surface({
        size: [
            this.options.size[1],
            this.options.size[1]
        ],
        classes: this.options.classes,
        content: this.options.backContent
    });
    this.back.on('click', function () {
        this._eventOutput.emit('back', {});
    }.bind(this));
    this.more = new Surface({
        size: [
            this.options.size[1],
            this.options.size[1]
        ],
        classes: this.options.classes,
        content: this.options.moreContent
    });
    this.more.on('click', function () {
        this._eventOutput.emit('more', {});
    }.bind(this));
    this.layout = new Scene({
        id: 'master',
        size: this.options.size,
        target: [
            {
                transform: Transform.inFront,
                origin: [
                    0,
                    0.5
                ],
                align: [
                    0,
                    0.5
                ],
                target: this.back
            },
            {
                origin: [
                    0.5,
                    0.5
                ],
                align: [
                    0.5,
                    0.5
                ],
                target: this.title
            },
            {
                transform: Transform.inFront,
                origin: [
                    1,
                    0.5
                ],
                align: [
                    1,
                    0.5
                ],
                target: this.more
            }
        ]
    });
    this._add(this.layout);
    this._optionsManager.on('change', function (event) {
        var key = event.id;
        var data = event.value;
        if (key === 'size') {
            this.layout.id.master.setSize(data);
            this.title.setSize(data);
            this.back.setSize([
                data[1],
                data[1]
            ]);
            this.more.setSize([
                data[1],
                data[1]
            ]);
        } else if (key === 'backClasses') {
            this.back.setOptions({ classes: this.options.classes.concat(this.options.backClasses) });
        } else if (key === 'backContent') {
            this.back.setContent(this.options.backContent);
        } else if (key === 'classes') {
            this.title.setOptions({ classes: this.options.classes });
            this.back.setOptions({ classes: this.options.classes.concat(this.options.backClasses) });
            this.more.setOptions({ classes: this.options.classes.concat(this.options.moreClasses) });
        } else if (key === 'content') {
            this.setContent(this.options.content);
        } else if (key === 'moreClasses') {
            this.more.setOptions({ classes: this.options.classes.concat(this.options.moreClasses) });
        } else if (key === 'moreContent') {
            this.more.setContent(this.options.content);
        }
    }.bind(this));
}
NavigationBar.prototype = Object.create(View.prototype);
NavigationBar.prototype.constructor = NavigationBar;
NavigationBar.DEFAULT_OPTIONS = {
    size: [
        undefined,
        50
    ],
    backClasses: ['back'],
    backContent: '&#x25c0;',
    classes: ['navigation'],
    content: '',
    moreClasses: ['more'],
    moreContent: '&#x271a;'
};
NavigationBar.prototype.setContent = function setContent(content) {
    return this.title.setContent(content);
};
module.exports = NavigationBar;
},{"../core/Scene":13,"../core/Surface":15,"../core/Transform":16,"../core/View":17}],115:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
var CanvasSurface = require('../surfaces/CanvasSurface');
var Transform = require('../core/Transform');
var EventHandler = require('../core/EventHandler');
var Utilities = require('../math/Utilities');
var OptionsManager = require('../core/OptionsManager');
var MouseSync = require('../inputs/MouseSync');
var TouchSync = require('../inputs/TouchSync');
var GenericSync = require('../inputs/GenericSync');
GenericSync.register({
    mouse: MouseSync,
    touch: TouchSync
});
function Slider(options) {
    this.options = Object.create(Slider.DEFAULT_OPTIONS);
    this.optionsManager = new OptionsManager(this.options);
    if (options)
        this.setOptions(options);
    this.indicator = new CanvasSurface({
        size: this.options.indicatorSize,
        classes: ['slider-back']
    });
    this.label = new Surface({
        size: this.options.labelSize,
        content: this.options.label,
        properties: { pointerEvents: 'none' },
        classes: ['slider-label']
    });
    this.eventOutput = new EventHandler();
    this.eventInput = new EventHandler();
    EventHandler.setInputHandler(this, this.eventInput);
    EventHandler.setOutputHandler(this, this.eventOutput);
    var scale = (this.options.range[1] - this.options.range[0]) / this.options.indicatorSize[0];
    this.sync = new GenericSync([
        'mouse',
        'touch'
    ], {
        scale: scale,
        direction: GenericSync.DIRECTION_X
    });
    this.indicator.pipe(this.sync);
    this.sync.pipe(this);
    this.eventInput.on('update', function (data) {
        this.set(data.position);
    }.bind(this));
    this._drawPos = 0;
    _updateLabel.call(this);
}
Slider.DEFAULT_OPTIONS = {
    size: [
        200,
        60
    ],
    indicatorSize: [
        200,
        30
    ],
    labelSize: [
        200,
        30
    ],
    range: [
        0,
        1
    ],
    precision: 2,
    value: 0,
    label: '',
    fillColor: 'rgba(170, 170, 170, 1)'
};
function _updateLabel() {
    this.label.setContent(this.options.label + '<span style="float: right">' + this.get().toFixed(this.options.precision) + '</span>');
}
Slider.prototype.setOptions = function setOptions(options) {
    return this.optionsManager.setOptions(options);
};
Slider.prototype.get = function get() {
    return this.options.value;
};
Slider.prototype.set = function set(value) {
    if (value === this.options.value)
        return;
    this.options.value = Utilities.clamp(value, this.options.range);
    _updateLabel.call(this);
    this.eventOutput.emit('change', { value: value });
};
Slider.prototype.getSize = function getSize() {
    return this.options.size;
};
Slider.prototype.render = function render() {
    var range = this.options.range;
    var fillSize = Math.floor((this.get() - range[0]) / (range[1] - range[0]) * this.options.indicatorSize[0]);
    if (fillSize < this._drawPos) {
        this.indicator.getContext('2d').clearRect(fillSize, 0, this._drawPos - fillSize + 1, this.options.indicatorSize[1]);
    } else if (fillSize > this._drawPos) {
        var ctx = this.indicator.getContext('2d');
        ctx.fillStyle = this.options.fillColor;
        ctx.fillRect(this._drawPos - 1, 0, fillSize - this._drawPos + 1, this.options.indicatorSize[1]);
    }
    this._drawPos = fillSize;
    return {
        size: this.options.size,
        target: [
            {
                origin: [
                    0,
                    0
                ],
                target: this.indicator.render()
            },
            {
                transform: Transform.translate(0, 0, 1),
                origin: [
                    0,
                    0
                ],
                target: this.label.render()
            }
        ]
    };
};
module.exports = Slider;
},{"../core/EventHandler":8,"../core/OptionsManager":11,"../core/Surface":15,"../core/Transform":16,"../inputs/GenericSync":28,"../inputs/MouseSync":29,"../inputs/TouchSync":34,"../math/Utilities":41,"../surfaces/CanvasSurface":75}],116:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Utility = require('../utilities/Utility');
var View = require('../core/View');
var GridLayout = require('../views/GridLayout');
var ToggleButton = require('./ToggleButton');
function TabBar(options) {
    View.apply(this, arguments);
    this.layout = new GridLayout();
    this.buttons = [];
    this._buttonIds = {};
    this._buttonCallbacks = {};
    this.layout.sequenceFrom(this.buttons);
    this._add(this.layout);
    this._optionsManager.on('change', _updateOptions.bind(this));
}
TabBar.prototype = Object.create(View.prototype);
TabBar.prototype.constructor = TabBar;
TabBar.DEFAULT_OPTIONS = {
    sections: [],
    widget: ToggleButton,
    size: [
        undefined,
        50
    ],
    direction: Utility.Direction.X,
    buttons: { toggleMode: ToggleButton.ON }
};
function _updateOptions(data) {
    var id = data.id;
    var value = data.value;
    if (id === 'direction') {
        this.layout.setOptions({ dimensions: _resolveGridDimensions.call(this.buttons.length, this.options.direction) });
    } else if (id === 'buttons') {
        for (var i in this.buttons) {
            this.buttons[i].setOptions(value);
        }
    } else if (id === 'sections') {
        for (var sectionId in this.options.sections) {
            this.defineSection(sectionId, this.options.sections[sectionId]);
        }
    }
}
function _resolveGridDimensions(count, direction) {
    if (direction === Utility.Direction.X)
        return [
            count,
            1
        ];
    else
        return [
            1,
            count
        ];
}
TabBar.prototype.defineSection = function defineSection(id, content) {
    var button;
    var i = this._buttonIds[id];
    if (i === undefined) {
        i = this.buttons.length;
        this._buttonIds[id] = i;
        var widget = this.options.widget;
        button = new widget();
        this.buttons[i] = button;
        this.layout.setOptions({ dimensions: _resolveGridDimensions(this.buttons.length, this.options.direction) });
    } else {
        button = this.buttons[i];
        button.unbind('select', this._buttonCallbacks[id]);
    }
    if (this.options.buttons)
        button.setOptions(this.options.buttons);
    button.setOptions(content);
    this._buttonCallbacks[id] = this.select.bind(this, id);
    button.on('select', this._buttonCallbacks[id]);
};
TabBar.prototype.select = function select(id) {
    var btn = this._buttonIds[id];
    if (this.buttons[btn] && this.buttons[btn].isSelected()) {
        this._eventOutput.emit('select', { id: id });
    } else if (this.buttons[btn]) {
        this.buttons[btn].select();
    }
    for (var i = 0; i < this.buttons.length; i++) {
        if (i !== btn)
            this.buttons[i].deselect();
    }
};
module.exports = TabBar;
},{"../core/View":17,"../utilities/Utility":96,"../views/GridLayout":104,"./ToggleButton":117}],117:[function(require,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
var Surface = require('../core/Surface');
var EventHandler = require('../core/EventHandler');
var RenderController = require('../views/RenderController');
function ToggleButton(options) {
    this.options = {
        content: [
            '',
            ''
        ],
        offClasses: ['off'],
        onClasses: ['on'],
        size: undefined,
        outTransition: {
            curve: 'easeInOut',
            duration: 300
        },
        inTransition: {
            curve: 'easeInOut',
            duration: 300
        },
        toggleMode: ToggleButton.TOGGLE,
        crossfade: true
    };
    this._eventOutput = new EventHandler();
    EventHandler.setOutputHandler(this, this._eventOutput);
    this.offSurface = new Surface();
    this.offSurface.on('click', function () {
        if (this.options.toggleMode !== ToggleButton.OFF)
            this.select();
    }.bind(this));
    this.offSurface.pipe(this._eventOutput);
    this.onSurface = new Surface();
    this.onSurface.on('click', function () {
        if (this.options.toggleMode !== ToggleButton.ON)
            this.deselect();
    }.bind(this));
    this.onSurface.pipe(this._eventOutput);
    this.arbiter = new RenderController({ overlap: this.options.crossfade });
    this.deselect();
    if (options)
        this.setOptions(options);
}
ToggleButton.OFF = 0;
ToggleButton.ON = 1;
ToggleButton.TOGGLE = 2;
ToggleButton.prototype.select = function select(suppressEvent) {
    this.selected = true;
    this.arbiter.show(this.onSurface, this.options.inTransition);
    if (!suppressEvent) {
        this._eventOutput.emit('select');
    }
};
ToggleButton.prototype.deselect = function deselect(suppressEvent) {
    this.selected = false;
    this.arbiter.show(this.offSurface, this.options.outTransition);
    if (!suppressEvent) {
        this._eventOutput.emit('deselect');
    }
};
ToggleButton.prototype.isSelected = function isSelected() {
    return this.selected;
};
ToggleButton.prototype.setOptions = function setOptions(options) {
    if (options.content !== undefined) {
        if (!(options.content instanceof Array))
            options.content = [
                options.content,
                options.content
            ];
        this.options.content = options.content;
        this.offSurface.setContent(this.options.content[0]);
        this.onSurface.setContent(this.options.content[1]);
    }
    if (options.offClasses) {
        this.options.offClasses = options.offClasses;
        this.offSurface.setClasses(this.options.offClasses);
    }
    if (options.onClasses) {
        this.options.onClasses = options.onClasses;
        this.onSurface.setClasses(this.options.onClasses);
    }
    if (options.size !== undefined) {
        this.options.size = options.size;
        this.onSurface.setSize(this.options.size);
        this.offSurface.setSize(this.options.size);
    }
    if (options.toggleMode !== undefined)
        this.options.toggleMode = options.toggleMode;
    if (options.outTransition !== undefined)
        this.options.outTransition = options.outTransition;
    if (options.inTransition !== undefined)
        this.options.inTransition = options.inTransition;
    if (options.crossfade !== undefined) {
        this.options.crossfade = options.crossfade;
        this.arbiter.setOptions({ overlap: this.options.crossfade });
    }
};
ToggleButton.prototype.getSize = function getSize() {
    return this.options.size;
};
ToggleButton.prototype.render = function render() {
    return this.arbiter.render();
};
module.exports = ToggleButton;
},{"../core/EventHandler":8,"../core/Surface":15,"../views/RenderController":107}],118:[function(require,module,exports){
module.exports = {
  NavigationBar: require('./NavigationBar'),
  Slider: require('./Slider'),
  TabBar: require('./TabBar'),
  ToggleButton: require('./ToggleButton')
};

},{"./NavigationBar":114,"./Slider":115,"./TabBar":116,"./ToggleButton":117}],119:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],120:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var AnimatorClassBezierPresets,
      AnimatorClasses,
      BezierCurveAnimator,
      Config,
      Defaults,
      EventEmitter,
      LinearAnimator,
      SpringDHOAnimator,
      SpringRK4Animator,
      Utils,
      _,
      evaluateRelativeProperty,
      isRelativeProperty,
      numberRE,
      relativePropertyRE,
      slice = [].slice,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  Defaults = require("./Defaults").Defaults;

  EventEmitter = require("./EventEmitter").EventEmitter;

  LinearAnimator = require("./Animators/LinearAnimator").LinearAnimator;

  BezierCurveAnimator = require("./Animators/BezierCurveAnimator").BezierCurveAnimator;

  SpringRK4Animator = require("./Animators/SpringRK4Animator").SpringRK4Animator;

  SpringDHOAnimator = require("./Animators/SpringDHOAnimator").SpringDHOAnimator;

  AnimatorClasses = {
    "linear": LinearAnimator,
    "bezier-curve": BezierCurveAnimator,
    "spring-rk4": SpringRK4Animator,
    "spring-dho": SpringDHOAnimator
  };

  AnimatorClasses["spring"] = AnimatorClasses["spring-rk4"];

  AnimatorClasses["cubic-bezier"] = AnimatorClasses["bezier-curve"];

  AnimatorClassBezierPresets = ["ease", "ease-in", "ease-out", "ease-in-out"];

  numberRE = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/;

  relativePropertyRE = new RegExp('^(?:([+-])=|)(' + numberRE.source + ')([a-z%]*)$', 'i');

  isRelativeProperty = function (v) {
    return _.isString(v) && relativePropertyRE.test(v);
  };

  evaluateRelativeProperty = function (target, k, v) {
    var match, number, ref, rest, sign, unit;
    ref = relativePropertyRE.exec(v), match = ref[0], sign = ref[1], number = ref[2], unit = ref[3], rest = 5 <= ref.length ? slice.call(ref, 4) : [];
    if (sign) {
      return target[k] + (sign + 1) * number;
    }
    return +number;
  };

  exports.Animation = (function (superClass) {
    extend(Animation, superClass);

    function Animation(options) {
      if (options == null) {
        options = {};
      }
      this._updateValue = bind(this._updateValue, this);
      this._update = bind(this._update, this);
      this._start = bind(this._start, this);
      this.start = bind(this.start, this);
      options = Defaults.getDefaults("Animation", options);
      Animation.__super__.constructor.call(this, options);
      this.options = _.clone(_.defaults(options, {
        layer: null,
        properties: {},
        curve: "linear",
        curveOptions: {},
        time: 1,
        repeat: 0,
        delay: 0,
        debug: false
      }));
      if (options.origin) {
        console.warn("Animation.origin: please use layer.originX and layer.originY");
      }
      this.options.properties = Animation.filterAnimatableProperties(this.options.properties);
      this._parseAnimatorOptions();
      this._originalState = this._currentState();
      this._repeatCounter = this.options.repeat;
    }

    Animation.prototype.start = function () {
      var AnimatorClass, animation, k, property, ref, ref1, ref2, v;
      if (this.options.layer === null) {
        console.error("Animation: missing layer");
      }
      AnimatorClass = this._animatorClass();
      if (this.options.debug) {
        console.log("Animation.start " + AnimatorClass.name, this.options.curveOptions);
      }
      this._animator = new AnimatorClass(this.options.curveOptions);
      this._target = this.options.layer;
      this._stateA = this._currentState();
      this._stateB = {};
      ref = this.options.properties;
      for (k in ref) {
        v = ref[k];
        if (_.isFunction(v)) {
          v = v();
        } else if (isRelativeProperty(v)) {
          v = evaluateRelativeProperty(this._target, k, v);
        }
        if (this._stateA[k] !== v) {
          this._stateB[k] = v;
        }
      }
      if (_.keys(this._stateA).length === 0) {
        console.warn("Animation: nothing to animate, no animatable properties");
        return false;
      }
      if (_.isEqual(this._stateA, this._stateB)) {
        console.warn("Animation: nothing to animate, all properties are equal to what it is now");
        return false;
      }
      ref1 = this._target.animatingProperties();
      for (property in ref1) {
        animation = ref1[property];
        if (this._stateA.hasOwnProperty(property)) {
          animation.stop();
        }
      }
      if (this.options.debug) {
        console.log("Animation.start");
        ref2 = this._stateB;
        for (k in ref2) {
          v = ref2[k];
          console.log("\t" + k + ": " + this._stateA[k] + " -> " + this._stateB[k]);
        }
      }
      if (this._repeatCounter > 0) {
        this.once("end", (function (_this) {
          return function () {
            var ref3;
            ref3 = _this._stateA;
            for (k in ref3) {
              v = ref3[k];
              _this._target[k] = v;
            }
            _this._repeatCounter--;
            return _this.start();
          };
        })(this));
      }
      if (this.options.delay) {
        Utils.delay(this.options.delay, this._start);
      } else {
        this._start();
      }
      return true;
    };

    Animation.prototype.stop = function (emit) {
      if (emit == null) {
        emit = true;
      }
      this.options.layer._context._animationList = _.without(this.options.layer._context._animationList, this);
      if (emit) {
        this.emit("stop");
      }
      return Framer.Loop.off("update", this._update);
    };

    Animation.prototype.reverse = function () {
      var animation, options;
      options = _.clone(this.options);
      options.properties = this._originalState;
      animation = new Animation(options);
      return animation;
    };

    Animation.prototype.copy = function () {
      return new Animation(_.clone(this.options));
    };

    Animation.prototype.revert = function () {
      return this.reverse();
    };

    Animation.prototype.inverse = function () {
      return this.reverse();
    };

    Animation.prototype.invert = function () {
      return this.reverse();
    };

    Animation.prototype.emit = function (event) {
      Animation.__super__.emit.apply(this, arguments);
      return this.options.layer.emit(event, this);
    };

    Animation.prototype.animatingProperties = function () {
      return _.keys(this._stateA);
    };

    Animation.prototype._start = function () {
      this.options.layer._context._animationList.push(this);
      this.emit("start");
      return Framer.Loop.on("update", this._update);
    };

    Animation.prototype._update = function (delta) {
      var emit;
      if (this._animator.finished()) {
        this._updateValue(1);
        this.stop(emit = false);
        this.emit("end");
        return this.emit("stop");
      } else {
        return this._updateValue(this._animator.next(delta));
      }
    };

    Animation.prototype._updateValue = function (value) {
      var k, ref, v;
      ref = this._stateB;
      for (k in ref) {
        v = ref[k];
        this._target[k] = Utils.mapRange(value, 0, 1, this._stateA[k], this._stateB[k]);
      }
    };

    Animation.prototype._currentState = function () {
      return _.pick(this.options.layer, _.keys(this.options.properties));
    };

    Animation.prototype._animatorClass = function () {
      var animatorClassName, parsedCurve;
      parsedCurve = Utils.parseFunction(this.options.curve);
      animatorClassName = parsedCurve.name.toLowerCase();
      if (AnimatorClasses.hasOwnProperty(animatorClassName)) {
        return AnimatorClasses[animatorClassName];
      }
      if (indexOf.call(AnimatorClassBezierPresets, animatorClassName) >= 0) {
        return BezierCurveAnimator;
      }
      return LinearAnimator;
    };

    Animation.prototype._parseAnimatorOptions = function () {
      var animatorClass, animatorClassName, base, base1, i, j, k, l, len, len1, parsedCurve, ref, ref1, results, value;
      animatorClass = this._animatorClass();
      parsedCurve = Utils.parseFunction(this.options.curve);
      animatorClassName = parsedCurve.name.toLowerCase();
      if (animatorClass === LinearAnimator || animatorClass === BezierCurveAnimator) {
        if (_.isString(this.options.curveOptions) || _.isArray(this.options.curveOptions)) {
          this.options.curveOptions = {
            values: this.options.curveOptions
          };
        }
        if ((base = this.options.curveOptions).time == null) {
          base.time = this.options.time;
        }
      }
      if (animatorClass === BezierCurveAnimator && indexOf.call(AnimatorClassBezierPresets, animatorClassName) >= 0) {
        this.options.curveOptions.values = animatorClassName;
        if ((base1 = this.options.curveOptions).time == null) {
          base1.time = this.options.time;
        }
      }
      if (parsedCurve.args.length) {
        if (animatorClass === BezierCurveAnimator) {
          this.options.curveOptions.values = parsedCurve.args.map(function (v) {
            return parseFloat(v) || 0;
          });
        }
        if (animatorClass === SpringRK4Animator) {
          ref = ["tension", "friction", "velocity", "tolerance"];
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            k = ref[i];
            value = parseFloat(parsedCurve.args[i]);
            if (value) {
              this.options.curveOptions[k] = value;
            }
          }
        }
        if (animatorClass === SpringDHOAnimator) {
          ref1 = ["stiffness", "damping", "mass", "tolerance"];
          results = [];
          for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
            k = ref1[i];
            value = parseFloat(parsedCurve.args[i]);
            if (value) {
              results.push(this.options.curveOptions[k] = value);
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      }
    };

    Animation.filterAnimatableProperties = function (properties) {
      var animatableProperties, k, v;
      animatableProperties = {};
      for (k in properties) {
        v = properties[k];
        if (_.isNumber(v) || _.isFunction(v) || isRelativeProperty(v)) {
          animatableProperties[k] = v;
        }
      }
      return animatableProperties;
    };

    return Animation;
  })(EventEmitter);
}).call(undefined);

},{"./Animators/BezierCurveAnimator":124,"./Animators/LinearAnimator":125,"./Animators/SpringDHOAnimator":126,"./Animators/SpringRK4Animator":127,"./Config":135,"./Defaults":138,"./EventEmitter":140,"./Underscore":162,"./Utils":163}],121:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var AnimationGroup,
      EventEmitter,
      _,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("./Underscore")._;

  EventEmitter = require("./EventEmitter").EventEmitter;

  AnimationGroup = (function (superClass) {
    extend(AnimationGroup, superClass);

    function AnimationGroup(animations) {
      if (animations == null) {
        animations = [];
      }
      this.setAnimations(animations);
      this._currentAnimation = null;
    }

    AnimationGroup.prototype.setAnimations = function (animations) {
      return this._animations = _.map(animations, function (animation) {
        return animation.copy();
      });
    };

    AnimationGroup.prototype.start = function () {
      this.emit("start");
      _.map(this._animations, (function (_this) {
        return function (animation, index) {
          var nextAnimation;
          nextAnimation = _this._animations[index + 1];
          if (nextAnimation) {
            return animation.on(Events.AnimationEnd, function () {
              nextAnimation.start();
              return _this._currentAnimation = animation;
            });
          } else {
            return animation.on(Events.AnimationEnd, function () {
              _this.emit("end");
              return _this._currentAnimation = null;
            });
          }
        };
      })(this));
      return this._animations[0].start();
    };

    AnimationGroup.prototype.stop = function () {
      var ref;
      return (ref = this._currentAnimation) != null ? ref.stop() : void 0;
    };

    return AnimationGroup;
  })(EventEmitter);
}).call(undefined);

},{"./EventEmitter":140,"./Underscore":162}],122:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Config,
      Engine,
      EventEmitter,
      Utils,
      _,
      famous,
      getTime,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  EventEmitter = require("./EventEmitter").EventEmitter;

  famous = require("famous");

  Engine = famous.core.Engine;

  getTime = function () {
    return Utils.getTime() * 1000;
  };

  exports.AnimationLoop = (function (superClass) {
    extend(AnimationLoop, superClass);

    function AnimationLoop() {
      this.start = bind(this.start, this);
      this._framerOriginalStart = bind(this._framerOriginalStart, this);
      this.delta = 1 / 60;
      this.raf = true;
      if (Utils.webkitVersion() > 600 && Utils.isDesktop()) {
        this.raf = false;
      }
      if (Utils.webkitVersion() > 600 && Utils.isFramerStudio()) {
        this.raf = false;
      }
    }

    AnimationLoop.prototype._framerOriginalStart = function () {
      var _timestamp, animationLoop, tick, update;
      animationLoop = this;
      _timestamp = getTime();
      update = function () {
        var delta, timestamp;
        if (animationLoop.delta) {
          delta = animationLoop.delta;
        } else {
          timestamp = getTime();
          delta = (timestamp - _timestamp) / 1000;
          _timestamp = timestamp;
        }
        animationLoop.emit("update", delta);
        return animationLoop.emit("render", delta);
      };
      tick = function (timestamp) {
        if (animationLoop.raf) {
          update();
          return window.requestAnimationFrame(tick);
        } else {
          return window.setTimeout(function () {
            update();
            return window.requestAnimationFrame(tick);
          }, 0);
        }
      };
      return tick();
    };

    AnimationLoop.prototype.start = function () {
      var _timestamp, animationLoop, update, updater;
      console.log("==== AnimationLoop::start() ====");
      animationLoop = this;
      _timestamp = getTime();
      update = function () {
        var delta, timestamp;
        if (animationLoop.delta) {
          delta = animationLoop.delta;
        } else {
          timestamp = getTime();
          delta = (timestamp - _timestamp) / 1000;
          _timestamp = timestamp;
        }
        animationLoop.emit("update", delta);
        return animationLoop.emit("render", delta);
      };
      updater = {
        onUpdate: (function (_this) {
          return function () {
            update();
            return Engine.nextTick(updater.onUpdate);
          };
        })(this)
      };
      return Engine.nextTick(updater.onUpdate);
    };

    return AnimationLoop;
  })(EventEmitter);
}).call(undefined);

},{"./Config":135,"./EventEmitter":140,"./Underscore":162,"./Utils":163,"famous":24}],123:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Config, Utils;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  exports.Animator = (function () {
    "The animator class is a very simple class that\n	- Takes a set of input values at setup({input values})\n	- Emits an output value for progress (0 -> 1) in value(progress)";
    function Animator(options) {
      if (options == null) {
        options = {};
      }
      this.setup(options);
    }

    Animator.prototype.setup = function (options) {
      throw Error("Not implemented");
    };

    Animator.prototype.next = function (delta) {
      throw Error("Not implemented");
    };

    Animator.prototype.finished = function () {
      throw Error("Not implemented");
    };

    return Animator;
  })();
}).call(undefined);

},{"./Config":135,"./Utils":163}],124:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Animator,
      BezierCurveDefaults,
      UnitBezier,
      Utils,
      _,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("../Underscore")._;

  Utils = require("../Utils");

  Animator = require("../Animator").Animator;

  BezierCurveDefaults = {
    "linear": [0, 0, 1, 1],
    "ease": [.25, .1, .25, 1],
    "ease-in": [.42, 0, 1, 1],
    "ease-out": [0, 0, .58, 1],
    "ease-in-out": [.42, 0, .58, 1]
  };

  exports.BezierCurveAnimator = (function (superClass) {
    extend(BezierCurveAnimator, superClass);

    function BezierCurveAnimator() {
      return BezierCurveAnimator.__super__.constructor.apply(this, arguments);
    }

    BezierCurveAnimator.prototype.setup = function (options) {
      if (_.isString(options) && BezierCurveDefaults.hasOwnProperty(options.toLowerCase())) {
        options = {
          values: BezierCurveDefaults[options.toLowerCase()]
        };
      }
      if (options.values && _.isString(options.values) && BezierCurveDefaults.hasOwnProperty(options.values.toLowerCase())) {
        options = {
          values: BezierCurveDefaults[options.values.toLowerCase()],
          time: options.time
        };
      }
      if (_.isArray(options) && options.length === 4) {
        options = {
          values: options
        };
      }
      this.options = _.defaults(options, {
        values: BezierCurveDefaults["ease-in-out"],
        time: 1,
        precision: 1 / 1000
      });
      return this._unitBezier = new UnitBezier(this.options.values[0], this.options.values[1], this.options.values[2], this.options.values[3], this._time = 0);
    };

    BezierCurveAnimator.prototype.next = function (delta) {
      this._time += delta;
      if (this.finished()) {
        return 1;
      }
      return this._unitBezier.solve(this._time / this.options.time);
    };

    BezierCurveAnimator.prototype.finished = function () {
      return this._time >= this.options.time - this.options.precision;
    };

    return BezierCurveAnimator;
  })(Animator);

  UnitBezier = (function () {
    UnitBezier.prototype.epsilon = 1e-6;

    function UnitBezier(p1x, p1y, p2x, p2y) {
      this.cx = 3.0 * p1x;
      this.bx = 3.0 * (p2x - p1x) - this.cx;
      this.ax = 1.0 - this.cx - this.bx;
      this.cy = 3.0 * p1y;
      this.by = 3.0 * (p2y - p1y) - this.cy;
      this.ay = 1.0 - this.cy - this.by;
    }

    UnitBezier.prototype.sampleCurveX = function (t) {
      return ((this.ax * t + this.bx) * t + this.cx) * t;
    };

    UnitBezier.prototype.sampleCurveY = function (t) {
      return ((this.ay * t + this.by) * t + this.cy) * t;
    };

    UnitBezier.prototype.sampleCurveDerivativeX = function (t) {
      return (3.0 * this.ax * t + 2.0 * this.bx) * t + this.cx;
    };

    UnitBezier.prototype.solveCurveX = function (x) {
      var d2, i, t0, t1, t2, x2;
      t2 = x;
      i = 0;
      while (i < 8) {
        x2 = this.sampleCurveX(t2) - x;
        if (Math.abs(x2) < this.epsilon) {
          return t2;
        }
        d2 = this.sampleCurveDerivativeX(t2);
        if (Math.abs(d2) < this.epsilon) {
          break;
        }
        t2 = t2 - x2 / d2;
        i++;
      }
      t0 = 0.0;
      t1 = 1.0;
      t2 = x;
      if (t2 < t0) {
        return t0;
      }
      if (t2 > t1) {
        return t1;
      }
      while (t0 < t1) {
        x2 = this.sampleCurveX(t2);
        if (Math.abs(x2 - x) < this.epsilon) {
          return t2;
        }
        if (x > x2) {
          t0 = t2;
        } else {
          t1 = t2;
        }
        t2 = (t1 - t0) * .5 + t0;
      }
      return t2;
    };

    UnitBezier.prototype.solve = function (x) {
      return this.sampleCurveY(this.solveCurveX(x));
    };

    return UnitBezier;
  })();
}).call(undefined);

},{"../Animator":123,"../Underscore":162,"../Utils":163}],125:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Animator,
      Utils,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Animator = require("../Animator").Animator;

  exports.LinearAnimator = (function (superClass) {
    extend(LinearAnimator, superClass);

    function LinearAnimator() {
      return LinearAnimator.__super__.constructor.apply(this, arguments);
    }

    LinearAnimator.prototype.setup = function (options) {
      this.options = _.defaults(options, {
        time: 1,
        precision: 1 / 1000
      });
      return this._time = 0;
    };

    LinearAnimator.prototype.next = function (delta) {
      this._time += delta;
      if (this.finished()) {
        return 1;
      }
      return this._time / this.options.time;
    };

    LinearAnimator.prototype.finished = function () {
      return this._time >= this.options.time - this.options.precision;
    };

    return LinearAnimator;
  })(Animator);
}).call(undefined);

},{"../Animator":123,"../Utils":163}],126:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Animator,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Animator = require("../Animator").Animator;

  exports.SpringDHOAnimator = (function (superClass) {
    extend(SpringDHOAnimator, superClass);

    function SpringDHOAnimator() {
      this.finished = bind(this.finished, this);
      return SpringDHOAnimator.__super__.constructor.apply(this, arguments);
    }

    SpringDHOAnimator.prototype.setup = function (options) {
      this.options = _.defaults(options, {
        velocity: 0,
        tolerance: 1 / 10000,
        stiffness: 50,
        damping: 2,
        mass: 0.2,
        time: null
      });
      console.log("SpringDHOAnimator.options", this.options, options);
      this._time = 0;
      this._value = 0;
      return this._velocity = this.options.velocity;
    };

    SpringDHOAnimator.prototype.next = function (delta) {
      var F_damper, F_spring, b, k;
      if (this.finished()) {
        return 1;
      }
      this._time += delta;
      k = 0 - this.options.stiffness;
      b = 0 - this.options.damping;
      F_spring = k * (this._value - 1);
      F_damper = b * this._velocity;
      this._velocity += (F_spring + F_damper) / this.options.mass * delta;
      this._value += this._velocity * delta;
      return this._value;
    };

    SpringDHOAnimator.prototype.finished = function () {
      return this._time > 0 && Math.abs(this._velocity) < this.options.tolerance;
    };

    return SpringDHOAnimator;
  })(Animator);
}).call(undefined);

},{"../Animator":123,"../Utils":163}],127:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Animator,
      Integrator,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Animator = require("../Animator").Animator;

  Integrator = require("../Integrator").Integrator;

  exports.SpringRK4Animator = (function (superClass) {
    extend(SpringRK4Animator, superClass);

    function SpringRK4Animator() {
      this.finished = bind(this.finished, this);
      return SpringRK4Animator.__super__.constructor.apply(this, arguments);
    }

    SpringRK4Animator.prototype.setup = function (options) {
      this.options = _.defaults(options, {
        tension: 500,
        friction: 10,
        velocity: 0,
        tolerance: 1 / 10000,
        time: null
      });
      this._time = 0;
      this._value = 0;
      this._velocity = this.options.velocity;
      this._stopSpring = false;
      return this._integrator = new Integrator((function (_this) {
        return function (state) {
          return -_this.options.tension * state.x - _this.options.friction * state.v;
        };
      })(this));
    };

    SpringRK4Animator.prototype.next = function (delta) {
      var finalVelocity, net1DVelocity, netFloat, netValueIsLow, netVelocityIsLow, stateAfter, stateBefore;
      if (this.finished()) {
        return 1;
      }
      this._time += delta;
      stateBefore = {};
      stateAfter = {};
      stateBefore.x = this._value - 1;
      stateBefore.v = this._velocity;
      stateAfter = this._integrator.integrateState(stateBefore, delta);
      this._value = 1 + stateAfter.x;
      finalVelocity = stateAfter.v;
      netFloat = stateAfter.x;
      net1DVelocity = stateAfter.v;
      netValueIsLow = Math.abs(netFloat) < this.options.tolerance;
      netVelocityIsLow = Math.abs(net1DVelocity) < this.options.tolerance;
      this._stopSpring = netValueIsLow && netVelocityIsLow;
      this._velocity = finalVelocity;
      return this._value;
    };

    SpringRK4Animator.prototype.finished = function () {
      return this._stopSpring;
    };

    return SpringRK4Animator;
  })(Animator);
}).call(undefined);

},{"../Animator":123,"../Integrator":150,"../Utils":163}],128:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Layer,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Layer = require("./Layer").Layer;

  "Todo: make it work in a parent layer";

  exports.BackgroundLayer = (function (superClass) {
    extend(BackgroundLayer, superClass);

    function BackgroundLayer(options) {
      if (options == null) {
        options = {};
      }
      this.layout = bind(this.layout, this);
      if (options.backgroundColor == null) {
        options.backgroundColor = "#fff";
      }
      BackgroundLayer.__super__.constructor.call(this, options);
      this.sendToBack();
      this.layout();
    }

    BackgroundLayer.prototype.layout = function () {};

    return BackgroundLayer;
  })(Layer);
}).call(undefined);

},{"./Layer":151}],129:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var CounterKey,
      DefinedPropertiesKey,
      DefinedPropertiesValuesKey,
      EventEmitter,
      Utils,
      _,
      capitalizeFirstLetter,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  EventEmitter = require("./EventEmitter").EventEmitter;

  CounterKey = "_ObjectCounter";

  DefinedPropertiesKey = "_DefinedPropertiesKey";

  DefinedPropertiesValuesKey = "_DefinedPropertiesValuesKey";

  capitalizeFirstLetter = function (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  exports.BaseClass = (function (superClass) {
    extend(BaseClass, superClass);

    BaseClass.define = function (propertyName, descriptor) {
      var getName, i, j, len, ref, setName;
      ref = ["enumerable", "exportable", "importable"];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (descriptor.hasOwnProperty(i)) {
          if (!_.isBoolean(descriptor[i])) {
            throw Error("woops " + propertyName + " " + descriptor[i]);
          }
        }
      }
      if (this !== BaseClass) {
        descriptor.propertyName = propertyName;
        if (descriptor.enumerable == null) {
          descriptor.enumerable = true;
        }
        if (descriptor.exportable == null) {
          descriptor.exportable = true;
        }
        if (descriptor.importable == null) {
          descriptor.importable = true;
        }
        descriptor.importable = descriptor.importable && descriptor.set;
        if (descriptor.exportable || descriptor.importable) {
          if (this[DefinedPropertiesKey] == null) {
            this[DefinedPropertiesKey] = {};
          }
          this[DefinedPropertiesKey][propertyName] = descriptor;
        }
      }
      getName = "get" + capitalizeFirstLetter(propertyName);
      this.prototype[getName] = descriptor.get;
      descriptor.get = this.prototype[getName];
      if (descriptor.set) {
        setName = "set" + capitalizeFirstLetter(propertyName);
        this.prototype[setName] = descriptor.set;
        descriptor.set = this.prototype[setName];
      }
      return Object.defineProperty(this.prototype, propertyName, descriptor);
    };

    BaseClass.simpleProperty = function (name, fallback, options) {
      if (options == null) {
        options = {};
      }
      return _.extend(options, {
        "default": fallback,
        get: function get() {
          return this._getPropertyValue(name);
        },
        set: function set(value) {
          return this._setPropertyValue(name, value);
        }
      });
    };

    BaseClass.proxyProperty = function (keyPath, options) {
      var objectKey;
      if (options == null) {
        options = {};
      }
      objectKey = keyPath.split(".")[0];
      return _.extend(options, {
        get: function get() {
          if (!_.isObject(this[objectKey])) {
            return;
          }
          return Utils.getValueForKeyPath(this, keyPath);
        },
        set: function set(value) {
          if (!_.isObject(this[objectKey])) {
            return;
          }
          return Utils.setValueForKeyPath(this, keyPath, value);
        }
      });
    };

    BaseClass.prototype._setPropertyValue = function (k, v) {
      return this[DefinedPropertiesValuesKey][k] = v;
    };

    BaseClass.prototype._getPropertyValue = function (k) {
      return Utils.valueOrDefault(this[DefinedPropertiesValuesKey][k], this._getPropertyDefaultValue(k));
    };

    BaseClass.prototype._getPropertyDefaultValue = function (k) {
      return this._propertyList()[k]["default"];
    };

    BaseClass.prototype._propertyList = function () {
      return this.constructor[DefinedPropertiesKey];
    };

    BaseClass.prototype.keys = function () {
      return _.keys(this.props);
    };

    BaseClass.define("props", {
      importable: false,
      exportable: false,
      get: function get() {
        var descriptor, key, keys, propertyList;
        keys = [];
        propertyList = this._propertyList();
        for (key in propertyList) {
          descriptor = propertyList[key];
          if (descriptor.exportable) {
            keys.push(key);
          }
        }
        return _.pick(this, keys);
      },
      set: function set(value) {
        var k, propertyList, ref, results, v;
        propertyList = this._propertyList();
        results = [];
        for (k in value) {
          v = value[k];
          if ((ref = propertyList[k]) != null ? ref.importable : void 0) {
            results.push(this[k] = v);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    BaseClass.define("id", {
      get: function get() {
        return this._id;
      }
    });

    BaseClass.prototype.toInspect = function () {
      return "<" + this.constructor.name + " id:" + (this.id || null) + ">";
    };

    function BaseClass(options) {
      this.toInspect = bind(this.toInspect, this);
      this._getPropertyValue = bind(this._getPropertyValue, this);
      this._setPropertyValue = bind(this._setPropertyValue, this);
      var base;
      BaseClass.__super__.constructor.apply(this, arguments);
      this._context = typeof Framer !== "undefined" && Framer !== null ? Framer.CurrentContext : void 0;
      this[DefinedPropertiesValuesKey] = {};
      if ((base = this.constructor)[CounterKey] == null) {
        base[CounterKey] = 0;
      }
      this.constructor[CounterKey] += 1;
      this._id = this.constructor[CounterKey];
      this._applyOptionsAndDefaults(options);
    }

    BaseClass.prototype._applyOptionsAndDefaults = function (options) {
      var descriptor, key, ref, results, value;
      ref = this._propertyList();
      results = [];
      for (key in ref) {
        descriptor = ref[key];
        if (descriptor.set) {
          value = Utils.valueOrDefault(descriptor.importable ? options != null ? options[key] : void 0 : void 0, this._getPropertyDefaultValue(key));
          if (!(value === null || value === void 0)) {
            results.push(this[key] = value);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return BaseClass;
  })(EventEmitter);
}).call(undefined);

},{"./EventEmitter":140,"./Underscore":162,"./Utils":163}],130:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      CanvasClass,
      Events,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  CanvasClass = (function (superClass) {
    extend(CanvasClass, superClass);

    function CanvasClass() {
      this.addListener = bind(this.addListener, this);
      return CanvasClass.__super__.constructor.apply(this, arguments);
    }

    CanvasClass.define("width", {
      get: function get() {
        return window.innerWidth;
      }
    });

    CanvasClass.define("height", {
      get: function get() {
        return window.innerHeight;
      }
    });

    CanvasClass.define("size", {
      get: function get() {
        return {
          width: this.width,
          height: this.height
        };
      }
    });

    CanvasClass.define("frame", {
      get: function get() {
        return {
          x: 0,
          y: 0,
          width: this.width,
          height: this.height
        };
      }
    });

    CanvasClass.prototype.addListener = function (eventName, listener) {
      if (eventName === "resize") {
        Events.wrap(window).addEventListener("resize", (function (_this) {
          return function () {
            return _this.emit("resize");
          };
        })(this));
      }
      return CanvasClass.__super__.addListener.call(this, eventName, listener);
    };

    CanvasClass.prototype.on = CanvasClass.prototype.addListener;

    return CanvasClass;
  })(BaseClass);

  exports.Canvas = new CanvasClass();
}).call(undefined);

},{"./BaseClass":129,"./Events":142}],131:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var AppleWatch38Device,
      AppleWatch42Device,
      BaseClass,
      Defaults,
      DeviceComponentDefaultDevice,
      Devices,
      Events,
      Layer,
      Nexus5BaseDevice,
      Nexus5BaseDeviceHand,
      Nexus9BaseDevice,
      Utils,
      _,
      iPadAirBaseDevice,
      iPadAirBaseDeviceHand,
      iPadMiniBaseDevice,
      iPadMiniBaseDeviceHand,
      iPhone5BaseDevice,
      iPhone5BaseDeviceHand,
      iPhone5CBaseDevice,
      iPhone5CBaseDeviceHand,
      iPhone6BaseDevice,
      iPhone6BaseDeviceHand,
      iPhone6PlusBaseDevice,
      iPhone6PlusBaseDeviceHand,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  _ = require("../Underscore")._;

  DeviceComponentDefaultDevice = "iphone-6-silver";

  BaseClass = require("../BaseClass").BaseClass;

  Layer = require("../Layer").Layer;

  Defaults = require("../Defaults").Defaults;

  Events = require("../Events").Events;

  /*
  
  Device._setup()
  Device._update()
  Device._setupContext()
  
  Device.fullScreen bool
  Device.deviceType str
  Device.padding int
  
  Device.orientation(orientation:float)
  Device.orientationName landscape|portrait|unknown
  Device.rotateLeft()
  Device.rotateRight()
  
  Device.setDeviceScale(zoom:float, animate:bool)
  Device.setContentScale(zoom:float, animate:bool)
  
  Device.keyboard bool
  Device.setKeyboard(visible:bool, animate:bool)
  Device.showKeyboard(animate:bool)
  Device.hideKeyboard(animate:bool)
  Device.toggleKeyboard(animate:bool)
  
  
   * Events
  Events.DeviceTypeDidChange
  Events.DeviceFullScreenDidChange
  Events.DeviceKeyboardWillShow
  Events.DeviceKeyboardDidShow
   */

  exports.DeviceComponent = (function (superClass) {
    extend(DeviceComponent, superClass);

    DeviceComponent.define("context", {
      get: function get() {
        return this._context;
      }
    });

    function DeviceComponent(options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      this._animateKeyboard = bind(this._animateKeyboard, this);
      this._updateDeviceImage = bind(this._updateDeviceImage, this);
      this._update = bind(this._update, this);
      defaults = Defaults.getDefaults("DeviceComponent", options);
      if (Framer.Defaults.hasOwnProperty("DeviceView")) {
        defaults = _.extend(defaults, Framer.Defaults.DeviceView);
      }
      this._setup();
      this.animationOptions = defaults.animationOptions;
      this.deviceType = defaults.deviceType;
      _.extend(this, _.defaults(options, defaults));
    }

    DeviceComponent.prototype._setup = function () {
      var i, layer, len, ref;
      if (this._setupDone) {
        return;
      }
      this._setupDone = true;
      this.background = new Layer();
      this.background.clip = true;
      this.background.backgroundColor = "transparent";
      this.background.classList.add("DeviceBackground");
      this.phone = new Layer();
      this.screen = new Layer({
        superLayer: this.phone
      });
      this.viewport = new Layer({
        superLayer: this.screen
      });
      this.content = new Layer({
        superLayer: this.viewport
      });
      this.phone.backgroundColor = "transparent";
      this.phone.classList.add("DevicePhone");
      this.screen.backgroundColor = "transparent";
      this.screen.classList.add("DeviceScreen");
      this.viewport.backgroundColor = "transparent";
      this.viewport.classList.add("DeviceComponentPort");
      this.content.backgroundColor = "transparent";
      this.content.classList.add("DeviceContent");
      this.content.originX = 0;
      this.content.originY = 0;
      this.keyboardLayer = new Layer({
        superLayer: this.viewport
      });
      this.keyboardLayer.on("click", (function (_this) {
        return function () {
          return _this.toggleKeyboard();
        };
      })(this));
      this.keyboardLayer.classList.add("DeviceKeyboard");
      this.keyboardLayer.backgroundColor = "transparent";
      Framer.CurrentContext.eventManager.wrap(window).addEventListener("resize", this._update);
      ref = [this.background, this.phone, this.viewport, this.content, this.screen];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        layer.on("touchmove", function (event) {
          return event.preventDefault();
        });
      }
      return this._context = new Framer.Context({
        parentLayer: this.content,
        name: "Device"
      });
    };

    DeviceComponent.prototype._update = function () {
      var backgroundOverlap, contentScaleFactor, height, i, layer, len, ref, ref1, width;
      contentScaleFactor = this.contentScale;
      if (contentScaleFactor > 1) {
        contentScaleFactor = 1;
      }
      if (this._shouldRenderFullScreen()) {
        ref = [this.background, this.phone, this.viewport, this.content, this.screen];
        for (i = 0, len = ref.length; i < len; i++) {
          layer = ref[i];
          layer.x = layer.y = 0;
          layer.width = window.innerWidth / contentScaleFactor;
          layer.height = window.innerHeight / contentScaleFactor;
          layer.scale = 1;
        }
        this.content.scale = contentScaleFactor;
        return this._positionKeyboard();
      } else {
        backgroundOverlap = 100;
        this.background.x = 0 - backgroundOverlap;
        this.background.y = 0 - backgroundOverlap;
        this.background.width = window.innerWidth + 2 * backgroundOverlap;
        this.background.height = window.innerHeight + 2 * backgroundOverlap;
        this.phone.scale = this._calculatePhoneScale();
        this.phone.center();
        ref1 = this._getOrientationDimensions(this._device.screenWidth / contentScaleFactor, this._device.screenHeight / contentScaleFactor), width = ref1[0], height = ref1[1];
        this.screen.width = this._device.screenWidth;
        this.screen.height = this._device.screenHeight;
        this.viewport.width = this.content.width = width;
        this.viewport.height = this.content.height = height;
        return this.screen.center();
      }
    };

    DeviceComponent.prototype._shouldRenderFullScreen = function () {
      if (!this._device) {
        return true;
      }
      if (this.fullScreen === true) {
        return true;
      }
      if (this.deviceType === "fullscreen") {
        return true;
      }
      if (Utils.deviceType() === "phone" && Utils.deviceType() === this._device.deviceType) {
        return true;
      }
      if (Utils.deviceType() === "tablet" && Utils.deviceType() === this._device.deviceType) {
        return true;
      }
      if (Utils.deviceType() === "phone" && this._device.deviceType === "tablet") {
        return true;
      }
      return false;
    };

    DeviceComponent.prototype.setupContext = function () {
      return Framer.CurrentContext = this._context;
    };

    DeviceComponent.define("fullScreen", {
      get: function get() {
        return this._fullScreen;
      },
      set: function set(fullScreen) {
        return this._setFullScreen(fullScreen);
      }
    });

    DeviceComponent.prototype._setFullScreen = function (fullScreen) {
      if (this._deviceType === "fullscreen") {
        return;
      }
      if (!_.isBoolean(fullScreen)) {
        return;
      }
      if (fullScreen === this._fullScreen) {
        return;
      }
      this._fullScreen = fullScreen;
      if (fullScreen === true) {
        this.phone.image = "";
      } else {
        this._updateDeviceImage();
      }
      this._update();
      this.keyboard = false;
      this._positionKeyboard();
      return this.emit("change:fullScreen");
    };

    DeviceComponent.define("deviceType", {
      get: function get() {
        return this._deviceType;
      },
      set: function set(deviceType) {
        var device, shouldZoomToFit;
        if (deviceType === this._deviceType) {
          return;
        }
        device = null;
        if (_.isString(deviceType)) {
          device = Devices[deviceType.toLowerCase()];
        }
        if (!device) {
          throw Error("No device named " + deviceType + ". Options are: " + _.keys(Devices));
        }
        if (this._device === device) {
          return;
        }
        shouldZoomToFit = this._deviceType === "fullscreen";
        this._device = _.clone(device);
        this._deviceType = deviceType;
        this.fullscreen = false;
        this._updateDeviceImage();
        this._update();
        this.keyboard = false;
        this._positionKeyboard();
        this.emit("change:deviceType");
        if (shouldZoomToFit) {
          return this.deviceScale = "fit";
        }
      }
    });

    DeviceComponent.prototype._updateDeviceImage = function () {
      if (/PhantomJS/.test(navigator.userAgent)) {
        return;
      }
      if (this._shouldRenderFullScreen()) {
        return this.phone.image = "";
      } else if (!this._deviceImageUrl(this._deviceImageName())) {
        return this.phone.image = "";
      } else {
        this.phone._alwaysUseImageCache = true;
        this.phone.image = this._deviceImageUrl(this._deviceImageName());
        this.phone.width = this._device.deviceImageWidth;
        return this.phone.height = this._device.deviceImageHeight;
      }
    };

    DeviceComponent.prototype._deviceImageName = function () {
      if (this._device.hasOwnProperty("deviceImage")) {
        return this._device.deviceImage;
      }
      return this._deviceType + ".png";
    };

    DeviceComponent.prototype._deviceImageUrl = function (name) {
      var resourceUrl;
      if (!name) {
        return null;
      }
      if (_.startsWith(name, "http://") || _.startsWith(name, "https://")) {
        return name;
      }
      if (Utils.isFramerStudio() && window.FramerStudioInfo) {
        resourceUrl = window.FramerStudioInfo.deviceImagesUrl;
      } else {
        resourceUrl = "//resources.framerjs.com/static/DeviceResources";
      }
      if (Utils.isJP2Supported() && this._device.deviceImageJP2 !== false) {
        return resourceUrl + "/" + name.replace(".png", ".jp2");
      } else {
        return resourceUrl + "/" + name;
      }
    };

    DeviceComponent.define("deviceScale", {
      get: function get() {
        if (this._shouldRenderFullScreen()) {
          return 1;
        }
        return this._deviceScale || 1;
      },
      set: function set(deviceScale) {
        return this.setDeviceScale(deviceScale, false);
      }
    });

    DeviceComponent.prototype.setDeviceScale = function (deviceScale, animate) {
      var phoneScale;
      if (animate == null) {
        animate = false;
      }
      if (deviceScale === "fit" || deviceScale < 0) {
        deviceScale = "fit";
      } else {
        deviceScale = parseFloat(deviceScale);
      }
      if (deviceScale === this._deviceScale) {
        return;
      }
      this._deviceScale = deviceScale;
      if (this._shouldRenderFullScreen()) {
        return;
      }
      if (deviceScale === "fit") {
        phoneScale = this._calculatePhoneScale();
      } else {
        phoneScale = deviceScale;
      }
      this.phone.animateStop();
      if (animate) {
        this.phone.animate(_.extend(this.animationOptions, {
          properties: {
            scale: phoneScale
          }
        }));
      } else {
        this.phone.scale = phoneScale;
        this.phone.center();
      }
      return this.emit("change:deviceScale");
    };

    DeviceComponent.prototype._calculatePhoneScale = function () {
      var height, paddingOffset, phoneScale, ref, ref1, width;
      if (this._deviceScale && this._deviceScale !== "fit") {
        return this._deviceScale;
      }
      ref = this._getOrientationDimensions(this.phone.width, this.phone.height), width = ref[0], height = ref[1];
      paddingOffset = ((ref1 = this._device) != null ? ref1.paddingOffset : void 0) || 0;
      phoneScale = _.min([(window.innerWidth - (this.padding + paddingOffset) * 2) / width, (window.innerHeight - (this.padding + paddingOffset) * 2) / height]);
      return phoneScale;
    };

    DeviceComponent.define("contentScale", {
      get: function get() {
        return this._contentScale || 1;
      },
      set: function set(contentScale) {
        return this.setContentScale(contentScale, false);
      }
    });

    DeviceComponent.prototype.setContentScale = function (contentScale, animate) {
      if (animate == null) {
        animate = false;
      }
      contentScale = parseFloat(contentScale);
      if (contentScale <= 0) {
        return;
      }
      if (contentScale === this._contentScale) {
        return;
      }
      this._contentScale = contentScale;
      if (animate) {
        this.content.animate(_.extend(this.animationOptions, {
          properties: {
            scale: this._contentScale
          }
        }));
      } else {
        this.content.scale = this._contentScale;
      }
      this._update();
      return this.emit("change:contentScale");
    };

    DeviceComponent.define("orientation", {
      get: function get() {
        return this._orientation || 0;
      },
      set: function set(orientation) {
        return this.setOrientation(orientation, false);
      }
    });

    DeviceComponent.prototype.setOrientation = function (orientation, animate) {
      var _hadKeyboard, animation, contentProperties, height, phoneProperties, ref, ref1, width, x, y;
      if (animate == null) {
        animate = false;
      }
      if (orientation === "portrait") {
        orientation = 0;
      }
      if (orientation === "landscape") {
        orientation = 90;
      }
      if (this._shouldRenderFullScreen()) {
        return;
      }
      orientation = parseInt(orientation);
      if (orientation !== 0 && orientation !== 90 && orientation !== -90) {
        return;
      }
      if (orientation === this._orientation) {
        return;
      }
      this._orientation = orientation;
      phoneProperties = {
        rotationZ: this._orientation,
        scale: this._calculatePhoneScale()
      };
      ref = this._getOrientationDimensions(this._device.screenWidth, this._device.screenHeight), width = ref[0], height = ref[1];
      ref1 = [(this.screen.width - width) / 2, (this.screen.height - height) / 2], x = ref1[0], y = ref1[1];
      contentProperties = {
        rotationZ: -this._orientation,
        width: width,
        height: height,
        x: x,
        y: y
      };
      _hadKeyboard = this.keyboard;
      if (_hadKeyboard) {
        this.hideKeyboard(false);
      }
      this.phone.animateStop();
      this.viewport.animateStop();
      if (animate) {
        animation = this.phone.animate(_.extend(this.animationOptions, {
          properties: phoneProperties
        }));
        this.viewport.animate(_.extend(this.animationOptions, {
          properties: contentProperties
        }));
        animation.on(Events.AnimationEnd, (function (_this) {
          return function () {
            return _this._update();
          };
        })(this));
        if (_hadKeyboard) {
          animation.on(Events.AnimationEnd, (function (_this) {
            return function () {
              return _this.showKeyboard(true);
            };
          })(this));
        }
      } else {
        this.phone.props = phoneProperties;
        this.viewport.props = contentProperties;
        this._update();
        if (_hadKeyboard) {
          this.showKeyboard(true);
        }
      }
      this._renderKeyboard();
      return this.emit("change:orientation");
    };

    DeviceComponent.prototype.isPortrait = function () {
      return Math.abs(this._orientation) !== 90;
    };

    DeviceComponent.prototype.isLandscape = function () {
      return !this.isPortrait();
    };

    DeviceComponent.define("orientationName", {
      get: function get() {
        if (this.isPortrait()) {
          return "portrait";
        }
        if (this.isLandscape()) {
          return "landscape";
        }
      },
      set: function set(orientationName) {
        return this.setOrientation(orientationName, false);
      }
    });

    DeviceComponent.prototype.rotateLeft = function (animate) {
      if (animate == null) {
        animate = true;
      }
      if (this.orientation === 90) {
        return;
      }
      return this.setOrientation(this.orientation + 90, animate);
    };

    DeviceComponent.prototype.rotateRight = function (animate) {
      if (animate == null) {
        animate = true;
      }
      if (this.orientation === -90) {
        return;
      }
      return this.setOrientation(this.orientation - 90, animate);
    };

    DeviceComponent.prototype._getOrientationDimensions = function (width, height) {
      if (this.isLandscape()) {
        return [height, width];
      } else {
        return [width, height];
      }
    };

    DeviceComponent.define("keyboard", {
      get: function get() {
        return this._keyboard;
      },
      set: function set(keyboard) {
        return this.setKeyboard(keyboard, false);
      }
    });

    DeviceComponent.prototype.setKeyboard = function (keyboard, animate) {
      var ref, ref1;
      if (animate == null) {
        animate = false;
      }
      if (!this._device.hasOwnProperty("keyboards")) {
        return;
      }
      if (_.isString(keyboard)) {
        if ((ref = keyboard.toLowerCase()) === "1" || ref === "true") {
          keyboard = true;
        } else if ((ref1 = keyboard.toLowerCase()) === "0" || ref1 === "false") {
          keyboard = false;
        } else {
          return;
        }
      }
      if (!_.isBoolean(keyboard)) {
        return;
      }
      if (keyboard === this._keyboard) {
        return;
      }
      this._keyboard = keyboard;
      this.emit("change:keyboard");
      if (keyboard === true) {
        this.emit("keyboard:show:start");
        return this._animateKeyboard(this._keyboardShowY(), animate, (function (_this) {
          return function () {
            return _this.emit("keyboard:show:end");
          };
        })(this));
      } else {
        this.emit("keyboard:hide:start");
        return this._animateKeyboard(this._keyboardHideY(), animate, (function (_this) {
          return function () {
            return _this.emit("keyboard:hide:end");
          };
        })(this));
      }
    };

    DeviceComponent.prototype.showKeyboard = function (animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(true, animate);
    };

    DeviceComponent.prototype.hideKeyboard = function (animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(false, animate);
    };

    DeviceComponent.prototype.toggleKeyboard = function (animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(!this.keyboard, animate);
    };

    DeviceComponent.prototype._renderKeyboard = function () {
      if (!this._device.keyboards) {
        return;
      }
      this.keyboardLayer.image = this._deviceImageUrl(this._device.keyboards[this.orientationName].image);
      this.keyboardLayer.width = this._device.keyboards[this.orientationName].width;
      return this.keyboardLayer.height = this._device.keyboards[this.orientationName].height;
    };

    DeviceComponent.prototype._positionKeyboard = function () {
      this.keyboardLayer.centerX();
      if (this.keyboard) {
        return this._animateKeyboard(this._keyboardShowY(), false);
      } else {
        return this._animateKeyboard(this._keyboardHideY(), false);
      }
    };

    DeviceComponent.prototype._animateKeyboard = function (y, animate, callback) {
      var animation;
      this.keyboardLayer.bringToFront();
      this.keyboardLayer.animateStop();
      if (animate === false) {
        this.keyboardLayer.y = y;
        return typeof callback === "function" ? callback() : void 0;
      } else {
        animation = this.keyboardLayer.animate(_.extend(this.animationOptions, {
          properties: {
            y: y
          }
        }));
        return animation.on(Events.AnimationEnd, callback);
      }
    };

    DeviceComponent.prototype._keyboardShowY = function () {
      return this.viewport.height - this.keyboardLayer.height;
    };

    DeviceComponent.prototype._keyboardHideY = function () {
      return this.viewport.height;
    };

    return DeviceComponent;
  })(BaseClass);

  iPhone6BaseDevice = {
    deviceImageWidth: 870,
    deviceImageHeight: 1738,
    deviceImageJP2: true,
    screenWidth: 750,
    screenHeight: 1334,
    deviceType: "phone"
  };

  iPhone6BaseDeviceHand = _.extend({}, iPhone6BaseDevice, {
    deviceImageWidth: 1988,
    deviceImageHeight: 2368,
    deviceImageJP2: true,
    paddingOffset: -150
  });

  iPhone6PlusBaseDevice = {
    deviceImageWidth: 1460,
    deviceImageHeight: 2900,
    deviceImageJP2: true,
    screenWidth: 1242,
    screenHeight: 2208,
    deviceType: "phone"
  };

  iPhone6PlusBaseDeviceHand = _.extend({}, iPhone6PlusBaseDevice, {
    deviceImageWidth: 3128,
    deviceImageHeight: 3487,
    deviceImageJP2: true,
    paddingOffset: -150
  });

  iPhone5BaseDevice = {
    deviceImageWidth: 780,
    deviceImageHeight: 1608,
    deviceImageJP2: true,
    screenWidth: 640,
    screenHeight: 1136,
    deviceType: "phone"
  };

  iPhone5BaseDeviceHand = _.extend({}, iPhone5BaseDevice, {
    deviceImageWidth: 1884,
    deviceImageHeight: 2234,
    deviceImageJP2: true,
    paddingOffset: -200
  });

  iPhone5CBaseDevice = {
    deviceImageWidth: 776,
    deviceImageHeight: 1612,
    deviceImageJP2: true,
    screenWidth: 640,
    screenHeight: 1136,
    deviceType: "phone"
  };

  iPhone5CBaseDeviceHand = _.extend({}, iPhone5CBaseDevice, {
    deviceImageWidth: 1894,
    deviceImageHeight: 2244,
    deviceImageJP2: true,
    paddingOffset: -200
  });

  iPadMiniBaseDevice = {
    deviceImageWidth: 872,
    deviceImageHeight: 1292,
    deviceImageJP2: true,
    screenWidth: 768,
    screenHeight: 1024,
    deviceType: "tablet"
  };

  iPadMiniBaseDeviceHand = _.extend({}, iPadMiniBaseDevice, {
    deviceImageWidth: 1380,
    deviceImageHeight: 2072,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  iPadAirBaseDevice = {
    deviceImageWidth: 1769,
    deviceImageHeight: 2509,
    deviceImageJP2: true,
    screenWidth: 1536,
    screenHeight: 2048,
    deviceType: "tablet"
  };

  iPadAirBaseDeviceHand = _.extend({}, iPadAirBaseDevice, {
    deviceImageWidth: 4744,
    deviceImageHeight: 4101,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  Nexus5BaseDevice = {
    deviceImageWidth: 1208,
    deviceImageHeight: 2440,
    deviceImageJP2: true,
    screenWidth: 1080,
    screenHeight: 1920,
    deviceType: "phone"
  };

  Nexus5BaseDeviceHand = _.extend({}, Nexus5BaseDevice, {
    deviceImageWidth: 2692,
    deviceImageHeight: 2996,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  Nexus9BaseDevice = {
    deviceImageWidth: 1733,
    deviceImageHeight: 2575,
    deviceImageJP2: true,
    screenWidth: 1536,
    screenHeight: 2048,
    deviceType: "tablet"
  };

  AppleWatch42Device = {
    deviceImageWidth: 552,
    deviceImageHeight: 938,
    deviceImageJP2: true,
    screenWidth: 312,
    screenHeight: 390
  };

  AppleWatch38Device = {
    deviceImageWidth: 508,
    deviceImageHeight: 900,
    deviceImageJP2: true,
    screenWidth: 272,
    screenHeight: 340
  };

  Devices = {
    "fullscreen": {
      name: "Fullscreen",
      deviceType: "desktop"
    },
    "desktop-safari-1024-600": {
      deviceType: "browser",
      name: "Desktop Safari 1024 x 600",
      screenWidth: 1024,
      screenHeight: 600,
      deviceImageWidth: 1136,
      deviceImageHeight: 760,
      deviceImageJP2: true
    },
    "desktop-safari-1280-800": {
      deviceType: "browser",
      name: "Desktop Safari 1280 x 800",
      screenWidth: 1280,
      screenHeight: 800,
      deviceImageWidth: 1392,
      deviceImageHeight: 960,
      deviceImageJP2: true
    },
    "desktop-safari-1440-900": {
      deviceType: "browser",
      name: "Desktop Safari 1440 x 900",
      screenWidth: 1440,
      screenHeight: 900,
      deviceImageWidth: 1552,
      deviceImageHeight: 1060,
      deviceImageJP2: true
    },
    "iphone-6-spacegray": _.clone(iPhone6BaseDevice),
    "iphone-6-spacegray-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6-silver": _.clone(iPhone6BaseDevice),
    "iphone-6-silver-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6-gold": _.clone(iPhone6BaseDevice),
    "iphone-6-gold-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6plus-spacegray": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-spacegray-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-6plus-silver": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-silver-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-6plus-gold": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-gold-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-5s-spacegray": _.clone(iPhone5BaseDevice),
    "iphone-5s-spacegray-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5s-silver": _.clone(iPhone5BaseDevice),
    "iphone-5s-silver-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5s-gold": _.clone(iPhone5BaseDevice),
    "iphone-5s-gold-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5c-green": _.clone(iPhone5CBaseDevice),
    "iphone-5c-green-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-blue": _.clone(iPhone5CBaseDevice),
    "iphone-5c-blue-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-pink": _.clone(iPhone5CBaseDevice),
    "iphone-5c-pink-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-white": _.clone(iPhone5CBaseDevice),
    "iphone-5c-white-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-yellow": _.clone(iPhone5CBaseDevice),
    "iphone-5c-yellow-hand": _.clone(iPhone5CBaseDeviceHand),
    "ipad-mini-spacegray": _.clone(iPadMiniBaseDevice),
    "ipad-mini-spacegray-hand": _.clone(iPadMiniBaseDeviceHand),
    "ipad-mini-silver": _.clone(iPadMiniBaseDevice),
    "ipad-mini-silver-hand": _.clone(iPadMiniBaseDeviceHand),
    "ipad-air-spacegray": _.clone(iPadAirBaseDevice),
    "ipad-air-spacegray-hand": _.clone(iPadAirBaseDeviceHand),
    "ipad-air-silver": _.clone(iPadAirBaseDevice),
    "ipad-air-silver-hand": _.clone(iPadAirBaseDeviceHand),
    "nexus-5-black": _.clone(Nexus5BaseDevice),
    "nexus-5-black-hand": _.clone(Nexus5BaseDeviceHand),
    "nexus-9": _.clone(Nexus9BaseDevice),
    "applewatchsport-38-aluminum-sportband-black": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-blue": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-green": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-pink": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-white": _.clone(AppleWatch38Device),
    "applewatch-38-black-bracelet": _.clone(AppleWatch38Device),
    "applewatch-38-steel-bracelet": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-blue": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-gray": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-red": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-sportband-black": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-sportband-white": _.clone(AppleWatch38Device),
    "applewatchsport-42-aluminum-sportband-black": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-blue": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-green": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-pink": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-white": _.clone(AppleWatch42Device),
    "applewatch-42-black-bracelet": _.clone(AppleWatch42Device),
    "applewatch-42-steel-bracelet": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-blue": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-gray": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-red": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-sportband-black": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-sportband-white": _.clone(AppleWatch42Device)
  };

  exports.DeviceComponent.Devices = Devices;
}).call(undefined);

},{"../BaseClass":129,"../Defaults":138,"../Events":142,"../Layer":151,"../Underscore":162,"../Utils":163}],132:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Events,
      ScrollComponent,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  Events = require("../Events").Events;

  ScrollComponent = require("./ScrollComponent").ScrollComponent;

  "PageComponent\n\noriginX <number>\noriginY <number>\n\nvelocityThreshold <number>\nanimationOptions <animationOptions={}>\ncurrentPage <Layer>\nclosestPage(<originX:n, originY:n>) <Layer>\n\nnextPage(direction=\"\", currentPage)\nsnapToNextPage(direction=\"\", animate, animationOptions={})\n";

  exports.PageComponent = (function (superClass) {
    extend(PageComponent, superClass);

    PageComponent.define("originX", PageComponent.simpleProperty("originX", .5));

    PageComponent.define("originY", PageComponent.simpleProperty("originY", .5));

    PageComponent.define("velocityThreshold", PageComponent.simpleProperty("velocityThreshold", 0.1));

    PageComponent.define("animationOptions", PageComponent.simpleProperty("animationOptions", {
      curve: "spring(500,50,0)"
    }));

    function PageComponent() {
      this._resetHistory = bind(this._resetHistory, this);
      this._scrollEnd = bind(this._scrollEnd, this);
      this._onAminationEnd = bind(this._onAminationEnd, this);
      this._onAminationStep = bind(this._onAminationStep, this);
      this._onAminationStart = bind(this._onAminationStart, this);
      this._scrollMove = bind(this._scrollMove, this);
      this._scrollStart = bind(this._scrollStart, this);
      PageComponent.__super__.constructor.apply(this, arguments);
      this.content.draggable.momentum = false;
      this.content.draggable.bounce = false;
      this.on(Events.ScrollStart, this._scrollStart);
      this.on(Events.ScrollEnd, this._scrollEnd);
      this.content.on("change:frame", _.debounce(this._scrollMove, 16));
      this.content.on("change:subLayers", this._resetHistory);
      this._resetHistory();
    }

    PageComponent.define("closestPage", {
      get: function get() {
        return this.closestContentLayerForScrollPoint(this._originScrollPoint(), this.originX, this.originY);
      }
    });

    PageComponent.define("currentPage", {
      get: function get() {
        return _.last(this._previousPages);
      }
    });

    PageComponent.define("previousPage", {
      get: function get() {
        return this._previousPages[this._previousPages.length - 2];
      }
    });

    PageComponent.prototype.nextPage = function (direction, currentPage, withoutCurrentPage) {
      var layers, point;
      if (direction == null) {
        direction = "right";
      }
      if (currentPage == null) {
        currentPage = null;
      }
      if (withoutCurrentPage == null) {
        withoutCurrentPage = true;
      }
      if (currentPage == null) {
        currentPage = this.currentPage;
      }
      point = {
        x: 0,
        y: 0
      };
      if (currentPage) {
        point = Utils.framePointForOrigin(currentPage, this.originX, this.originY);
      }
      if (!withoutCurrentPage) {
        point = {
          x: this.scrollX + this.originX * this.width,
          y: this.scrollY + this.originY * this.height
        };
      }
      if (direction === "up" || direction === "top" || direction === "north") {
        layers = this.content.subLayersAbove(point, this.originX, this.originY);
      }
      if (direction === "down" || direction === "bottom" || direction === "south") {
        layers = this.content.subLayersBelow(point, this.originX, this.originY);
      }
      if (direction === "left" || direction === "west") {
        layers = this.content.subLayersLeft(point, this.originX, this.originY);
      }
      if (direction === "right" || direction === "east") {
        layers = this.content.subLayersRight(point, this.originX, this.originY);
      }
      if (withoutCurrentPage) {
        layers = _.without(layers, currentPage);
      }
      layers = Utils.frameSortByAbsoluteDistance(point, layers, this.originX, this.originY);
      return _.first(layers);
    };

    PageComponent.prototype.snapToPage = function (page, animate, animationOptions) {
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = null;
      }
      this.scrollToLayer(page, this.originX, this.originY, animate, animationOptions);
      if (this.currentPage !== page) {
        this._previousPages.push(page);
        this.emit("change:previousPage", this.previousPage);
        return this.emit("change:currentPage", this.currentPage);
      }
    };

    PageComponent.prototype.snapToNextPage = function (direction, animate, animationOptions) {
      var nextPage;
      if (direction == null) {
        direction = "right";
      }
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = null;
      }
      if (animationOptions == null) {
        animationOptions = this.animationOptions;
      }
      nextPage = this.nextPage(direction);
      if (nextPage == null) {
        nextPage = this.closestPage;
      }
      return this.snapToPage(nextPage, animate, animationOptions);
    };

    PageComponent.prototype.snapToPreviousPage = function () {
      if (!this.previousPage) {
        return;
      }
      this.snapToPage(this.previousPage);
      return this._previousPages = this._previousPages.slice(0, +(this._previousPages.length - 3) + 1 || 9e9);
    };

    PageComponent.prototype.addPage = function (page, direction) {
      var directions, point, ref;
      if (direction == null) {
        direction = "right";
      }
      directions = ["down", "bottom", "south"] + ["right", "east"];
      if ((ref = !direction, indexOf.call(directions, ref) >= 0)) {
        direction = "right";
        throw new Error(direction + " should be in " + directions);
      }
      point = page.point;
      if (this.content.subLayers.length) {
        if (direction === "right" || direction === "east") {
          point.x = Utils.frameGetMaxX(this.content.contentFrame());
        }
        if (direction === "down" || direction === "bottom" || direction === "south") {
          point.y = Utils.frameGetMaxY(this.content.contentFrame());
        }
      }
      page.point = point;
      if (page.superLayer !== this.content) {
        return page.superLayer = this.content;
      } else {
        return this.updateContent();
      }
    };

    PageComponent.prototype.setContentLayer = function (contentLayer) {
      if (this.content) {
        this._onAminateStop();
        this.content.off(Events.AnimationStart, this._onAminationStart);
        this.content.off(Events.AnimationStop, this._onAminationEnd);
      }
      PageComponent.__super__.setContentLayer.call(this, contentLayer);
      this.content.on(Events.AnimationStart, this._onAminationStart);
      return this.content.on(Events.AnimationStop, this._onAminationEnd);
    };

    PageComponent.prototype.horizontalPageIndex = function (page) {
      return _.sortBy(this.content.subLayers, function (l) {
        return l.x;
      }).indexOf(page);
    };

    PageComponent.prototype.verticalPageIndex = function (page) {
      return _.sortBy(this.content.subLayers, function (l) {
        return l.y;
      }).indexOf(page);
    };

    PageComponent.prototype._scrollStart = function () {
      return this._currentPage = this.currentPage;
    };

    PageComponent.prototype._scrollMove = function () {
      var currentPage;
      currentPage = this.currentPage;
      if (currentPage !== _.last(this._previousPages) && currentPage !== void 0) {
        this._previousPages.push(currentPage);
        return this.emit("change:currentPage", {
          old: this.previousPage,
          "new": currentPage
        });
      }
    };

    PageComponent.prototype._onAminationStart = function () {
      this._isMoving = true;
      this._isAnimating = true;
      return this.content.on("change:frame", this._onAminationStep);
    };

    PageComponent.prototype._onAminationStep = function () {
      return this.emit(Events.Move, this.content.point);
    };

    PageComponent.prototype._onAminationEnd = function () {
      this._isMoving = false;
      this._isAnimating = false;
      return this.content.off("change:frame", this._onAminationStep);
    };

    PageComponent.prototype._scrollEnd = function () {
      var end, nextPage, start, velocity, xDisabled, xLock, yDisabled, yLock;
      velocity = this.content.draggable.velocity;
      xDisabled = !this.scrollHorizontal && (this.direction === "right" || this.direction === "left");
      yDisabled = !this.scrollVertical && (this.direction === "down" || this.direction === "up");
      xLock = this.content.draggable._directionLockEnabledX && (this.direction === "right" || this.direction === "left");
      yLock = this.content.draggable._directionLockEnabledY && (this.direction === "down" || this.direction === "up");
      if (Math.max(Math.abs(velocity.x), Math.abs(velocity.y)) < this.velocityThreshold || xLock || yLock || xDisabled || yDisabled) {
        start = this.content.draggable._layerStartPoint;
        end = this.content.draggable.layer.point;
        if (start.x !== end.x || start.y !== end.y) {
          this.snapToPage(this.closestPage, true, this.animationOptions);
        }
        return;
      }
      nextPage = this.nextPage(this.direction, this._currentPage, false);
      if (nextPage == null) {
        nextPage = this.closestPage;
      }
      return this.snapToPage(nextPage, true, this.animationOptions);
    };

    PageComponent.prototype._originScrollPoint = function () {
      var scrollPoint;
      scrollPoint = this.scrollPoint;
      scrollPoint.x += this.width * this.originX;
      scrollPoint.y += this.height * this.originY;
      return scrollPoint;
    };

    PageComponent.prototype._resetHistory = function () {
      this._currentPage = this.closestPage;
      return this._previousPages = [this._currentPage];
    };

    return PageComponent;
  })(ScrollComponent);
}).call(undefined);

},{"../Events":142,"./ScrollComponent":133}],133:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var EventMappers,
      Events,
      Layer,
      Utils,
      _,
      wrapComponent,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      slice = [].slice,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  _ = require("../Underscore")._;

  Utils = require("../Utils");

  Layer = require("../Layer").Layer;

  Events = require("../Events").Events;

  "ScrollComponent\n\ncontent <Layer>\ncontentSize <{width:n, height:n}>\ncontentInset <{top:n, right:n, bottom:n, left:n}> TODO\ncontentOffset <{x:n, y:n}> TODO\nscrollFrame <{x:n, y:n, width:n, height:n}>\nscrollPoint <{x:n, y:n}>\nscrollHorizontal <bool>\nscrollVertical <bool>\nspeedX <number>\nspeedY <number>\ndelaysContentTouches <bool> TODO\nloadPreset(<\"ios\"|\"android\">) TODO\nscrollToPoint(<{x:n, y:n}>, animate=true, animationOptions={})\nscrollToLayer(contentLayer, originX=0, originY=0)\nscrollFrameForContentLayer(<x:n, y:n>) <{x:n, y:n, width:n, height:n}> TODO\nclosestContentLayer(<x:n, y:n>) <Layer> TODO\n\nScrollComponent Events\n\n(all of the draggable events)\nScrollStart -> DragStart\nScrollWillMove -> DragWillMove\nScrollDidMove -> DragDidMove\nscroll -> DragMove (html compat)\nScrollEnd -> DragEnd";

  Events.ScrollStart = "scrollstart";

  Events.Scroll = "scroll";

  Events.ScrollMove = Events.Scroll;

  Events.ScrollEnd = "scrollend";

  Events.ScrollAnimationDidStart = "scrollanimationdidstart";

  Events.ScrollAnimationDidEnd = "scrollanimationdidend";

  EventMappers = {};

  EventMappers[Events.Move] = Events.Move;

  EventMappers[Events.ScrollStart] = Events.DragStart;

  EventMappers[Events.ScrollMove] = Events.DragMove;

  EventMappers[Events.ScrollEnd] = Events.DragEnd;

  EventMappers[Events.ScrollAnimationDidStart] = Events.DragAnimationDidStart;

  EventMappers[Events.ScrollAnimationDidEnd] = Events.DragAnimationDidEnd;

  EventMappers[Events.DirectionLockDidStart] = Events.DirectionLockDidStart;

  exports.ScrollComponent = (function (superClass) {
    extend(ScrollComponent, superClass);

    ScrollComponent.define("velocity", ScrollComponent.proxyProperty("content.draggable.velocity", {
      importable: false
    }));

    ScrollComponent.define("scrollHorizontal", ScrollComponent.proxyProperty("content.draggable.horizontal"));

    ScrollComponent.define("scrollVertical", ScrollComponent.proxyProperty("content.draggable.vertical"));

    ScrollComponent.define("speedX", ScrollComponent.proxyProperty("content.draggable.speedX"));

    ScrollComponent.define("speedY", ScrollComponent.proxyProperty("content.draggable.speedY"));

    ScrollComponent.define("isDragging", ScrollComponent.proxyProperty("content.draggable.isDragging", {
      importable: false
    }));

    ScrollComponent.define("isMoving", ScrollComponent.proxyProperty("content.draggable.isMoving", {
      importable: false
    }));

    ScrollComponent.define("propagateEvents", ScrollComponent.proxyProperty("content.draggable.propagateEvents"));

    ScrollComponent.define("directionLock", ScrollComponent.proxyProperty("content.draggable.directionLock"));

    ScrollComponent.define("directionLockThreshold", ScrollComponent.proxyProperty("content.draggable.directionLockThreshold"));

    ScrollComponent.define("content", {
      importable: false,
      exportable: false,
      get: function get() {
        return this._content;
      }
    });

    ScrollComponent.define("mouseWheelSpeedMultiplier", ScrollComponent.simpleProperty("mouseWheelSpeedMultiplier", 1));

    function ScrollComponent(options) {
      if (options == null) {
        options = {};
      }
      this._onMouseWheel = bind(this._onMouseWheel, this);
      this.updateContent = bind(this.updateContent, this);
      if (options.clip == null) {
        options.clip = true;
      }
      if (options.mouseWheelEnabled == null) {
        options.mouseWheelEnabled = false;
      }
      if (options.backgroundColor == null) {
        options.backgroundColor = null;
      }
      ScrollComponent.__super__.constructor.call(this, options);
      this._contentInset = options.contentInset || Utils.rectZero();
      this.setContentLayer(new Layer());
      this._applyOptionsAndDefaults(options);
      this._enableMouseWheelHandling();
      if (options.hasOwnProperty("wrap")) {
        wrapComponent(this, options.wrap);
      }
    }

    ScrollComponent.prototype.calculateContentFrame = function () {
      var contentFrame, size;
      contentFrame = this.content.contentFrame();
      return size = {
        x: 0,
        y: 0,
        width: Math.max(this.width, contentFrame.x + contentFrame.width),
        height: Math.max(this.height, contentFrame.y + contentFrame.height)
      };
    };

    ScrollComponent.prototype.setContentLayer = function (layer) {
      if (this.content) {
        this._content.destroy();
      }
      this._content = layer;
      this._content.superLayer = this;
      this._content.name = this.constructor.name.replace("Component", "") + "Content";
      this._content.clip = false;
      this._content.draggable.enabled = true;
      this._content.draggable.momentum = true;
      this._content.on("change:subLayers", this.updateContent);
      this.on("change:width", this.updateContent);
      this.on("change:height", this.updateContent);
      this.updateContent();
      this.scrollPoint = {
        x: 0,
        y: 0
      };
      return this._content;
    };

    ScrollComponent.prototype.updateContent = function () {
      var constraintsFrame, contentFrame;
      if (!this.content) {
        return;
      }
      contentFrame = this.calculateContentFrame();
      contentFrame.x = contentFrame.x + this._contentInset.left;
      contentFrame.y = contentFrame.y + this._contentInset.top;
      this.content.frame = contentFrame;
      constraintsFrame = this.calculateContentFrame();
      constraintsFrame = {
        x: -constraintsFrame.width + this.width - this._contentInset.right,
        y: -constraintsFrame.height + this.height - this._contentInset.bottom,
        width: constraintsFrame.width + constraintsFrame.width - this.width + this._contentInset.left + this._contentInset.right,
        height: constraintsFrame.height + constraintsFrame.height - this.height + this._contentInset.top + this._contentInset.bottom
      };
      this.content.draggable.constraints = constraintsFrame;
      if (this.content.subLayers.length) {
        if (this.content.backgroundColor === Framer.Defaults.Layer.backgroundColor) {
          return this.content.backgroundColor = null;
        }
      }
    };

    ScrollComponent.define("scroll", {
      exportable: false,
      get: function get() {
        return this.scrollHorizontal === true || this.scrollVertical === true;
      },
      set: function set(value) {
        if (!this.content) {
          return;
        }
        if (value === false) {
          this.content.animateStop();
        }
        return this.scrollHorizontal = this.scrollVertical = value;
      }
    });

    ScrollComponent.prototype._calculateContentPoint = function (scrollPoint) {
      var point;
      scrollPoint.x -= this.contentInset.left;
      scrollPoint.y -= this.contentInset.top;
      point = this._pointInConstraints(scrollPoint);
      return Utils.pointInvert(point);
    };

    ScrollComponent.define("scrollX", {
      get: function get() {
        if (!this.content) {
          return 0;
        }
        return 0 - this.content.x + this.contentInset.left;
      },
      set: function set(value) {
        if (!this.content) {
          return;
        }
        this.content.draggable.animateStop();
        return this.content.x = this._calculateContentPoint({
          x: value,
          y: 0
        }).x;
      }
    });

    ScrollComponent.define("scrollY", {
      get: function get() {
        if (!this.content) {
          return 0;
        }
        return 0 - this.content.y + this.contentInset.top;
      },
      set: function set(value) {
        if (!this.content) {
          return;
        }
        this.content.draggable.animateStop();
        return this.content.y = this._calculateContentPoint({
          x: 0,
          y: value
        }).y;
      }
    });

    ScrollComponent.define("scrollPoint", {
      importable: true,
      exportable: false,
      get: function get() {
        var point;
        return point = {
          x: this.scrollX,
          y: this.scrollY
        };
      },
      set: function set(point) {
        if (!this.content) {
          return;
        }
        this.scrollX = point.x;
        return this.scrollY = point.y;
      }
    });

    ScrollComponent.define("scrollFrame", {
      importable: true,
      exportable: false,
      get: function get() {
        var rect;
        rect = this.scrollPoint;
        rect.width = this.width;
        rect.height = this.height;
        return rect;
      },
      set: function set(value) {
        return this.scrollPoint = value;
      }
    });

    ScrollComponent.define("contentInset", {
      get: function get() {
        return _.clone(this._contentInset);
      },
      set: function set(contentInset) {
        this._contentInset = Utils.rectZero(Utils.parseRect(contentInset));
        return this.updateContent();
      }
    });

    ScrollComponent.define("direction", {
      importable: false,
      exportable: false,
      get: function get() {
        var direction;
        direction = this.content.draggable.direction;
        if (direction === "down") {
          return "up";
        }
        if (direction === "up") {
          return "down";
        }
        if (direction === "right") {
          return "left";
        }
        if (direction === "left") {
          return "right";
        }
        return direction;
      }
    });

    ScrollComponent.define("angle", {
      importable: false,
      exportable: false,
      get: function get() {
        if (!this.content) {
          return 0;
        }
        return -this.content.draggable.angle;
      }
    });

    ScrollComponent.prototype.scrollToPoint = function (point, animate, animationOptions) {
      var contentPoint;
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(500,50,0)"
        };
      }
      contentPoint = this._calculateContentPoint(point);
      this.content.draggable.animateStop();
      if (animate) {
        point = {};
        if (contentPoint.hasOwnProperty("x")) {
          point.x = contentPoint.x;
        }
        if (contentPoint.hasOwnProperty("y")) {
          point.y = contentPoint.y;
        }
        animationOptions.properties = point;
        this.content.animateStop();
        return this.content.animate(animationOptions);
      } else {
        return this.content.point = contentPoint;
      }
    };

    ScrollComponent.prototype.scrollToTop = function (animate, animationOptions) {
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(500,50,0)"
        };
      }
      return this.scrollToPoint({
        x: 0,
        y: 0
      }, animate, animationOptions);
    };

    ScrollComponent.prototype.scrollToLayer = function (contentLayer, originX, originY, animate, animationOptions) {
      var scrollPoint;
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(500,50,0)"
        };
      }
      if (contentLayer && contentLayer.superLayer !== this.content) {
        throw Error("This layer is not in the scroll component content");
      }
      if (!contentLayer || this.content.subLayers.length === 0) {
        scrollPoint = {
          x: 0,
          y: 0
        };
      } else {
        scrollPoint = this._scrollPointForLayer(contentLayer, originX, originY);
        scrollPoint.x -= this.width * originX;
        scrollPoint.y -= this.height * originY;
      }
      this.scrollToPoint(scrollPoint, animate, animationOptions);
      return contentLayer;
    };

    ScrollComponent.prototype.scrollToClosestLayer = function (originX, originY, animate, animationOptions) {
      var closestLayer;
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      if (animate == null) {
        animate = true;
      }
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(500,50,0)"
        };
      }
      closestLayer = this.closestContentLayer(originX, originY, animate, animationOptions);
      if (closestLayer) {
        this.scrollToLayer(closestLayer, originX, originY);
        return closestLayer;
      } else {
        if (!closestLayer) {
          this.scrollToPoint({
            x: 0,
            y: 0
          });
        }
        return null;
      }
    };

    ScrollComponent.prototype.closestContentLayer = function (originX, originY) {
      var scrollPoint;
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      scrollPoint = Utils.framePointForOrigin(this.scrollFrame, originX, originY);
      return this.closestContentLayerForScrollPoint(scrollPoint, originX, originY);
    };

    ScrollComponent.prototype.closestContentLayerForScrollPoint = function (scrollPoint, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.first(this._contentLayersSortedByDistanceForScrollPoint(scrollPoint, originX, originY));
    };

    ScrollComponent.prototype._scrollPointForLayer = function (layer, originX, originY, clamp) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      if (clamp == null) {
        clamp = true;
      }
      return Utils.framePointForOrigin(layer, originX, originY);
    };

    ScrollComponent.prototype._contentLayersSortedByDistanceForScrollPoint = function (scrollPoint, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return Utils.frameSortByAbsoluteDistance(scrollPoint, this.content.subLayers, originX, originY);
    };

    ScrollComponent.prototype._pointInConstraints = function (point) {
      var maxX, maxY, minX, minY, ref;
      ref = this.content.draggable._calculateConstraints(this.content.draggable.constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
      point = {
        x: -Utils.clamp(-point.x, minX, maxX),
        y: -Utils.clamp(-point.y, minY, maxY)
      };
      return point;
    };

    ScrollComponent.prototype.addListener = function () {
      var eventName, eventNames, i, j, len, listener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      ScrollComponent.__super__.addListener.apply(this, arguments);
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        if (indexOf.call(_.keys(EventMappers), eventName) >= 0) {
          results.push(this.content.on(EventMappers[eventName], listener));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ScrollComponent.prototype.removeListener = function () {
      var eventName, eventNames, i, j, len, listener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      ScrollComponent.__super__.removeListener.apply(this, arguments);
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        if (indexOf.call(_.keys(EventMappers), eventName) >= 0) {
          results.push(this.content.off(EventMappers[eventName], listener));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ScrollComponent.prototype.on = ScrollComponent.prototype.addListener;

    ScrollComponent.prototype.off = ScrollComponent.prototype.removeListener;

    ScrollComponent.define("mouseWheelEnabled", {
      get: function get() {
        return this._mouseWheelEnabled;
      },
      set: function set(value) {
        this._mouseWheelEnabled = value;
        return this._enableMouseWheelHandling(value);
      }
    });

    ScrollComponent.prototype._enableMouseWheelHandling = function (enable) {
      if (enable) {
        return this.on(Events.MouseWheel, this._onMouseWheel);
      } else {
        return this.off(Events.MouseWheel, this._onMouseWheel);
      }
    };

    ScrollComponent.prototype._onMouseWheel = function (event) {
      var maxX, maxY, minX, minY, point, ref;
      if (!this._mouseWheelScrolling) {
        this._mouseWheelScrolling = true;
        this.emit(Events.ScrollStart, event);
      }
      this.content.animateStop();
      ref = this.content.draggable._calculateConstraints(this.content.draggable.constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
      point = {
        x: Utils.clamp(this.content.x + event.wheelDeltaX * this.mouseWheelSpeedMultiplier, minX, maxX),
        y: Utils.clamp(this.content.y + event.wheelDeltaY * this.mouseWheelSpeedMultiplier, minY, maxY)
      };
      this.content.point = point;
      this.emit(Events.Scroll, event);
      return this._onMouseWheelEnd(event);
    };

    ScrollComponent.prototype._onMouseWheelEnd = Utils.debounce(0.3, function (event) {
      this.emit(Events.ScrollEnd, event);
      return this._mouseWheelScrolling = false;
    });

    ScrollComponent.prototype.copy = function () {
      var contentLayer, copy;
      copy = ScrollComponent.__super__.copy.apply(this, arguments);
      contentLayer = _.first(_.without(copy.subLayers, copy.content));
      copy.setContentLayer(contentLayer);
      copy.props = this.props;
      return copy;
    };

    ScrollComponent.wrap = function (layer, options) {
      return wrapComponent(new this(options), layer, options);
    };

    return ScrollComponent;
  })(Layer);

  wrapComponent = function (instance, layer, options) {
    var i, j, len, len1, propKey, ref, ref1, screenFrame, scroll, subLayer, subLayerIndex, wrapper;
    if (options == null) {
      options = {
        correct: true
      };
    }
    scroll = instance;
    if (options.correct === true) {
      if (layer.subLayers.length === 0) {
        wrapper = new Layer();
        wrapper.name = "ScrollComponent";
        wrapper.frame = layer.frame;
        layer.superLayer = wrapper;
        layer.x = layer.y = 0;
        layer = wrapper;
        console.log("Corrected the scroll component without sub layers");
      }
    }
    ref = ["frame", "image", "name"];
    for (i = 0, len = ref.length; i < len; i++) {
      propKey = ref[i];
      scroll[propKey] = layer[propKey];
    }
    if (options.correct === true) {
      screenFrame = scroll.screenFrame;
      if (screenFrame.x < Screen.width) {
        if (screenFrame.x + screenFrame.width > Screen.width) {
          scroll.width = Screen.width - screenFrame.x;
          console.log("Corrected the scroll width to " + scroll.width);
        }
      }
      if (screenFrame.y < Screen.height) {
        if (screenFrame.y + screenFrame.height > Screen.height) {
          scroll.height = Screen.height - screenFrame.y;
          console.log("Corrected the scroll height to " + scroll.height);
        }
      }
    }
    ref1 = layer.subLayers;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      subLayer = ref1[j];
      subLayerIndex = subLayer.index;
      subLayer.superLayer = scroll.content;
      subLayer.index = subLayerIndex;
    }
    scroll.superLayer = layer.superLayer;
    scroll.index = layer.index;
    layer.destroy();
    return scroll;
  };
}).call(undefined);

},{"../Events":142,"../Layer":151,"../Underscore":162,"../Utils":163}],134:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Events,
      Layer,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Layer = require("../Layer").Layer;

  Events = require("../Events").Events;

  "SliderComponent\n\nknob <layer>\nknobSize <width, height>\nfill <layer>\nmin <number>\nmax <number>\n\npointForValue(<n>)\nvalueForPoint(<n>)\n\nanimateToValue(value, animationOptions={})";

  exports.SliderComponent = (function (superClass) {
    extend(SliderComponent, superClass);

    function SliderComponent(options) {
      if (options == null) {
        options = {};
      }
      this._updateValue = bind(this._updateValue, this);
      this._setRadius = bind(this._setRadius, this);
      this._updateFrame = bind(this._updateFrame, this);
      this._updateKnob = bind(this._updateKnob, this);
      this._updateFill = bind(this._updateFill, this);
      this._touchDown = bind(this._touchDown, this);
      if (options.backgroundColor == null) {
        options.backgroundColor = "#ccc";
      }
      if (options.borderRadius == null) {
        options.borderRadius = 50;
      }
      if (options.clip == null) {
        options.clip = false;
      }
      if (options.width == null) {
        options.width = 300;
      }
      if (options.height == null) {
        options.height = 10;
      }
      if (options.value == null) {
        options.value = 0;
      }
      this.knob = new Layer({
        backgroundColor: "#fff",
        shadowY: 1,
        shadowBlur: 3,
        shadowColor: "rgba(0,0,0,0.35)"
      });
      this.fill = new Layer({
        backgroundColor: "#333",
        width: 0,
        force2d: true
      });
      SliderComponent.__super__.constructor.call(this, options);
      this.knobSize = options.knobSize || 30;
      this.knob.superLayer = this.fill.superLayer = this;
      if (this.width > this.height) {
        this.fill.height = this.height;
      } else {
        this.fill.width = this.width;
      }
      this.fill.borderRadius = this.borderRadius;
      this.knob.draggable.enabled = true;
      this.knob.draggable.overdrag = false;
      this.knob.draggable.momentum = true;
      this.knob.draggable.momentumOptions = {
        friction: 5,
        tolerance: 0.25
      };
      this.knob.draggable.bounce = false;
      this.knob.draggable.propagateEvents = false;
      this.knob.borderRadius = "50%";
      this._updateFrame();
      this._updateKnob();
      this._updateFill();
      this.on("change:size", this._updateFrame);
      this.on("change:borderRadius", this._setRadius);
      if (this.width > this.height) {
        this.knob.draggable.speedY = 0;
        this.knob.on("change:x", this._updateFill);
      } else {
        this.knob.draggable.speedX = 0;
        this.knob.on("change:y", this._updateFill);
      }
      this.knob.on("change:size", this._updateKnob);
      this.knob.on(Events.Move, (function (_this) {
        return function () {
          _this._updateFrame();
          return _this._updateValue();
        };
      })(this));
      this.on(Events.TouchStart, this._touchDown);
    }

    SliderComponent.prototype._touchDown = function (event) {
      var offsetX, offsetY;
      event.preventDefault();
      event.stopPropagation();
      offsetX = this.min / this.canvasScaleX() - this.min;
      offsetY = this.min / this.canvasScaleY() - this.min;
      if (this.width > this.height) {
        this.value = this.valueForPoint(Events.touchEvent(event).clientX - this.screenScaledFrame().x) / this.canvasScaleX() - offsetX;
      } else {
        this.value = this.valueForPoint(Events.touchEvent(event).clientY - this.screenScaledFrame().y) / this.canvasScaleY() - offsetY;
      }
      this.knob.draggable._touchStart(event);
      return this._updateValue();
    };

    SliderComponent.prototype._updateFill = function () {
      if (this.width > this.height) {
        return this.fill.width = this.knob.midX;
      } else {
        return this.fill.height = this.knob.midY;
      }
    };

    SliderComponent.prototype._updateKnob = function () {
      if (this.width > this.height) {
        this.knob.midX = this.fill.width;
        return this.knob.centerY();
      } else {
        this.knob.midY = this.fill.height;
        return this.knob.centerX();
      }
    };

    SliderComponent.prototype._updateFrame = function () {
      this.knob.draggable.constraints = {
        x: -this.knob.width / 2,
        y: -this.knob.height / 2,
        width: this.width + this.knob.width,
        height: this.height + this.knob.height
      };
      if (this.width > this.height) {
        this.fill.height = this.height;
        return this.knob.centerY();
      } else {
        this.fill.width = this.width;
        return this.knob.centerX();
      }
    };

    SliderComponent.prototype._setRadius = function () {
      var radius;
      radius = this.borderRadius;
      return this.fill.style.borderRadius = radius + "px 0 0 " + radius + "px";
    };

    SliderComponent.define("knobSize", {
      get: function get() {
        return this._knobSize;
      },
      set: function set(value) {
        this._knobSize = value;
        this.knob.width = this._knobSize;
        this.knob.height = this._knobSize;
        return this._updateFrame();
      }
    });

    SliderComponent.define("min", {
      get: function get() {
        return this._min || 0;
      },
      set: function set(value) {
        return this._min = value;
      }
    });

    SliderComponent.define("max", {
      get: function get() {
        return this._max || 1;
      },
      set: function set(value) {
        return this._max = value;
      }
    });

    SliderComponent.define("value", {
      get: function get() {
        if (this.width > this.height) {
          return this.valueForPoint(this.knob.midX);
        } else {
          return this.valueForPoint(this.knob.midY);
        }
      },
      set: function set(value) {
        if (this.width > this.height) {
          this.knob.midX = this.pointForValue(value);
          return this._updateFill();
        } else {
          this.knob.midY = this.pointForValue(value);
          return this._updateFill();
        }
      }
    });

    SliderComponent.prototype._updateValue = function () {
      return this.emit("change:value", this.value);
    };

    SliderComponent.prototype.pointForValue = function (value) {
      if (this.width > this.height) {
        return Utils.modulate(value, [this.min, this.max], [0, this.width], true);
      } else {
        return Utils.modulate(value, [this.min, this.max], [0, this.height], true);
      }
    };

    SliderComponent.prototype.valueForPoint = function (value) {
      if (this.width > this.height) {
        return Utils.modulate(value, [0, this.width], [this.min, this.max], true);
      } else {
        return Utils.modulate(value, [0, this.height], [this.min, this.max], true);
      }
    };

    SliderComponent.prototype.animateToValue = function (value, animationOptions) {
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(300,25,0)"
        };
      }
      if (this.width > this.height) {
        animationOptions.properties = {
          x: this.pointForValue(value) - this.knob.width / 2
        };
        this.knob.on("change:x", this._updateValue);
      } else {
        animationOptions.properties = {
          y: this.pointForValue(value) - this.knob.height / 2
        };
        this.knob.on("change:y", this._updateValue);
      }
      return this.knob.animate(animationOptions);
    };

    return SliderComponent;
  })(Layer);
}).call(undefined);

},{"../Events":142,"../Layer":151,"../Utils":163}],135:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var FramerCSS, Utils;

  Utils = require("./Utils");

  FramerCSS = "body {\n	margin: 0;\n}\n\n.framerContext {	\n	position: absolute;\n	left: 0;\n	top: 0;\n	right: 0;\n	bottom: 0;\n	pointer-events: none;\n	overflow: hidden;\n}\n\n.framerLayer {\n	display: block;\n	position: absolute;\n	left: 0;\n	top: 0;\n	background-repeat: no-repeat;\n	background-size: cover;\n	-webkit-overflow-scrolling: touch;\n	-webkit-box-sizing: border-box;\n	-webkit-user-select: none;\n}\n\n.framerLayer input,\n.framerLayer textarea,\n.framerLayer select,\n.framerLayer option,\n.framerLayer div[contenteditable=true]\n{\n	pointer-events: auto;\n	-webkit-user-select: auto;\n}\n\n.framerDebug {\n	padding: 6px;\n	color: #fff;\n	font: 10px/1em Monaco;\n}\n";

  Utils.domComplete(function () {
    return Utils.insertCSS(FramerCSS);
  });
}).call(undefined);

},{"./Utils":163}],136:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Config,
      ContainerSurface,
      Counter,
      Engine,
      EventManager,
      Utils,
      _,
      famous,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  Utils = require("./Utils");

  _ = require("./Underscore")._;

  BaseClass = require("./BaseClass").BaseClass;

  Config = require("./Config").Config;

  EventManager = require("./EventManager").EventManager;

  Counter = 1;

  famous = require("famous");

  Engine = famous.core.Engine;

  ContainerSurface = famous.surfaces.ContainerSurface;

  exports.Context = (function (superClass) {
    extend(Context, superClass);

    function Context(options) {
      if (options == null) {
        options = {};
      }
      this._appendRootElement = bind(this._appendRootElement, this);
      this._framerOriginal__appendRootElement = bind(this._framerOriginal__appendRootElement, this);
      Context.__super__.constructor.apply(this, arguments);
      Counter++;
      options = _.defaults(options, {
        contextName: null,
        parentLayer: null,
        name: null
      });
      if (!options.name) {
        throw Error("Contexts need a name");
      }
      this._parentLayer = options.parentLayer;
      this._name = options.name;
      this.reset();
    }

    Context.prototype._framerOriginal_reset = function () {
      var animation, i, len, ref, ref1, ref2, ref3;
      if ((ref = this.eventManager) != null) {
        ref.reset();
      }
      this.eventManager = new EventManager();
      if (this._rootElement) {
        if (this._rootElement.parentNode) {
          this._rootElement.parentNode.removeChild(this._rootElement);
        } else {
          this._rootElement.__cancelAppendChild = true;
        }
      }
      this._createRootElement();
      if ((ref1 = this._delayTimers) != null) {
        ref1.map(function (timer) {
          return window.clearTimeout(timer);
        });
      }
      if ((ref2 = this._delayIntervals) != null) {
        ref2.map(function (timer) {
          return window.clearInterval(timer);
        });
      }
      if (this._animationList) {
        ref3 = this._animationList;
        for (i = 0, len = ref3.length; i < len; i++) {
          animation = ref3[i];
          animation.stop(false);
        }
      }
      this._layerList = [];
      this._animationList = [];
      this._delayTimers = [];
      this._delayIntervals = [];
      this._layerIdCounter = 1;
      return this.emit("reset", this);
    };

    Context.prototype.reset = function () {
      var animation, i, len, ref, ref1, ref2, ref3;
      if ((ref = this.eventManager) != null) {
        ref.reset();
      }
      this.eventManager = new EventManager();
      if (this._rootElement == null) {
        this._createRootElement();
      }
      if ((ref1 = this._delayTimers) != null) {
        ref1.map(function (timer) {
          return window.clearTimeout(timer);
        });
      }
      if ((ref2 = this._delayIntervals) != null) {
        ref2.map(function (timer) {
          return window.clearInterval(timer);
        });
      }
      if (this._animationList) {
        ref3 = this._animationList;
        for (i = 0, len = ref3.length; i < len; i++) {
          animation = ref3[i];
          animation.stop(false);
        }
      }
      this._layerList = [];
      this._animationList = [];
      this._delayTimers = [];
      this._delayIntervals = [];
      this._layerIdCounter = 1;
      return this.emit("reset", this);
    };

    Context.prototype.destroy = function () {
      this.reset();
      return Utils.domCompleteCancel(this._appendRootElement);
    };

    Context.prototype.getRootElement = function () {
      return this._rootElement;
    };

    Context.prototype.getLayers = function () {
      return _.clone(this._layerList);
    };

    Context.prototype.addLayer = function (layer) {
      if (indexOf.call(this._layerList, layer) >= 0) {
        return;
      }
      this._layerList.push(layer);
      return null;
    };

    Context.prototype.removeLayer = function (layer) {
      this._layerList = _.without(this._layerList, layer);
      return null;
    };

    Context.prototype.layerCount = function () {
      return this._layerList.length;
    };

    Context.prototype.nextLayerId = function () {
      return this._layerIdCounter++;
    };

    Context.prototype._framerOriginal__createRootElement = function () {
      this._rootElement = document.createElement("div");
      this._rootElement.id = "FramerContextRoot-" + this._name;
      this._rootElement.classList.add("framerContext");
      if (this._parentLayer) {
        return this._appendRootElement();
      } else {
        return Utils.domComplete(this._appendRootElement);
      }
    };

    Context.prototype._createRootElement = function () {
      console.log("Context::_createRootElement()");
      if (this._parentLayer) {
        this._rootElement = new ContainerSurface();
        return this._appendRootElement();
      } else {
        this._rootElement = Engine.createContext();
        return Utils.domComplete(this._appendRootElement);
      }
    };

    Context.prototype._framerOriginal__appendRootElement = function () {
      var parentElement, ref;
      parentElement = (ref = this._parentLayer) != null ? ref._element : void 0;
      if (parentElement == null) {
        parentElement = document.body;
      }
      return parentElement.appendChild(this._rootElement);
    };

    Context.prototype._appendRootElement = function () {
      if (this._parentLayer != null) {
        return this._parentLayer.surface.add(this._rootElement);
      }
    };

    Context.prototype.run = function (f) {
      var previousContext;
      previousContext = Framer.CurrentContext;
      Framer.CurrentContext = this;
      f();
      return Framer.CurrentContext = previousContext;
    };

    Context.define("width", {
      get: function get() {
        if (this._parentLayer) {
          return this._parentLayer.width;
        }
        return window.innerWidth;
      }
    });

    Context.define("height", {
      get: function get() {
        if (this._parentLayer) {
          return this._parentLayer.height;
        }
        return window.innerHeight;
      }
    });

    return Context;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Config":135,"./EventManager":141,"./Underscore":162,"./Utils":163,"famous":24}],137:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Context, Utils, _errorContext, _errorShown, errorWarning;

  Utils = require("./Utils");

  Context = require("./Context").Context;

  _errorContext = null;

  _errorShown = false;

  errorWarning = function (event) {
    var _errorWarningLayer, layer;
    if (!_errorContext) {
      _errorContext = new Context({
        name: "Error"
      });
    }
    if (_errorShown) {
      return;
    }
    _errorShown = true;
    layer = new Layer({
      x: 20,
      y: -50,
      width: 300,
      height: 40
    });
    layer.states.add({
      visible: {
        x: 20,
        y: 20,
        width: 300,
        height: 40
      }
    });
    layer.html = "Javascript Error, see the console";
    layer.style = {
      font: "12px/1.35em Menlo",
      color: "white",
      textAlign: "center",
      lineHeight: layer.height + "px",
      borderRadius: "5px",
      backgroundColor: "rgba(255,0,0,.8)"
    };
    layer.states.animationOptions = {
      curve: "spring",
      curveOptions: {
        tension: 1000,
        friction: 30
      }
    };
    layer.states["switch"]("visible");
    layer.on(Events.Click, function () {
      return this.states["switch"]("default");
    });
    return _errorWarningLayer = layer;
  };

  window.error = errorWarning;
}).call(undefined);

},{"./Context":136,"./Utils":163}],138:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Originals, Utils, _;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Originals = {
    Layer: {
      backgroundColor: "rgba(0,124,255,.5)",
      width: 100,
      height: 100
    },
    Animation: {
      curve: "ease",
      time: 1
    },
    DeviceComponent: {
      fullScreen: false,
      padding: 50,
      deviceType: "iphone-5s-spacegray",
      deviceZoom: "fit",
      contentZoom: 1,
      orientation: "portrait",
      keyboard: false,
      animationOptions: {
        curve: "spring(400,40,0)"
      }
    },
    LayerDraggable: {
      momentum: true,
      momentumOptions: {
        friction: 2.1,
        tolerance: 1
      },
      bounce: true,
      bounceOptions: {
        friction: 40,
        tension: 200,
        tolerance: 1
      },
      directionLock: false,
      directionLockThreshold: {
        x: 10,
        y: 10
      },
      overdrag: true,
      overdragScale: 0.5,
      pixelAlign: true,
      velocityTimeout: 100,
      velocityScale: 890
    },
    FrictionSimulator: {
      friction: 2,
      tolerance: 1 / 10
    },
    SpringSimulator: {
      tension: 500,
      friction: 10,
      tolerance: 1 / 10000
    },
    MomentumBounceSimulator: {
      momentum: {
        friction: 2,
        tolerance: 10
      },
      bounce: {
        tension: 500,
        friction: 10,
        tolerance: 1
      }
    }
  };

  exports.Defaults = {
    getDefaults: function getDefaults(className, options) {
      var defaults, k, ref, v;
      if (!Originals.hasOwnProperty(className)) {
        return {};
      }
      if (!Framer.Defaults.hasOwnProperty(className)) {
        return {};
      }
      defaults = _.clone(Originals[className]);
      ref = Framer.Defaults[className];
      for (k in ref) {
        v = ref[k];
        defaults[k] = _.isFunction(v) ? v() : v;
      }
      for (k in defaults) {
        v = defaults[k];
        if (!options.hasOwnProperty(k)) {
          options[k] = v;
        }
      }
      return options;
    },
    setup: function setup() {
      var className, classValues, k, ref, v;
      if (window.FramerDefaults) {
        ref = window.FramerDefaults;
        for (className in ref) {
          classValues = ref[className];
          for (k in classValues) {
            v = classValues[k];
            Originals[className][k] = v;
          }
        }
      }
      return exports.Defaults.reset();
    },
    reset: function reset() {
      return window.Framer.Defaults = _.clone(Originals);
    }
  };
}).call(undefined);

},{"./Underscore":162,"./Utils":163}],139:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Events,
      Utils,
      _,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  Events.EventBufferReset = "eventbufferreset";

  Events.EventBufferUpdated = "eventbufferupdated";

  exports.EventBuffer = (function (superClass) {
    extend(EventBuffer, superClass);

    function EventBuffer(options) {
      if (options == null) {
        options = {};
      }
      this.options = _.defaults(options, {
        velocityTimeout: 100
      });
      this._events = [];
    }

    EventBuffer.prototype.push = function (event) {
      this._events.push(event);
      return this.emit(Events.EventBufferUpdated, event);
    };

    EventBuffer.prototype.reset = function () {
      this._events.length = 0;
      return this.emit(Events.EventBufferReset);
    };

    EventBuffer.define("length", {
      get: function get() {
        return this._events.length;
      }
    });

    EventBuffer.define("first", {
      get: function get() {
        return this._events[0];
      }
    });

    EventBuffer.define("offset", {
      get: function get() {
        var current, first, offset;
        if (events.length < 2) {
          return {
            x: 0,
            y: 0
          };
        }
        current = events[events.length - 1];
        first = events[0];
        return offset = {
          x: current.x - first.x,
          y: current.y - first.y
        };
      }
    });

    EventBuffer.define("events", {
      get: function get() {
        var timeout;
        timeout = Date.now() - this.options.velocityTimeout;
        return _.filter(this._events, (function (_this) {
          return function (event) {
            return event.t > timeout;
          };
        })(this));
      }
    });

    EventBuffer.define("angle", {
      get: function get() {
        var events, p1, p2;
        events = this.events;
        if (events.length < 2) {
          return 0;
        }
        p1 = events[0];
        p2 = events[1];
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }
    });

    EventBuffer.define("velocity", {
      get: function get() {
        var current, events, first, time, velocity;
        events = this.events;
        if (events.length < 2) {
          return {
            x: 0,
            y: 0
          };
        }
        current = events[events.length - 1];
        first = events[0];
        time = current.t - first.t;
        velocity = {
          x: (current.x - first.x) / time,
          y: (current.y - first.y) / time
        };
        if (velocity.x === Infinity) {
          velocity.x = 0;
        }
        if (velocity.y === Infinity) {
          velocity.y = 0;
        }
        return velocity;
      }
    });

    return EventBuffer;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Events":142,"./Underscore":162,"./Utils":163}],140:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var EventEmitter;

  EventEmitter = require("eventemitter3");

  exports.EventEmitter = EventEmitter;
}).call(undefined);

},{"eventemitter3":1}],141:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var EventManagerElement,
      EventManagerIdCounter,
      Utils,
      famous,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };

  Utils = require("./Utils");

  EventManagerIdCounter = 0;

  famous = require("famous");

  EventManagerElement = (function () {
    function EventManagerElement(element1) {
      this.element = element1;
      this._events = {};
    }

    EventManagerElement.prototype.addEventListener = function (eventName, listener) {
      var base;
      if (this.element.constructor.name === "DOMElement") {} else {
        if (!Utils.domValidEvent(this.element, eventName)) {
          return;
        }
        if ((base = this._events)[eventName] == null) {
          base[eventName] = [];
        }
        this._events[eventName].push(listener);
        return this.element.addEventListener(eventName, listener);
      }
    };

    EventManagerElement.prototype.removeEventListener = function (eventName, listener) {
      if (!this._events) {
        return;
      }
      if (!this._events[eventName]) {
        return;
      }
      this._events[eventName] = _.without(this._events[eventName], listener);
      if (this.element.constructor.name === "DOMElement") {
        this.element._node.removeUIEvent(eventName);
      } else {
        this.element.removeEventListener(eventName, listener);
      }
    };

    EventManagerElement.prototype.removeAllEventListeners = function (eventName) {
      var eventListener, events, i, j, len, len1, ref;
      console.log("removeAllEventListeners called");
      events = eventName ? [eventName] : _.keys(this._events);
      for (i = 0, len = events.length; i < len; i++) {
        eventName = events[i];
        ref = this._events[eventName];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          eventListener = ref[j];
          this.removeEventListener(eventName, eventListener);
        }
      }
    };

    EventManagerElement.prototype.once = function (event, listener) {
      var fn;
      fn = (function (_this) {
        return function () {
          _this.removeListener(event, fn);
          return listener.apply(null, arguments);
        };
      })(this);
      return this.on(event, fn);
    };

    EventManagerElement.prototype.on = EventManagerElement.prototype.addEventListener;

    EventManagerElement.prototype.off = EventManagerElement.prototype.removeEventListener;

    return EventManagerElement;
  })();

  exports.EventManager = (function () {
    function EventManager(element) {
      this.wrap = bind(this.wrap, this);
      this._elements = {};
    }

    EventManager.prototype.wrap = function (element) {
      if (!element._eventManagerId) {
        element._eventManagerId = EventManagerIdCounter++;
      }
      if (!this._elements[element._eventManagerId]) {
        this._elements[element._eventManagerId] = new EventManagerElement(element);
      }
      return this._elements[element._eventManagerId];
    };

    EventManager.prototype.reset = function () {
      var element, elementEventManager, ref, results;
      ref = this._elements;
      results = [];
      for (element in ref) {
        elementEventManager = ref[element];
        results.push(elementEventManager.removeAllEventListeners());
      }
      return results;
    };

    return EventManager;
  })();
}).call(undefined);

},{"./Utils":163,"famous":24}],142:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Events, Utils, _;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Events = {};

  Events.TouchStart = "touchstart";

  Events.TouchEnd = "touchend";

  Events.TouchMove = "touchmove";

  Events.MouseUp = "mouseup";

  Events.MouseDown = "mousedown";

  Events.MouseOver = "mouseover";

  Events.MouseOut = "mouseout";

  Events.MouseMove = "mousemove";

  Events.MouseWheel = "mousewheel";

  if (!Utils.isTouch()) {
    Events.TouchStart = Events.MouseDown;
    Events.TouchEnd = Events.MouseUp;
    Events.TouchMove = Events.MouseMove;
  }

  Events.Click = Events.TouchEnd;

  Events.AnimationStart = "start";

  Events.AnimationStop = "stop";

  Events.AnimationEnd = "end";

  Events.AnimationDidStart = "start";

  Events.AnimationDidStop = "stop";

  Events.AnimationDidEnd = "end";

  Events.Scroll = "scroll";

  Events.ImageLoaded = "load";

  Events.ImageLoadError = "error";

  Events.touchEvent = function (event) {
    var ref, ref1, touchEvent;
    touchEvent = (ref = event.touches) != null ? ref[0] : void 0;
    if (touchEvent == null) {
      touchEvent = (ref1 = event.changedTouches) != null ? ref1[0] : void 0;
    }
    if (touchEvent == null) {
      touchEvent = event;
    }
    return touchEvent;
  };

  Events.wrap = function (element) {
    return Framer.CurrentContext.eventManager.wrap(element);
  };

  exports.Events = Events;
}).call(undefined);

},{"./Underscore":162,"./Utils":163}],143:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  exports.MobileScrollFix = require("./MobileScrollFix");

  exports.OmitNew = require("./OmitNew");
}).call(undefined);

},{"./MobileScrollFix":144,"./OmitNew":145}],144:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  exports.enable = function () {
    var MobileScrollFixLayer, handleScrollingLayerTouchMove, handleScrollingLayerTouchStart;
    document.ontouchmove = function (event) {
      if (event.target === document.body) {
        return event.preventDefault();
      }
    };
    handleScrollingLayerTouchMove = function (event) {
      return event.stopPropagation();
    };
    handleScrollingLayerTouchStart = function (event) {
      var element, startTopScroll;
      element = this._element;
      startTopScroll = element.scrollTop;
      if (startTopScroll <= 0) {
        element.scrollTop = 1;
      }
      if (startTopScroll + element.offsetHeight >= element.scrollHeight) {
        return element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
      }
    };
    MobileScrollFixLayer = (function (superClass) {
      extend(MobileScrollFixLayer, superClass);

      function MobileScrollFixLayer(options) {
        this._updateScrollListeners = bind(this._updateScrollListeners, this);
        MobileScrollFixLayer.__super__.constructor.call(this, options);
        if (this.constructor.name === "Layer") {
          this.on("change:scrollVertical", this._updateScrollListeners);
          this._updateScrollListeners();
        }
      }

      MobileScrollFixLayer.prototype._updateScrollListeners = function () {
        if (this.scrollVertical === true) {
          this.on("touchmove", handleScrollingLayerTouchMove);
          return this.on("touchstart", handleScrollingLayerTouchStart);
        } else {
          this.off("touchmove", handleScrollingLayerTouchMove);
          return this.off("touchstart", handleScrollingLayerTouchStart);
        }
      };

      return MobileScrollFixLayer;
    })(Framer.Layer);
    return window.Layer = window.Framer.Layer = MobileScrollFixLayer;
  };
}).call(undefined);

},{"../Utils":163}],145:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var slice = [].slice;

  exports.enable = function (module) {
    var ClassWrapper;
    if (module == null) {
      module = window;
    }
    ClassWrapper = function (Klass) {
      return function () {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return this.prototype = (function (func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(),
              result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Klass, args, function () {});
      };
    };
    module.Frame = ClassWrapper(Framer.Frame);
    module.Layer = ClassWrapper(Framer.Layer);
    module.BackgroundLayer = ClassWrapper(Framer.BackgroundLayer);
    module.VideoLayer = ClassWrapper(Framer.VideoLayer);
    return module.Animation = ClassWrapper(Framer.Animation);
  };
}).call(undefined);

},{}],146:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var ContainerSurface,
      FamousLayer,
      RenderNode,
      StateModifier,
      Transform,
      famous,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  };

  famous = require("famous");

  ContainerSurface = famous.surfaces.ContainerSurface;

  StateModifier = famous.modifiers.StateModifier;

  RenderNode = famous.core.RenderNode;

  Transform = famous.core.Transform;

  FamousLayer = (function () {
    function FamousLayer(options) {
      this.setHeight = bind(this.setHeight, this);
      this.setWidth = bind(this.setWidth, this);
      this.setY = bind(this.setY, this);
      this.setX = bind(this.setX, this);
      this.addSubLayer = bind(this.addSubLayer, this);
      this.removeSubLayer = bind(this.removeSubLayer, this);
      this.setRotation = bind(this.setRotation, this);
      this.getRotation = bind(this.getRotation, this);
      this.setScale = bind(this.setScale, this);
      this.getScale = bind(this.getScale, this);
      this.setPosition = bind(this.setPosition, this);
      this.getPosition = bind(this.getPosition, this);
      this.setOrigin = bind(this.setOrigin, this);
      this.getOrigin = bind(this.getOrigin, this);
      this.setAbsoluteSize = bind(this.setAbsoluteSize, this);
      this.getAbsoluteSize = bind(this.getAbsoluteSize, this);
      this.setOpacity = bind(this.setOpacity, this);
      this.removeChild = bind(this.removeChild, this);
      this.removeFromParent = bind(this.removeFromParent, this);
      this.setProperty = bind(this.setProperty, this);
      this.setAttribute = bind(this.setAttribute, this);
      this.setId = bind(this.setId, this);
      this.setContent = bind(this.setContent, this);
      var defaultProp;
      defaultProp = {};
      options = options || defaultProp;
      this.surface = new ContainerSurface({
        properties: options
      });
      this.stateModifier = new StateModifier({
        origin: [0.5, 0.5]
      });
      this.node = new RenderNode(this.stateModifier);
      this.node.add(this.surface);
      this._id = null;
      this._attributes = this.surface.attributes;
      this._styles = this.surface.properties;
      this.classList = this.surface.classList;
      this._content = this.surface.content;
      this.parentNode = null;
    }

    FamousLayer.prototype.setContent = function (contentVal) {
      console.log("@surface.setContent()");
      return this.surface.setContent(contentVal);
    };

    FamousLayer.prototype.setId = function (idValue) {
      return this._id = idValue;
    };

    FamousLayer.prototype.setAttribute = function (attrName, attrValue) {
      console.log("@surface.setAttribute()");
      return this.surface.setAttributes({
        attrName: attrValue
      });
    };

    FamousLayer.prototype.setProperty = function (propName, propValue) {
      var obj;
      console.log("@surface.setProperty(" + propName + ", " + propValue + ")");
      return this.surface.setProperties((obj = {}, obj["" + propName] = propValue, obj));
    };

    FamousLayer.prototype.removeFromParent = function () {
      if (this.superLayer != null) {
        return this.superLayer.removeSubLayer(this);
      }
    };

    FamousLayer.prototype.removeChild = function (child) {
      return this.removeSubLayer(child);
    };

    FamousLayer.prototype.setOpacity = function (opacityValue) {
      console.log("@stateModifier.setOpacity(" + opacityValue + ")");
      return this.stateModifier.setOpacity(opacityValue);
    };

    FamousLayer.prototype.getAbsoluteSize = function () {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("currentSize:");
      console.log(currentSize);
      return currentSize || [0, 0, 0];
    };

    FamousLayer.prototype.setAbsoluteSize = function (x, y, z) {
      console.log("@stateModifier.setSize([" + x + ", " + y + ", " + z + "])");
      return this.stateModifier.setSize([x, y, z]);
    };

    FamousLayer.prototype.getOrigin = function () {
      return this.stateModifier.getOrigin() || [0, 0, 0];
    };

    FamousLayer.prototype.setOrigin = function (x, y, z) {
      console.log("@stateModifier.setOrigin(" + x + ", " + y + ", " + z + ")");
      z = z || 0;
      return this.stateModifier.setOrigin([x, y, z]);
    };

    FamousLayer.prototype.getPosition = function () {
      var currentPos;
      currentPos = Transform.getTranslate(this.stateModifier.getTransform());
      currentPos[0] = currentPos[0] || 0;
      currentPos[1] = currentPos[1] || 0;
      currentPos[2] = currentPos[2] || 0;
      return currentPos;
    };

    FamousLayer.prototype.setPosition = function (x, y, z) {
      var currentTransform, deltaX, deltaY, deltaZ, m, originalTranslate;
      console.log("FamousLayer::setPosition: x: " + x + ", y: " + y + ", z: " + z);
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("currentTransform:");
      console.log(currentTransform);
      m = this.stateModifier.getTransform();
      originalTranslate = Transform.getTranslate(m);
      deltaX = x - originalTranslate[0];
      deltaY = y - originalTranslate[1];
      deltaZ = z - originalTranslate[2];
      this.stateModifier.setTransform(Transform.thenMove(m, [deltaX, deltaY, deltaZ]));
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("AFTER currentTransform:");
      return console.log(currentTransform);
    };

    FamousLayer.prototype.getScale = function () {
      return Transform.interpret(this.stateModifier.getTransform()).scale;
    };

    FamousLayer.prototype.setScale = function (x, y, z) {
      var transformParts;
      console.log("@stateModifier.setTransform(Transform.scale(" + x + ", " + y + ", " + z + "))");
      transformParts = Transform.interpret(this.stateModifier.getTransform());
      transformParts.scale = Transform.multiply(transformParts.scale, Transform.scale(x, y, z));
      return this.stateModifier.setTransform(Transform.build(transformParts));
    };

    FamousLayer.prototype.getRotation = function () {
      return Transform.interpret(this.stateModifier.getTransform()).rotate;
    };

    FamousLayer.prototype.setRotation = function (x, y, z) {
      return console.log("@stateModifier.setTransform(Transform.rotate(" + x + ", " + y + ", " + z + "))");
    };

    FamousLayer.prototype.removeSubLayer = function (layer) {
      var removeIndex;
      if (!(this.surface.context._node._child instanceof Array)) {
        this.surface.context._node._child = null;
      } else {
        removeIndex = this.surface.context._node._child.indexOf(layer.node);
        this.surface.context._node._child.splice(removeIndex, 1);
      }
      layer.superLayer = null;
      return layer.parentNode = null;
    };

    FamousLayer.prototype.addSubLayer = function (layer) {
      if (layer.superLayer != null) {
        layer.superLayer.removeSubLayer(layer);
      }
      this.surface.add(layer.node);
      layer.superLayer = this;
      return layer.parentNode = this;
    };

    FamousLayer.prototype.setX = function (val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setX. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(val, currentTransform[1], currentTransform[2]));
    };

    FamousLayer.prototype.setY = function (val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setY. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(currentTransform[0], val, currentTransform[2]));
    };

    FamousLayer.prototype.setWidth = function (val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("@stateModifier.setSize([" + val + ", currentSize[1]])");
      return this.stateModifier.setSize([val, currentSize[1]]);
    };

    FamousLayer.prototype.setHeight = function (val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("@stateModifier.setSize([currentSize[0], " + val + "])");
      return this.stateModifier.setSize([currentSize[0], val]);
    };

    return FamousLayer;
  })();

  module.exports = FamousLayer;
}).call(undefined);

},{"famous":24}],147:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var FamousPropertySetter;

  FamousPropertySetter = {
    visible: function visible(layer) {
      var propertyValue;
      propertyValue = layer._properties.visible;
      if (propertyValue) {
        return layer._element.setProperty("display", "block");
      } else {
        return layer._element.setProperty("display", "none");
      }
    },
    ignoreEvents: function ignoreEvents(layer) {
      var propertyValue;
      propertyValue = layer._properties.ignoreEvents;
      if (propertyValue) {
        return layer._element.setProperty("pointerEvents", "none");
      } else {
        return layer._element.setProperty("pointerEvents", "auto");
      }
    },
    clip: function clip(layer) {
      var propertyValue;
      propertyValue = layer._properties.clip;
      if (layer._properties.scrollHorizontal === true || layer._properties.scrollVertical === true) {
        layer._element.setProperty("overflow", "auto");
      }
      if (layer._properties.clip === true) {
        layer._element.setProperty("overflow", "hidden");
      }
      return layer._element.setProperty("overflow", "visible");
    },
    borderRadius: function borderRadius(layer) {
      if (!_.isNumber(layer._properties.borderRadius)) {
        return layer._element.setProperty("borderRadius", layer._properties.borderRadius);
      } else {
        return layer._element.setProperty("borderRadius", layer._properties.borderRadius);
      }
    },
    opacity: function opacity(layer) {
      var propertyValue;
      propertyValue = layer._properties.opacity;
      return layer._element.setOpacity(propertyValue);
    },
    index: function index(layer) {
      var propertyValue;
      propertyValue = layer._properties.index;
      return layer._element.setProperty("zIndex", propertyValue);
    },
    color: function color(layer) {
      var propertyValue;
      propertyValue = layer._properties.color;
      return layer._element.setProperty("color", propertyValue);
    },
    width: function width(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::width");
      propertyValue = layer._properties.width;
      console.log("propertyValue: " + propertyValue);
      nodeValues = layer._element.getAbsoluteSize();
      if (nodeValues != null) {
        return layer._element.setAbsoluteSize(propertyValue, nodeValues[1], nodeValues[2]);
      }
    },
    height: function height(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::height");
      propertyValue = layer._properties.height;
      console.log("propertyValue: " + propertyValue);
      nodeValues = layer._element.getAbsoluteSize();
      if (nodeValues != null) {
        return layer._element.setAbsoluteSize(nodeValues[0], propertyValue, nodeValues[2]);
      }
    },
    originX: function originX(layer) {
      var originValues, propertyValue;
      console.log("FamousPropertySetter::originX");
      propertyValue = layer._properties.originX;
      console.log("propertyValue: " + propertyValue);
      originValues = layer._element.getOrigin();
      console.log("originValues:");
      console.log(originValues);
      return layer._element.setOrigin(propertyValue, originValues[1], originValues[2]);
    },
    originY: function originY(layer) {
      var originValues, propertyValue;
      propertyValue = layer._properties.originY;
      originValues = layer._element.getOrigin();
      console.log("originValues:");
      console.log(originValues);
      return layer._element.setOrigin(originValues[0], propertyValue, originValues[2]);
    },
    x: function x(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::x");
      propertyValue = layer._properties.x;
      nodeValues = layer._element.getPosition();
      console.log("nodeValues:");
      console.log(nodeValues);
      console.log("propertyValue: " + propertyValue);
      return layer._element.setPosition(propertyValue, nodeValues[1], nodeValues[2]);
    },
    y: function y(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::y");
      propertyValue = layer._properties.y;
      nodeValues = layer._element.getPosition();
      console.log("nodeValues:");
      console.log(nodeValues);
      console.log("propertyValue: " + propertyValue);
      return layer._element.setPosition(nodeValues[0], propertyValue, nodeValues[2]);
    },
    z: function z(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::z");
      propertyValue = layer._properties.z;
      nodeValues = layer._element.getPosition();
      console.log("nodeValues:");
      console.log(nodeValues);
      console.log("propertyValue: " + propertyValue);
      return layer._element.setPosition(nodeValues[0], nodeValues[1], propertyValue);
    },
    scale: function scale(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::scale");
      propertyValue = layer._properties.scale;
      nodeValues = layer._element.getScale();
      return layer._element.setScale(propertyValue, propertyValue, propertyValue);
    },
    rotationX: function rotationX(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::rotationX");
      propertyValue = layer._properties.rotationX * Math.PI / 180;
      nodeValues = layer._element.getRotation();
      return layer._element.setRotation(propertyValue, nodeValues[1], nodeValues[2]);
    },
    rotationY: function rotationY(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::rotationY");
      propertyValue = layer._properties.rotationY * Math.PI / 180;
      nodeValues = layer._element.getRotation();
      return layer._element.setRotation(nodeValues[0], propertyValue, nodeValues[2]);
    },
    rotationZ: function rotationZ(layer) {
      var nodeValues, propertyValue;
      console.log("FamousPropertySetter::rotationZ");
      propertyValue = layer._properties.rotationZ * Math.PI / 180;
      nodeValues = layer._element.getRotation();
      return layer._element.setRotation(nodeValues[0], nodeValues[1], propertyValue);
    },
    backgroundColor: function backgroundColor(layer) {
      var propertyValue;
      propertyValue = layer._properties.backgroundColor;
      return layer._element.setProperty("backgroundColor", propertyValue);
    }
  };

  module.exports = FamousPropertySetter;
}).call(undefined);

},{}],148:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Clock, Defaults, Engine, Framer, _, famous;

  _ = require("./Underscore")._;

  Framer = {};

  famous = require("famous");

  Engine = famous.core.Engine;

  Clock = famous.utilities.Timer;

  window.setTimeout = function (callback, delay) {
    return Clock.setTimeout(callback, delay);
  };

  window.setInterval = function (callback, delay) {
    return Clock.setInterval(callback, delay);
  };

  Framer._ = _;

  Framer.Utils = require("./Utils");

  Framer.Layer = require("./Layer").Layer;

  Framer.BackgroundLayer = require("./BackgroundLayer").BackgroundLayer;

  Framer.VideoLayer = require("./VideoLayer").VideoLayer;

  Framer.Events = require("./Events").Events;

  Framer.Animation = require("./Animation").Animation;

  Framer.AnimationGroup = require("./AnimationGroup").AnimationGroup;

  Framer.Screen = require("./Screen").Screen;

  Framer.Canvas = require("./Canvas").Canvas;

  Framer.print = require("./Print").print;

  Framer.ScrollComponent = require("./Components/ScrollComponent").ScrollComponent;

  Framer.PageComponent = require("./Components/PageComponent").PageComponent;

  Framer.SliderComponent = require("./Components/SliderComponent").SliderComponent;

  Framer.DeviceComponent = require("./Components/DeviceComponent").DeviceComponent;

  Framer.DeviceView = Framer.DeviceComponent;

  if (window) {
    _.extend(window, Framer);
  }

  Framer.Context = require("./Context").Context;

  Framer.Config = require("./Config").Config;

  Framer.EventEmitter = require("./EventEmitter").EventEmitter;

  Framer.BaseClass = require("./BaseClass").BaseClass;

  Framer.LayerStyle = require("./LayerStyle").LayerStyle;

  Framer.AnimationLoop = require("./AnimationLoop").AnimationLoop;

  Framer.LinearAnimator = require("./Animators/LinearAnimator").LinearAnimator;

  Framer.BezierCurveAnimator = require("./Animators/BezierCurveAnimator").BezierCurveAnimator;

  Framer.SpringDHOAnimator = require("./Animators/SpringDHOAnimator").SpringDHOAnimator;

  Framer.SpringRK4Animator = require("./Animators/SpringRK4Animator").SpringRK4Animator;

  Framer.LayerDraggable = require("./LayerDraggable").LayerDraggable;

  Framer.Importer = require("./Importer").Importer;

  Framer.Debug = require("./Debug").Debug;

  Framer.Extras = require("./Extras/Extras");

  Framer.Loop = new Framer.AnimationLoop();

  Utils.domComplete(Framer.Loop.start);

  if (window) {
    window.Framer = Framer;
  }

  Framer.DefaultContext = new Framer.Context({
    name: "Default"
  });

  Framer.CurrentContext = Framer.DefaultContext;

  if (Utils.isMobile()) {
    Framer.Extras.MobileScrollFix.enable();
  }

  Defaults = require("./Defaults").Defaults;

  Defaults.setup();

  Framer.resetDefaults = Defaults.reset;
}).call(undefined);

},{"./Animation":120,"./AnimationGroup":121,"./AnimationLoop":122,"./Animators/BezierCurveAnimator":124,"./Animators/LinearAnimator":125,"./Animators/SpringDHOAnimator":126,"./Animators/SpringRK4Animator":127,"./BackgroundLayer":128,"./BaseClass":129,"./Canvas":130,"./Components/DeviceComponent":131,"./Components/PageComponent":132,"./Components/ScrollComponent":133,"./Components/SliderComponent":134,"./Config":135,"./Context":136,"./Debug":137,"./Defaults":138,"./EventEmitter":140,"./Events":142,"./Extras/Extras":143,"./Importer":149,"./Layer":151,"./LayerDraggable":152,"./LayerStyle":154,"./Print":155,"./Screen":156,"./Underscore":162,"./Utils":163,"./VideoLayer":164,"famous":24}],149:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var ChromeAlert,
      Utils,
      _,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  ChromeAlert = "Importing layers is currently only supported on Safari. If you really want it to work with Chrome quit it, open a terminal and run:\nopen -a Google\ Chrome -–allow-file-access-from-files";

  exports.Importer = (function () {
    function Importer(path1, extraLayerProperties) {
      this.path = path1;
      this.extraLayerProperties = extraLayerProperties != null ? extraLayerProperties : {};
      this.paths = {
        layerInfo: Utils.pathJoin(this.path, "layers.json"),
        images: Utils.pathJoin(this.path, "images"),
        documentName: this.path.split("/").pop()
      };
      this._createdLayers = [];
      this._createdLayersByName = {};
    }

    Importer.prototype.load = function () {
      var i, j, layer, layerInfo, layersByName, len, len1, ref, ref1;
      layersByName = {};
      layerInfo = this._loadlayerInfo();
      layerInfo.map((function (_this) {
        return function (layerItemInfo) {
          return _this._createLayer(layerItemInfo);
        };
      })(this));
      ref = this._createdLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        this._correctLayer(layer);
      }
      ref1 = this._createdLayers;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        layer = ref1[j];
        if (!layer.superLayer) {
          layer.superLayer = null;
        }
      }
      return this._createdLayersByName;
    };

    Importer.prototype._loadlayerInfo = function () {
      var importedKey, ref;
      importedKey = this.paths.documentName + "/layers.json.js";
      if ((ref = window.__imported__) != null ? ref.hasOwnProperty(importedKey) : void 0) {
        return window.__imported__[importedKey];
      }
      return Framer.Utils.domLoadJSONSync(this.paths.layerInfo);
    };

    Importer.prototype._createLayer = function (info, superLayer) {
      var LayerClass, layer, layerInfo, ref;
      LayerClass = Layer;
      layerInfo = {
        shadow: true,
        name: info.name,
        frame: info.layerFrame,
        clip: false,
        backgroundColor: null,
        visible: (ref = info.visible) != null ? ref : true
      };
      _.extend(layerInfo, this.extraLayerProperties);
      if (info.image) {
        layerInfo.frame = info.image.frame;
        layerInfo.image = Utils.pathJoin(this.path, info.image.path);
      }
      if (info.maskFrame) {
        layerInfo.frame = info.maskFrame;
        layerInfo.clip = true;
      }
      if (info.children.length === 0 && indexOf.call(_.pluck(superLayer != null ? superLayer.superLayers() : void 0, "clip"), true) >= 0) {
        layerInfo.frame = info.image.frame;
        layerInfo.clip = false;
      }
      if (superLayer != null ? superLayer.contentLayer : void 0) {
        layerInfo.superLayer = superLayer.contentLayer;
      } else if (superLayer) {
        layerInfo.superLayer = superLayer;
      }
      layer = new LayerClass(layerInfo);
      layer.name = layerInfo.name;
      if (layerInfo.name.toLowerCase().indexOf("scroll") !== -1) {
        layer.scroll = true;
      }
      if (layerInfo.name.toLowerCase().indexOf("draggable") !== -1) {
        layer.draggable.enabled = true;
      }
      if (!layer.image && !info.children.length && !info.maskFrame) {
        layer.frame = Utils.frameZero();
      }
      _.clone(info.children).reverse().map((function (_this) {
        return function (info) {
          return _this._createLayer(info, layer);
        };
      })(this));
      if (!layer.image && !info.maskFrame) {
        layer.frame = layer.contentFrame();
      }
      layer._info = info;
      this._createdLayers.push(layer);
      return this._createdLayersByName[layer.name] = layer;
    };

    Importer.prototype._correctLayer = function (layer) {
      var traverse;
      traverse = function (layer) {
        var i, len, ref, results, subLayer;
        if (layer.superLayer) {
          layer.frame = Utils.convertPoint(layer.frame, null, layer.superLayer);
        }
        ref = layer.subLayers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          subLayer = ref[i];
          results.push(traverse(subLayer));
        }
        return results;
      };
      if (!layer.superLayer) {
        return traverse(layer);
      }
    };

    return Importer;
  })();

  exports.Importer.load = function (path) {
    var importer;
    importer = new exports.Importer(path);
    return importer.load();
  };
}).call(undefined);

},{"./Underscore":162,"./Utils":163}],150:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Config, Utils;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  exports.Integrator = (function () {
    "Usage:\n	- Instantiate with a function that takes (state) -> acceleration\n	- Call integrateState with state={x, v} and delta";
    function Integrator(_accelerationForState) {
      this._accelerationForState = _accelerationForState;
      if (!_.isFunction(this._accelerationForState)) {
        console.warn("Integrator: an integrator must be constructed with an acceleration function");
        this._accelerationForState = function () {
          return 0;
        };
      }
    }

    Integrator.prototype.integrateState = function (state, dt) {
      var a, b, c, d, dvdt, dxdt;
      a = this._evaluateState(state);
      b = this._evaluateStateWithDerivative(state, dt * 0.5, a);
      c = this._evaluateStateWithDerivative(state, dt * 0.5, b);
      d = this._evaluateStateWithDerivative(state, dt, c);
      dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx);
      dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
      state.x = state.x + dxdt * dt;
      state.v = state.v + dvdt * dt;
      return state;
    };

    Integrator.prototype._evaluateState = function (initialState) {
      var output;
      output = {};
      output.dx = initialState.v;
      output.dv = this._accelerationForState(initialState);
      return output;
    };

    Integrator.prototype._evaluateStateWithDerivative = function (initialState, dt, derivative) {
      var output, state;
      state = {};
      state.x = initialState.x + derivative.dx * dt;
      state.v = initialState.v + derivative.dv * dt;
      output = {};
      output.dx = state.v;
      output.dv = this._accelerationForState(state);
      return output;
    };

    return Integrator;
  })();
}).call(undefined);

},{"./Config":135,"./Utils":163}],151:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Animation,
      BaseClass,
      Config,
      Defaults,
      Engine,
      EventEmitter,
      Events,
      FamousLayer,
      FamousPropertySetter,
      LayerDraggable,
      LayerStates,
      LayerStyle,
      NoCacheDateKey,
      Utils,
      _,
      famous,
      layerProperty,
      layerValueTypeError,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  },
      slice = [].slice;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  Defaults = require("./Defaults").Defaults;

  BaseClass = require("./BaseClass").BaseClass;

  EventEmitter = require("./EventEmitter").EventEmitter;

  Animation = require("./Animation").Animation;

  LayerStyle = require("./LayerStyle").LayerStyle;

  LayerStates = require("./LayerStates").LayerStates;

  LayerDraggable = require("./LayerDraggable").LayerDraggable;

  Events = require("./Events").Events;

  NoCacheDateKey = Date.now();

  famous = require("famous");

  Engine = famous.core.Engine;

  FamousPropertySetter = require("./FamousPropertySetter");

  FamousLayer = require("./FamousLayer");

  layerValueTypeError = function (name, value) {
    throw new Error("Layer." + name + ": value '" + value + "' of type '" + typeof value + "'' is not valid");
  };

  layerProperty = function (obj, name, cssProperty, fallback, validator, options, _set) {
    var result;
    if (options == null) {
      options = {};
    }
    result = {
      "default": fallback,
      get: function get() {
        result = null;
        if (this._properties.hasOwnProperty(name)) {
          result = this._properties[name];
        }
        if (result === null) {
          result = fallback;
        }
        return result;
      },
      set: function set(value) {
        if (value && validator && !validator(value)) {
          layerValueTypeError(name, value);
        }
        this._properties[name] = value;
        if (typeof FamousPropertySetter[name] === "function") {
          FamousPropertySetter[name](this);
        }
        if (typeof _set === "function") {
          _set(this, value);
        }
        this.emit("change:" + name, value);
        if (name === "x" || name === "y") {
          this.emit("change:point", value);
        }
        if (name === "width" || name === "height") {
          this.emit("change:size", value);
        }
        if (name === "x" || name === "y" || name === "width" || name === "height") {
          this.emit("change:frame", value);
        }
        if (name === "rotationZ") {
          return this.emit("change:rotation", value);
        }
      }
    };
    return result = _.extend(result, options);
  };

  exports.Layer = (function (superClass) {
    extend(Layer, superClass);

    function Layer(options) {
      if (options == null) {
        options = {};
      }
      this.addListener = bind(this.addListener, this);
      this._properties = {};
      this._style = {};
      this._prefer2d = false;
      this._alwaysUseImageCache = false;
      this._createElement();
      if (options.hasOwnProperty("frame")) {
        options = _.extend(options, options.frame);
      }
      options = Defaults.getDefaults("Layer", options);
      Layer.__super__.constructor.call(this, options);
      this._context.addLayer(this);
      this._id = this._context.nextLayerId();
      this._element.setId(this._id);
      if (!options.superLayer) {
        if (!options.shadow) {
          this._insertElement();
        }
      } else {
        this.superLayer = options.superLayer;
      }
      if (options.hasOwnProperty("index")) {
        this.index = options.index;
      }
      this._subLayers = [];
      this._context.emit("layer:create", this);
    }

    Layer.define("custom", Layer.simpleProperty("custom", void 0));

    Layer.define("width", layerProperty(Layer, "width", "width", 100, _.isNumber));

    Layer.define("height", layerProperty(Layer, "height", "height", 100, _.isNumber));

    Layer.define("visible", layerProperty(Layer, "visible", "display", true, _.isBoolean));

    Layer.define("opacity", layerProperty(Layer, "opacity", "opacity", 1, _.isNumber));

    Layer.define("index", layerProperty(Layer, "index", "zIndex", 0, _.isNumber, {
      importable: false,
      exportable: false
    }));

    Layer.define("clip", layerProperty(Layer, "clip", "overflow", true, _.isBoolean));

    Layer.define("scrollHorizontal", layerProperty(Layer, "scrollHorizontal", "overflowX", false, _.isBoolean, {}, function (layer, value) {
      if (value === true) {
        return layer.ignoreEvents = false;
      }
    }));

    Layer.define("scrollVertical", layerProperty(Layer, "scrollVertical", "overflowY", false, _.isBoolean, {}, function (layer, value) {
      if (value === true) {
        return layer.ignoreEvents = false;
      }
    }));

    Layer.define("scroll", {
      get: function get() {
        return this.scrollHorizontal === true || this.scrollVertical === true;
      },
      set: function set(value) {
        return this.scrollHorizontal = this.scrollVertical = value;
      }
    });

    Layer.define("ignoreEvents", layerProperty(Layer, "ignoreEvents", "pointerEvents", true, _.isBoolean));

    Layer.define("x", layerProperty(Layer, "x", "webkitTransform", 0, _.isNumber));

    Layer.define("y", layerProperty(Layer, "y", "webkitTransform", 0, _.isNumber));

    Layer.define("z", layerProperty(Layer, "z", "webkitTransform", 0, _.isNumber));

    Layer.define("scaleX", layerProperty(Layer, "scaleX", "webkitTransform", 1, _.isNumber));

    Layer.define("scaleY", layerProperty(Layer, "scaleY", "webkitTransform", 1, _.isNumber));

    Layer.define("scaleZ", layerProperty(Layer, "scaleZ", "webkitTransform", 1, _.isNumber));

    Layer.define("scale", layerProperty(Layer, "scale", "webkitTransform", 1, _.isNumber));

    Layer.define("skewX", layerProperty(Layer, "skewX", "webkitTransform", 0, _.isNumber));

    Layer.define("skewY", layerProperty(Layer, "skewY", "webkitTransform", 0, _.isNumber));

    Layer.define("skew", layerProperty(Layer, "skew", "webkitTransform", 0, _.isNumber));

    Layer.define("originX", layerProperty(Layer, "originX", "webkitTransformOrigin", 0.5, _.isNumber));

    Layer.define("originY", layerProperty(Layer, "originY", "webkitTransformOrigin", 0.5, _.isNumber));

    Layer.define("perspective", layerProperty(Layer, "perspective", "webkitPerspective", 0, _.isNumber));

    Layer.define("rotationX", layerProperty(Layer, "rotationX", "webkitTransform", 0, _.isNumber));

    Layer.define("rotationY", layerProperty(Layer, "rotationY", "webkitTransform", 0, _.isNumber));

    Layer.define("rotationZ", layerProperty(Layer, "rotationZ", "webkitTransform", 0, _.isNumber));

    Layer.define("rotation", {
      get: function get() {
        return this.rotationZ;
      },
      set: function set(value) {
        return this.rotationZ = value;
      }
    });

    Layer.define("blur", layerProperty(Layer, "blur", "webkitFilter", 0, _.isNumber));

    Layer.define("brightness", layerProperty(Layer, "brightness", "webkitFilter", 100, _.isNumber));

    Layer.define("saturate", layerProperty(Layer, "saturate", "webkitFilter", 100, _.isNumber));

    Layer.define("hueRotate", layerProperty(Layer, "hueRotate", "webkitFilter", 0, _.isNumber));

    Layer.define("contrast", layerProperty(Layer, "contrast", "webkitFilter", 100, _.isNumber));

    Layer.define("invert", layerProperty(Layer, "invert", "webkitFilter", 0, _.isNumber));

    Layer.define("grayscale", layerProperty(Layer, "grayscale", "webkitFilter", 0, _.isNumber));

    Layer.define("sepia", layerProperty(Layer, "sepia", "webkitFilter", 0, _.isNumber));

    Layer.define("shadowX", layerProperty(Layer, "shadowX", "boxShadow", 0, _.isNumber));

    Layer.define("shadowY", layerProperty(Layer, "shadowY", "boxShadow", 0, _.isNumber));

    Layer.define("shadowBlur", layerProperty(Layer, "shadowBlur", "boxShadow", 0, _.isNumber));

    Layer.define("shadowSpread", layerProperty(Layer, "shadowSpread", "boxShadow", 0, _.isNumber));

    Layer.define("shadowColor", layerProperty(Layer, "shadowColor", "boxShadow", ""));

    Layer.define("backgroundColor", layerProperty(Layer, "backgroundColor", "backgroundColor", null, _.isString));

    Layer.define("color", layerProperty(Layer, "color", "color", null, _.isString));

    Layer.define("borderColor", layerProperty(Layer, "borderColor", "border", null, _.isString));

    Layer.define("borderWidth", layerProperty(Layer, "borderWidth", "border", 0, _.isNumber));

    Layer.define("force2d", layerProperty(Layer, "force2d", "webkitTransform", false, _.isBoolean));

    Layer.define("name", {
      "default": "",
      get: function get() {
        return this._element._attributes["name"];
      },
      set: function set(value) {
        this._setPropertyValue("name", value);
        return this._element.setAttribute("name", value);
      }
    });

    Layer.define("borderRadius", {
      "default": 0,
      get: function get() {
        return this._properties["borderRadius"];
      },
      set: function set(value) {
        this._properties["borderRadius"] = value;
        this._element.setProperty("borderRadius", LayerStyle["borderRadius"](this));
        return this.emit("change:borderRadius", value);
      }
    });

    Layer.define("cornerRadius", {
      importable: true,
      get: function get() {
        return this.borderRadius;
      },
      set: function set(value) {
        return this.borderRadius = value;
      }
    });

    Layer.define("point", {
      get: function get() {
        return _.pick(this, ["x", "y"]);
      },
      set: function set(point) {
        var i, k, len, ref, results;
        if (!point) {
          return;
        }
        ref = ["x", "y"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (point.hasOwnProperty(k)) {
            results.push(this[k] = point[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("size", {
      get: function get() {
        return _.pick(this, ["width", "height"]);
      },
      set: function set(size) {
        var i, k, len, ref, results;
        if (!size) {
          return;
        }
        ref = ["width", "height"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (size.hasOwnProperty(k)) {
            results.push(this[k] = size[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("frame", {
      get: function get() {
        return _.pick(this, ["x", "y", "width", "height"]);
      },
      set: function set(frame) {
        var i, k, len, ref, results;
        if (!frame) {
          return;
        }
        ref = ["x", "y", "width", "height"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (frame.hasOwnProperty(k)) {
            results.push(this[k] = frame[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("minX", {
      importable: true,
      exportable: false,
      get: function get() {
        return this.x;
      },
      set: function set(value) {
        return this.x = value;
      }
    });

    Layer.define("midX", {
      importable: true,
      exportable: false,
      get: function get() {
        return Utils.frameGetMidX(this);
      },
      set: function set(value) {
        return Utils.frameSetMidX(this, value);
      }
    });

    Layer.define("maxX", {
      importable: true,
      exportable: false,
      get: function get() {
        return Utils.frameGetMaxX(this);
      },
      set: function set(value) {
        return Utils.frameSetMaxX(this, value);
      }
    });

    Layer.define("minY", {
      importable: true,
      exportable: false,
      get: function get() {
        return this.y;
      },
      set: function set(value) {
        return this.y = value;
      }
    });

    Layer.define("midY", {
      importable: true,
      exportable: false,
      get: function get() {
        return Utils.frameGetMidY(this);
      },
      set: function set(value) {
        return Utils.frameSetMidY(this, value);
      }
    });

    Layer.define("maxY", {
      importable: true,
      exportable: false,
      get: function get() {
        return Utils.frameGetMaxY(this);
      },
      set: function set(value) {
        return Utils.frameSetMaxY(this, value);
      }
    });

    Layer.prototype.convertPoint = function (point) {
      return Utils.convertPoint(point, null, this);
    };

    Layer.define("canvasFrame", {
      importable: true,
      exportable: false,
      get: function get() {
        var context;
        return Utils.convertPoint(this.frame, this, null, context = true);
      },
      set: function set(frame) {
        var context;
        if (!this.superLayer) {
          return this.frame = frame;
        } else {
          return this.frame = Utils.convertPoint(frame, null, this.superLayer, context = true);
        }
      }
    });

    Layer.define("screenFrame", {
      importable: true,
      exportable: false,
      get: function get() {
        var context;
        return Utils.convertPoint(this.frame, this, null, context = false);
      },
      set: function set(frame) {
        var context;
        if (!this.superLayer) {
          return this.frame = frame;
        } else {
          return this.frame = Utils.convertPoint(frame, null, this.superLayer, context = false);
        }
      }
    });

    Layer.prototype.contentFrame = function () {
      if (!this.subLayers.length) {
        return {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      return Utils.frameMerge(_.pluck(this.subLayers, "frame"));
    };

    Layer.prototype.centerFrame = function () {
      var frame;
      if (this.superLayer) {
        frame = this.frame;
        Utils.frameSetMidX(frame, parseInt(this.superLayer.width / 2.0));
        Utils.frameSetMidY(frame, parseInt(this.superLayer.height / 2.0));
        return frame;
      } else {
        frame = this.frame;
        Utils.frameSetMidX(frame, parseInt(this._context.width / 2.0));
        Utils.frameSetMidY(frame, parseInt(this._context.height / 2.0));
        return frame;
      }
    };

    Layer.prototype.center = function () {
      this.frame = this.centerFrame();
      return this;
    };

    Layer.prototype.centerX = function (offset) {
      if (offset == null) {
        offset = 0;
      }
      this.x = this.centerFrame().x + offset;
      return this;
    };

    Layer.prototype.centerY = function (offset) {
      if (offset == null) {
        offset = 0;
      }
      this.y = this.centerFrame().y + offset;
      return this;
    };

    Layer.prototype.pixelAlign = function () {
      this.x = parseInt(this.x);
      return this.y = parseInt(this.y);
    };

    Layer.prototype.canvasScaleX = function () {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleX;
      ref = this.superLayers(context = true);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleX;
      }
      return scale;
    };

    Layer.prototype.canvasScaleY = function () {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleY;
      ref = this.superLayers(context = true);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleY;
      }
      return scale;
    };

    Layer.prototype.screenScaleX = function () {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleX;
      ref = this.superLayers(context = false);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleX;
      }
      return scale;
    };

    Layer.prototype.screenScaleY = function () {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleY;
      ref = this.superLayers(context = false);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleY;
      }
      return scale;
    };

    Layer.prototype.screenScaledFrame = function () {
      var context, factorX, factorY, frame, i, layerScaledFrame, layers, len, superLayer;
      frame = {
        x: 0,
        y: 0,
        width: this.width * this.screenScaleX(),
        height: this.height * this.screenScaleY()
      };
      layers = this.superLayers(context = true);
      layers.push(this);
      layers.reverse();
      for (i = 0, len = layers.length; i < len; i++) {
        superLayer = layers[i];
        factorX = superLayer._superOrParentLayer() ? superLayer._superOrParentLayer().screenScaleX() : 1;
        factorY = superLayer._superOrParentLayer() ? superLayer._superOrParentLayer().screenScaleY() : 1;
        layerScaledFrame = superLayer.scaledFrame();
        frame.x += layerScaledFrame.x * factorX;
        frame.y += layerScaledFrame.y * factorY;
      }
      return frame;
    };

    Layer.prototype.scaledFrame = function () {
      var frame, scaleX, scaleY;
      frame = this.frame;
      scaleX = this.scale * this.scaleX;
      scaleY = this.scale * this.scaleY;
      frame.width *= scaleX;
      frame.height *= scaleY;
      frame.x += (1 - scaleX) * this.originX * this.width;
      frame.y += (1 - scaleY) * this.originY * this.height;
      return frame;
    };

    Layer.define("style", {
      importable: true,
      exportable: false,
      get: function get() {
        return this._element._styles;
      },
      set: function set(value) {
        var key, val;
        _.extend(this._element.style, value);
        for (key in value) {
          val = value[key];
          this._properties[key] = val;
          this._element.setProperty(key, val);
        }
        return this.emit("change:style");
      }
    });

    Layer.prototype.computedStyle = function () {
      var getComputedStyle;
      getComputedStyle = document.defaultView.getComputedStyle;
      if (getComputedStyle == null) {
        getComputedStyle = window.getComputedStyle;
      }
      return getComputedStyle(this._element);
    };

    Layer.define("classList", {
      importable: true,
      exportable: false,
      get: function get() {
        return this._element.classList;
      }
    });

    Layer.prototype._framerOriginal__createElement = function () {
      if (this._element != null) {
        return;
      }
      this._element = document.createElement("div");
      return this._element.classList.add("framerLayer");
    };

    Layer.prototype._createElement = function () {
      if (this._element != null) {
        return;
      }
      this._element = new FamousLayer();
      console.log("_createElement:");
      this._element._layer = this;
      return this._element;
    };

    Layer.prototype._insertElement = function () {
      this.bringToFront();
      console.log("Add layer's name: " + this.name + " node to context rootElement");
      return this._context.getRootElement().add(this._element.node);
    };

    Layer.define("html", {
      get: function get() {
        var ref;
        return ((ref = this._element) != null ? ref.content : void 0) || "";
      },
      set: function set(value) {
        this._element.setContent(value);
        return this.emit("change:html");
      }
    });

    Layer.prototype.querySelector = function (query) {
      return this._element.querySelector(query);
    };

    Layer.prototype.querySelectorAll = function (query) {
      return this._element.querySelectorAll(query);
    };

    Layer.prototype.destroy = function () {
      if (this.superLayer) {
        this.superLayer._subLayers = _.without(this.superLayer._subLayers, this);
      }
      this._element.removeFromParent();
      this.removeAllListeners();
      this._context.removeLayer(this);
      return this._context.emit("layer:destroy", this);
    };

    Layer.prototype.copy = function () {
      var copiedSublayer, i, layer, len, ref, subLayer;
      layer = this.copySingle();
      ref = this.subLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        subLayer = ref[i];
        copiedSublayer = subLayer.copy();
        copiedSublayer.superLayer = layer;
      }
      return layer;
    };

    Layer.prototype.copySingle = function () {
      return new this.constructor(this.props);
    };

    Layer.define("image", {
      "default": "",
      get: function get() {
        return this._getPropertyValue("image");
      },
      set: function set(value) {
        var currentValue, imageUrl, loader, ref, ref1;
        if (!(_.isString(value) || value === null)) {
          layerValueTypeError("image", value);
        }
        currentValue = this._getPropertyValue("image");
        if (currentValue === value) {
          return this.emit("load");
        }
        this.backgroundColor = null;
        this._setPropertyValue("image", value);
        if (value === null || value === "") {
          this._element.setProperty("background-image", null);
          return;
        }
        imageUrl = value;
        if (this._alwaysUseImageCache === false && Utils.isLocalAssetUrl(imageUrl)) {
          imageUrl += "?nocache=" + NoCacheDateKey;
        }
        if ((ref = this._eventListeners) != null ? ref.hasOwnProperty("load" || ((ref1 = this._eventListeners) != null ? ref1.hasOwnProperty("error") : void 0)) : void 0) {
          loader = new Image();
          loader.name = imageUrl;
          loader.src = imageUrl;
          loader.onload = (function (_this) {
            return function () {
              _this._element.setProperty("background-image", "url('" + imageUrl + "')");
              return _this.emit("load", loader);
            };
          })(this);
          return loader.onerror = (function (_this) {
            return function () {
              return _this.emit("error", loader);
            };
          })(this);
        } else {
          return this._element.setProperty("background-image", "url('" + imageUrl + "')");
        }
      }
    });

    Layer.define("superLayer", {
      enumerable: false,
      exportable: false,
      importable: true,
      get: function get() {
        return this._superLayer || null;
      },
      set: function set(layer) {
        if (layer === this._superLayer) {
          return;
        }
        if (!layer instanceof Layer) {
          throw Error("Layer.superLayer needs to be a Layer object");
        }
        if (this._superLayer) {
          this._superLayer._subLayers = _.without(this._superLayer._subLayers, this);
          this._superLayer._element.removeSubLayer(this._element);
          this._superLayer.emit("change:subLayers", {
            added: [],
            removed: [this]
          });
        }
        if (layer) {
          layer._element.addSubLayer(this._element);
          layer._subLayers.push(this);
          layer.emit("change:subLayers", {
            added: [this],
            removed: []
          });
        } else {
          this._insertElement();
        }
        this._superLayer = layer;
        this.bringToFront();
        return this.emit("change:superLayer");
      }
    });

    Layer.define("subLayers", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function get() {
        return _.clone(this._subLayers);
      }
    });

    Layer.define("siblingLayers", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function get() {
        if (this.superLayer === null) {
          return _.filter(this._context.getLayers(), (function (_this) {
            return function (layer) {
              return layer !== _this && layer.superLayer === null;
            };
          })(this));
        }
        return _.without(this.superLayer.subLayers, this);
      }
    });

    Layer.prototype.addSubLayer = function (layer) {
      return layer.superLayer = this;
    };

    Layer.prototype.removeSubLayer = function (layer) {
      if (indexOf.call(this.subLayers, layer) < 0) {
        return;
      }
      return layer.superLayer = null;
    };

    Layer.prototype.subLayersByName = function (name) {
      return _.filter(this.subLayers, function (layer) {
        return layer.name === name;
      });
    };

    Layer.prototype.siblingLayersByName = function (name) {
      return _.filter(this.siblingLayers, function (layer) {
        return layer.name === name;
      });
    };

    Layer.prototype.superLayers = function (context) {
      var currentLayer, superLayers;
      if (context == null) {
        context = false;
      }
      superLayers = [];
      currentLayer = this;
      if (context === false) {
        while (currentLayer.superLayer) {
          superLayers.push(currentLayer.superLayer);
          currentLayer = currentLayer.superLayer;
        }
      } else {
        while (currentLayer._superOrParentLayer()) {
          superLayers.push(currentLayer._superOrParentLayer());
          currentLayer = currentLayer._superOrParentLayer();
        }
      }
      return superLayers;
    };

    Layer.prototype._superOrParentLayer = function () {
      if (this.superLayer) {
        return this.superLayer;
      }
      if (this._context._parentLayer) {
        return this._context._parentLayer;
      }
    };

    Layer.prototype.subLayersAbove = function (point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function (layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).y < point.y;
      });
    };

    Layer.prototype.subLayersBelow = function (point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function (layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).y > point.y;
      });
    };

    Layer.prototype.subLayersLeft = function (point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function (layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).x < point.x;
      });
    };

    Layer.prototype.subLayersRight = function (point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function (layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).x > point.x;
      });
    };

    Layer.prototype.animate = function (options) {
      var animation, start;
      start = options.start;
      if (start == null) {
        start = true;
      }
      delete options.start;
      options.layer = this;
      animation = new Animation(options);
      if (start) {
        animation.start();
      }
      return animation;
    };

    Layer.prototype.animations = function () {
      return _.filter(this._context._animationList, (function (_this) {
        return function (animation) {
          return animation.options.layer === _this;
        };
      })(this));
    };

    Layer.prototype.animatingProperties = function () {
      var animation, i, j, len, len1, properties, propertyName, ref, ref1;
      properties = {};
      ref = this.animations();
      for (i = 0, len = ref.length; i < len; i++) {
        animation = ref[i];
        ref1 = animation.animatingProperties();
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          propertyName = ref1[j];
          properties[propertyName] = animation;
        }
      }
      return properties;
    };

    Layer.define("isAnimating", {
      enumerable: false,
      exportable: false,
      get: function get() {
        return this.animations().length !== 0;
      }
    });

    Layer.prototype.animateStop = function () {
      var ref;
      _.invoke(this.animations(), "stop");
      return (ref = this._draggable) != null ? ref.animateStop() : void 0;
    };

    Layer.prototype.bringToFront = function () {
      return this.index = _.max(_.union([0], this.siblingLayers.map(function (layer) {
        return layer.index;
      }))) + 1;
    };

    Layer.prototype.sendToBack = function () {
      return this.index = _.min(_.union([0], this.siblingLayers.map(function (layer) {
        return layer.index;
      }))) - 1;
    };

    Layer.prototype.placeBefore = function (layer) {
      var i, l, len, ref;
      if (indexOf.call(this.siblingLayers, layer) < 0) {
        return;
      }
      ref = this.siblingLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        if (l.index <= layer.index) {
          l.index -= 1;
        }
      }
      return this.index = layer.index + 1;
    };

    Layer.prototype.placeBehind = function (layer) {
      var i, l, len, ref;
      if (indexOf.call(this.siblingLayers, layer) < 0) {
        return;
      }
      ref = this.siblingLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        if (l.index >= layer.index) {
          l.index += 1;
        }
      }
      return this.index = layer.index - 1;
    };

    Layer.define("states", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function get() {
        return this._states != null ? this._states : this._states = new LayerStates(this);
      }
    });

    Layer.define("draggable", {
      importable: false,
      exportable: false,
      get: function get() {
        return this._draggable != null ? this._draggable : this._draggable = new LayerDraggable(this);
      },
      set: function set(value) {
        if (_.isBoolean(value)) {
          return this.draggable.enabled = value;
        }
      }
    });

    Layer.define("scrollFrame", {
      importable: false,
      get: function get() {
        var frame;
        return frame = {
          x: this.scrollX,
          y: this.scrollY,
          width: this.width,
          height: this.height
        };
      },
      set: function set(frame) {
        this.scrollX = frame.x;
        return this.scrollY = frame.y;
      }
    });

    Layer.define("scrollX", {
      get: function get() {
        return this._element._styles['scrollLeft'];
      },
      set: function set(value) {
        if (!_.isNumber(value)) {
          layerValueTypeError("scrollX", value);
        }
        return this._element.setProperty("scrollLeft", value);
      }
    });

    Layer.define("scrollY", {
      get: function get() {
        return this._element._styles["scrollTop"];
      },
      set: function set(value) {
        if (!_.isNumber(value)) {
          layerValueTypeError("scrollY", value);
        }
        return this._element.setProperty("scrollTop", value);
      }
    });

    Layer.prototype.addListener = function () {
      var eventName, eventNames, i, j, len, listener, originalListener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), originalListener = arguments[i++];
      if (!originalListener) {
        return;
      }
      listener = (function (_this) {
        return function () {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return originalListener.call.apply(originalListener, [_this].concat(slice.call(args), [_this]));
        };
      })(this);
      originalListener.modifiedListener = listener;
      if (typeof eventNames === 'string') {
        eventNames = [eventNames];
      }
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        results.push((function (_this) {
          return function (eventName) {
            var base;
            Layer.__super__.addListener.call(_this, eventName, listener);
            _this._context.eventManager.wrap(_this._element).addEventListener(eventName, listener);
            if (_this._eventListeners == null) {
              _this._eventListeners = {};
            }
            if ((base = _this._eventListeners)[eventName] == null) {
              base[eventName] = [];
            }
            _this._eventListeners[eventName].push(listener);
            if (!_.startsWith(eventName, "change:")) {
              return _this.ignoreEvents = false;
            }
          };
        })(this)(eventName));
      }
      return results;
    };

    Layer.prototype.removeListener = function () {
      var eventName, eventNames, i, j, len, listener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      if (listener.modifiedListener) {
        listener = listener.modifiedListener;
      }
      if (typeof eventNames === 'string') {
        eventNames = [eventNames];
      }
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        results.push((function (_this) {
          return function (eventName) {
            Layer.__super__.removeListener.call(_this, eventName, listener);
            _this._context.eventManager.wrap(_this._element).removeEventListener(eventName, listener);
            if (_this._eventListeners) {
              return _this._eventListeners[eventName] = _.without(_this._eventListeners[eventName], listener);
            }
          };
        })(this)(eventName));
      }
      return results;
    };

    Layer.prototype.once = function (eventName, listener) {
      var originalListener;
      originalListener = listener;
      listener = (function (_this) {
        return function () {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          originalListener.call.apply(originalListener, [_this].concat(slice.call(args), [_this]));
          return _this.removeListener(eventName, listener);
        };
      })(this);
      return this.addListener(eventName, listener);
    };

    Layer.prototype.removeAllListeners = function () {
      var eventName, listener, listeners, ref, results;
      if (!this._eventListeners) {
        return;
      }
      ref = this._eventListeners;
      results = [];
      for (eventName in ref) {
        listeners = ref[eventName];
        results.push((function () {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = listeners.length; i < len; i++) {
            listener = listeners[i];
            results1.push(this.removeListener(eventName, listener));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Layer.prototype.on = Layer.prototype.addListener;

    Layer.prototype.off = Layer.prototype.removeListener;

    Layer.prototype.toInspect = function () {
      var round;
      round = function (value) {
        if (parseInt(value) === value) {
          return parseInt(value);
        }
        return Utils.round(value, 1);
      };
      if (this.name) {
        return "<" + this.constructor.name + " id:" + this.id + " name:" + this.name + " (" + round(this.x) + "," + round(this.y) + ") " + round(this.width) + "x" + round(this.height) + ">";
      }
      return "<" + this.constructor.name + " id:" + this.id + " (" + round(this.x) + "," + round(this.y) + ") " + round(this.width) + "x" + round(this.height) + ">";
    };

    return Layer;
  })(BaseClass);
}).call(undefined);

},{"./Animation":120,"./BaseClass":129,"./Config":135,"./Defaults":138,"./EventEmitter":140,"./Events":142,"./FamousLayer":146,"./FamousPropertySetter":147,"./LayerDraggable":152,"./LayerStates":153,"./LayerStyle":154,"./Underscore":162,"./Utils":163,"famous":24}],152:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Defaults,
      EventBuffer,
      Events,
      Simulation,
      Utils,
      _,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  Simulation = require("./Simulation").Simulation;

  Defaults = require("./Defaults").Defaults;

  EventBuffer = require("./EventBuffer").EventBuffer;

  Events.Move = "move";

  Events.DragStart = "dragstart";

  Events.DragWillMove = "dragwillmove";

  Events.DragMove = "dragmove";

  Events.DragDidMove = "dragmove";

  Events.Drag = "dragmove";

  Events.DragEnd = "dragend";

  Events.DragAnimationDidStart = "draganimationdidstart";

  Events.DragAnimationDidEnd = "draganimationdidend";

  Events.DirectionLockDidStart = "directionlockdidstart";

  "         \n┌──────┐                   │         \n│      │                             \n│      │  ───────────────▶ │ ◀────▶  \n│      │                             \n└──────┘                   │         \n                                     \n════════  ═════════════════ ═══════  \n                                     \n  Drag         Momentum      Bounce  \n                                         ";

  exports.LayerDraggable = (function (superClass) {
    extend(LayerDraggable, superClass);

    LayerDraggable.define("speedX", LayerDraggable.simpleProperty("speedX", 1));

    LayerDraggable.define("speedY", LayerDraggable.simpleProperty("speedY", 1));

    LayerDraggable.define("horizontal", LayerDraggable.simpleProperty("horizontal", true));

    LayerDraggable.define("vertical", LayerDraggable.simpleProperty("vertical", true));

    LayerDraggable.define("momentumVelocityMultiplier", LayerDraggable.simpleProperty("momentumVelocityMultiplier", 800));

    LayerDraggable.define("directionLock", LayerDraggable.simpleProperty("directionLock", true));

    LayerDraggable.define("directionLockThreshold", LayerDraggable.simpleProperty("directionLockThreshold", {
      x: 10,
      y: 10
    }));

    LayerDraggable.define("propagateEvents", LayerDraggable.simpleProperty("propagateEvents", true));

    LayerDraggable.define("constraints", {
      get: function get() {
        return this._constraints;
      },
      set: function set(value) {
        if (value && _.isObject(value)) {
          this._constraints = _.defaults(value, {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          });
        } else {
          this._constraints = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        if (this._constraints) {
          return this._updateSimulationConstraints(this._constraints);
        }
      }
    });

    LayerDraggable.define("isDragging", {
      get: function get() {
        return this._isDragging || false;
      }
    });

    LayerDraggable.define("isAnimating", {
      get: function get() {
        return this._isAnimating || false;
      }
    });

    LayerDraggable.define("isMoving", {
      get: function get() {
        return this._isMoving || false;
      }
    });

    LayerDraggable.define("layerStartPoint", {
      get: function get() {
        return this._layerStartPoint || this.layer.point;
      }
    });

    LayerDraggable.define("cursorStartPoint", {
      get: function get() {
        return this._cursorStartPoint || {
          x: 0,
          y: 0
        };
      }
    });

    LayerDraggable.define("layerCursorOffset", {
      get: function get() {
        return this._layerCursorOffset || {
          x: 0,
          y: 0
        };
      }
    });

    LayerDraggable.define("offset", {
      get: function get() {
        var offset;
        if (!this._correctedLayerStartPoint) {
          return {
            x: 0,
            y: 0
          };
        }
        return offset = {
          x: this.layer.x - this._correctedLayerStartPoint.x,
          y: this.layer.y - this._correctedLayerStartPoint.y
        };
      }
    });

    function LayerDraggable(layer) {
      var options;
      this.layer = layer;
      this._stopSimulation = bind(this._stopSimulation, this);
      this._onSimulationStop = bind(this._onSimulationStop, this);
      this._onSimulationStep = bind(this._onSimulationStep, this);
      this._touchEnd = bind(this._touchEnd, this);
      this._touchMove = bind(this._touchMove, this);
      this._touchStart = bind(this._touchStart, this);
      this.touchStart = bind(this.touchStart, this);
      options = Defaults.getDefaults("LayerDraggable", {});
      LayerDraggable.__super__.constructor.call(this, options);
      _.extend(this, options);
      this.enabled = true;
      this._eventBuffer = new EventBuffer();
      this._constraints = null;
      this.attach();
    }

    LayerDraggable.prototype.attach = function () {
      return this.layer.on(Events.TouchStart, this._touchStart);
    };

    LayerDraggable.prototype.remove = function () {
      return this.layer.off(Events.TouchStart, this._touchStart);
    };

    LayerDraggable.prototype.updatePosition = function (point) {
      return point;
    };

    LayerDraggable.prototype.touchStart = function (event) {
      return this._touchStart(event);
    };

    LayerDraggable.prototype._touchStart = function (event) {
      var touchEvent;
      console.log("Receivint _touchStart event on draggable");
      console.log(event);
      this._isMoving = this.isAnimating;
      this.layer.animateStop();
      this._stopSimulation();
      this._resetdirectionLock();
      event.preventDefault();
      if (!this.propagateEvents) {
        event.stopPropagation();
      }
      touchEvent = Events.touchEvent(event);
      this._eventBuffer.push({
        x: touchEvent.clientX,
        y: touchEvent.clientY,
        t: Date.now()
      });
      this._layerStartPoint = this.layer.point;
      this._correctedLayerStartPoint = this.layer.point;
      if (this.constraints && this.bounce) {
        this._correctedLayerStartPoint = this._constrainPosition(this._correctedLayerStartPoint, this.constraints, 1 / this.overdragScale);
      }
      this._cursorStartPoint = {
        x: touchEvent.clientX,
        y: touchEvent.clientY
      };
      this._layerCursorOffset = {
        x: touchEvent.clientX - this._correctedLayerStartPoint.x,
        y: touchEvent.clientY - this._correctedLayerStartPoint.y
      };
      document.addEventListener(Events.TouchMove, this._touchMove);
      document.addEventListener(Events.TouchEnd, this._touchEnd);
      return this.emit(Events.DragStart, event);
    };

    LayerDraggable.prototype._touchMove = function (event) {
      var offset, point, touchEvent;
      if (!this.enabled) {
        return;
      }
      event.preventDefault();
      if (!this.propagateEvents) {
        event.stopPropagation();
      }
      touchEvent = Events.touchEvent(event);
      this._eventBuffer.push({
        x: touchEvent.clientX,
        y: touchEvent.clientY,
        t: Date.now()
      });
      offset = {
        x: touchEvent.clientX - this._correctedLayerStartPoint.x - this._layerCursorOffset.x,
        y: touchEvent.clientY - this._correctedLayerStartPoint.y - this._layerCursorOffset.y
      };
      offset.x = offset.x * this.speedX * (1 / this.layer.canvasScaleX()) * this.layer.scaleX * this.layer.scale;
      offset.y = offset.y * this.speedY * (1 / this.layer.canvasScaleY()) * this.layer.scaleY * this.layer.scale;
      point = this.layer.point;
      if (this.horizontal) {
        point.x = this._correctedLayerStartPoint.x + offset.x;
      }
      if (this.vertical) {
        point.y = this._correctedLayerStartPoint.y + offset.y;
      }
      if (this._constraints) {
        point = this._constrainPosition(point, this._constraints, this.overdragScale);
      }
      if (this.directionLock) {
        if (!this._directionLockEnabledX && !this._directionLockEnabledY) {
          this._updatedirectionLock(offset);
          return;
        } else {
          if (this._directionLockEnabledX) {
            point.x = this._layerStartPoint.x;
          }
          if (this._directionLockEnabledY) {
            point.y = this._layerStartPoint.y;
          }
        }
      }
      if (this.pixelAlign) {
        point.x = parseInt(point.x);
        point.y = parseInt(point.y);
      }
      if (point.x !== this._layerStartPoint.x || point.y !== this._layerStartPoint.y) {
        this._isDragging = true;
        this._isMoving = true;
      }
      if (this.isDragging) {
        this.emit(Events.DragWillMove, event);
      }
      this.layer.point = this.updatePosition(point);
      if (this.isDragging) {
        this.emit(Events.Move, this.layer.point);
        return this.emit(Events.DragDidMove, event);
      }
    };

    LayerDraggable.prototype._touchEnd = function (event) {
      if (!this.propagateEvents) {
        event.stopPropagation();
      }
      document.removeEventListener(Events.TouchMove, this._touchMove);
      document.removeEventListener(Events.TouchEnd, this._touchEnd);
      this._startSimulation();
      this.emit(Events.DragEnd, event);
      return this._isDragging = false;
    };

    LayerDraggable.define("constraintsOffset", {
      get: function get() {
        var constrainedPoint, maxX, maxY, minX, minY, offset, point, ref;
        if (!this.constraints) {
          return {
            x: 0,
            y: 0
          };
        }
        ref = this._calculateConstraints(this.constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
        point = this.layer.point;
        constrainedPoint = {
          x: Utils.clamp(point.x, minX, maxX),
          y: Utils.clamp(point.y, minY, maxY)
        };
        offset = {
          x: point.x - constrainedPoint.x,
          y: point.y - constrainedPoint.y
        };
        return offset;
      }
    });

    LayerDraggable.define("isBeyondConstraints", {
      get: function get() {
        var constraintsOffset;
        constraintsOffset = this.constraintsOffset;
        if (constraintsOffset.x !== 0) {
          return true;
        }
        if (constraintsOffset.y !== 0) {
          return true;
        }
        return false;
      }
    });

    LayerDraggable.prototype._clampAndScale = function (value, min, max, scale) {
      if (value < min) {
        value = min + (value - min) * scale;
      }
      if (value > max) {
        value = max + (value - max) * scale;
      }
      return value;
    };

    LayerDraggable.prototype._calculateConstraints = function (bounds) {
      var constraints;
      if (!bounds) {
        return constraints = {
          minX: Infinity,
          maxX: Infinity,
          minY: Infinity,
          maxY: Infinity
        };
      }
      constraints = {
        minX: Utils.frameGetMinX(bounds),
        maxX: Utils.frameGetMaxX(bounds),
        minY: Utils.frameGetMinY(bounds),
        maxY: Utils.frameGetMaxY(bounds)
      };
      constraints.maxX -= this.layer.width;
      constraints.maxY -= this.layer.height;
      return constraints;
    };

    LayerDraggable.prototype._constrainPosition = function (proposedPoint, bounds, scale) {
      var maxX, maxY, minX, minY, point, ref;
      ref = this._calculateConstraints(this._constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
      if (this.overdrag) {
        point = {
          x: this._clampAndScale(proposedPoint.x, minX, maxX, scale),
          y: this._clampAndScale(proposedPoint.y, minY, maxY, scale)
        };
      } else {
        point = {
          x: Utils.clamp(proposedPoint.x, minX, maxX),
          y: Utils.clamp(proposedPoint.y, minY, maxY)
        };
      }
      if (this.speedX === 0 || this.horizontal === false) {
        point.x = proposedPoint.x;
      }
      if (this.speedY === 0 || this.vertical === false) {
        point.y = proposedPoint.y;
      }
      return point;
    };

    LayerDraggable.define("velocity", {
      get: function get() {
        if (this.isAnimating) {
          return this._calculateSimulationVelocity();
        }
        return this._eventBuffer.velocity;
        return {
          x: 0,
          y: 0
        };
      }
    });

    LayerDraggable.define("angle", {
      get: function get() {
        return this._eventBuffer.angle;
      }
    });

    LayerDraggable.define("direction", {
      get: function get() {
        var velocity;
        velocity = this.velocity;
        if (Math.abs(velocity.x) > Math.abs(velocity.y)) {
          if (velocity.x > 0) {
            return "right";
          }
          return "left";
        } else {
          if (velocity.y > 0) {
            return "down";
          }
          return "up";
        }
      }
    });

    LayerDraggable.prototype.calculateVelocity = function () {
      return this.velocity;
    };

    LayerDraggable.prototype._calculateSimulationVelocity = function () {
      var velocity, xFinished, yFinished;
      xFinished = this._simulation.x.finished();
      yFinished = this._simulation.y.finished();
      velocity = {
        x: 0,
        y: 0
      };
      if (!xFinished) {
        velocity.x = this._simulation.x.simulator.state.v / this.momentumVelocityMultiplier;
      }
      if (!yFinished) {
        velocity.y = this._simulation.y.simulator.state.v / this.momentumVelocityMultiplier;
      }
      return velocity;
    };

    LayerDraggable.prototype.emit = function (eventName, event) {
      this.layer.emit(eventName, event, this);
      return LayerDraggable.__super__.emit.call(this, eventName, event, this);
    };

    LayerDraggable.prototype._updatedirectionLock = function (correctedDelta) {
      this._directionLockEnabledX = Math.abs(correctedDelta.y) > this.directionLockThreshold.y;
      this._directionLockEnabledY = Math.abs(correctedDelta.x) > this.directionLockThreshold.x;
      if (this._directionLockEnabledX || this._directionLockEnabledY) {
        return this.emit(Events.DirectionLockDidStart, {
          x: this._directionLockEnabledX,
          y: this._directionLockEnabledY
        });
      }
    };

    LayerDraggable.prototype._resetdirectionLock = function () {
      this._directionLockEnabledX = false;
      return this._directionLockEnabledY = false;
    };

    LayerDraggable.prototype._setupSimulation = function () {
      if (this._simulation) {
        return;
      }
      this._simulation = {
        x: this._setupSimulationForAxis("x"),
        y: this._setupSimulationForAxis("y")
      };
      return this._updateSimulationConstraints(this.constraints);
    };

    LayerDraggable.prototype._setupSimulationForAxis = function (axis) {
      var properties, simulation;
      properties = {};
      properties[axis] = true;
      simulation = new Simulation({
        layer: this.layer,
        properties: properties,
        model: "inertial-scroll",
        modelOptions: {
          momentum: this.momentumOptions,
          bounce: this.bounceOptions
        }
      });
      simulation.on(Events.SimulationStep, (function (_this) {
        return function (state) {
          return _this._onSimulationStep(axis, state);
        };
      })(this));
      simulation.on(Events.SimulationStop, (function (_this) {
        return function (state) {
          return _this._onSimulationStop(axis, state);
        };
      })(this));
      return simulation;
    };

    LayerDraggable.prototype._updateSimulationConstraints = function (constraints) {
      var maxX, maxY, minX, minY, ref;
      if (!this._simulation) {
        return;
      }
      if (constraints) {
        ref = this._calculateConstraints(this._constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
        this._simulation.x.simulator.options = {
          min: minX,
          max: maxX
        };
        return this._simulation.y.simulator.options = {
          min: minY,
          max: maxY
        };
      } else {
        this._simulation.x.simulator.options = {
          min: -Infinity,
          max: +Infinity
        };
        return this._simulation.y.simulator.options = {
          min: -Infinity,
          max: +Infinity
        };
      }
    };

    LayerDraggable.prototype._onSimulationStep = function (axis, state) {
      var delta, maxX, maxY, minX, minY, ref, updatePoint;
      if (axis === "x" && this.horizontal === false) {
        return;
      }
      if (axis === "y" && this.vertical === false) {
        return;
      }
      if (this.constraints) {
        if (this.bounce) {
          delta = state.x - this.layer[axis];
        } else {
          ref = this._calculateConstraints(this._constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
          if (axis === "x") {
            delta = Utils.clamp(state.x, minX, maxX) - this.layer[axis];
          }
          if (axis === "y") {
            delta = Utils.clamp(state.x, minY, maxY) - this.layer[axis];
          }
        }
      } else {
        delta = state.x - this.layer[axis];
      }
      updatePoint = this.layer.point;
      if (axis === "x") {
        updatePoint[axis] = updatePoint[axis] + delta * this.speedX;
      }
      if (axis === "y") {
        updatePoint[axis] = updatePoint[axis] + delta * this.speedY;
      }
      this.updatePosition(updatePoint);
      this.layer[axis] = this.updatePosition(updatePoint)[axis];
      return this.emit(Events.Move, this.layer.point);
    };

    LayerDraggable.prototype._onSimulationStop = function (axis, state) {
      if (!this._simulation) {
        return;
      }
      if (this.pixelAlign) {
        this.layer[axis] = parseInt(this.layer[axis]);
      }
      if (this._simulation.x.finished() && this._simulation.y.finished()) {
        return this._stopSimulation();
      }
    };

    LayerDraggable.prototype._startSimulation = function () {
      var maxX, maxY, minX, minY, ref, startSimulationX, startSimulationY, velocity, velocityX, velocityY;
      if (!(this.momentum || this.bounce)) {
        return;
      }
      if (this.isBeyondConstraints === false && this.momentum === false) {
        return;
      }
      if (this.isBeyondConstraints === false && this.isDragging === false) {
        return;
      }
      ref = this._calculateConstraints(this._constraints), minX = ref.minX, maxX = ref.maxX, minY = ref.minY, maxY = ref.maxY;
      startSimulationX = this.overdrag === true || this.layer.x > minX && this.layer.x < maxX;
      startSimulationY = this.overdrag === true || this.layer.y > minY && this.layer.y < maxY;
      if (startSimulationX === startSimulationY && startSimulationY === false) {
        return;
      }
      velocity = this.velocity;
      velocityX = velocity.x * this.momentumVelocityMultiplier * this.speedX * (1 / this.layer.canvasScaleX()) * this.layer.scaleX * this.layer.scale;
      velocityY = velocity.y * this.momentumVelocityMultiplier * this.speedY * (1 / this.layer.canvasScaleY()) * this.layer.scaleY * this.layer.scale;
      this._setupSimulation();
      this._isAnimating = true;
      this._isMoving = true;
      this._simulation.x.simulator.setState({
        x: this.layer.x,
        v: velocityX
      });
      if (startSimulationX) {
        this._simulation.x.start();
      }
      this._simulation.y.simulator.setState({
        x: this.layer.y,
        v: velocityY
      });
      if (startSimulationY) {
        this._simulation.y.start();
      }
      return this.emit(Events.DragAnimationDidStart);
    };

    LayerDraggable.prototype._stopSimulation = function () {
      var ref, ref1;
      this._isAnimating = false;
      if (!this._simulation) {
        return;
      }
      if ((ref = this._simulation) != null) {
        ref.x.stop();
      }
      if ((ref1 = this._simulation) != null) {
        ref1.y.stop();
      }
      this._simulation = null;
      this.emit(Events.Move, this.layer.point);
      return this.emit(Events.DragAnimationDidEnd);
    };

    LayerDraggable.prototype.animateStop = function () {
      return this._stopSimulation();
    };

    return LayerDraggable;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Defaults":138,"./EventBuffer":139,"./Events":142,"./Simulation":157,"./Underscore":162,"./Utils":163}],153:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Defaults,
      Events,
      LayerStatesIgnoredKeys,
      _,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  },
      slice = [].slice;

  _ = require("./Underscore")._;

  Events = require("./Events").Events;

  BaseClass = require("./BaseClass").BaseClass;

  Defaults = require("./Defaults").Defaults;

  LayerStatesIgnoredKeys = ["ignoreEvents"];

  Events.StateWillSwitch = "willSwitch";

  Events.StateDidSwitch = "didSwitch";

  exports.LayerStates = (function (superClass) {
    extend(LayerStates, superClass);

    function LayerStates(layer) {
      this.layer = layer;
      this._states = {};
      this._orderedStates = [];
      this.animationOptions = {};
      this.add("default", this.layer.props);
      this._currentState = "default";
      this._previousStates = [];
      LayerStates.__super__.constructor.apply(this, arguments);
    }

    LayerStates.prototype.add = function (stateName, properties) {
      var error, k, v;
      if (_.isObject(stateName)) {
        for (k in stateName) {
          v = stateName[k];
          this.add(k, v);
        }
        return;
      }
      error = function () {
        throw Error("Usage example: layer.states.add(\"someName\", {x:500})");
      };
      if (!_.isString(stateName)) {
        error();
      }
      if (!_.isObject(properties)) {
        error();
      }
      this._orderedStates.push(stateName);
      return this._states[stateName] = LayerStates.filterStateProperties(properties);
    };

    LayerStates.prototype.remove = function (stateName) {
      if (!this._states.hasOwnProperty(stateName)) {
        return;
      }
      delete this._states[stateName];
      return this._orderedStates = _.without(this._orderedStates, stateName);
    };

    LayerStates.prototype["switch"] = function (stateName, animationOptions, instant) {
      var animatablePropertyKeys, animatingKeys, k, properties, propertyName, ref, ref1, v, value;
      if (instant == null) {
        instant = false;
      }
      if (!this._states.hasOwnProperty(stateName)) {
        throw Error("No such state: '" + stateName + "'");
      }
      this.emit(Events.StateWillSwitch, this._currentState, stateName, this);
      this._previousStates.push(this._currentState);
      this._currentState = stateName;
      properties = {};
      animatingKeys = this.animatingKeys();
      ref = this._states[stateName];
      for (propertyName in ref) {
        value = ref[propertyName];
        if (indexOf.call(LayerStatesIgnoredKeys, propertyName) >= 0) {
          continue;
        }
        if (indexOf.call(animatingKeys, propertyName) < 0) {
          continue;
        }
        if (_.isFunction(value)) {
          value = value.call(this.layer, this.layer, stateName);
        }
        properties[propertyName] = value;
      }
      animatablePropertyKeys = [];
      for (k in properties) {
        v = properties[k];
        if (_.isNumber(v)) {
          animatablePropertyKeys.push(k);
        }
      }
      if (animatablePropertyKeys.length === 0) {
        instant = true;
      }
      if (instant === true) {
        this.layer.props = properties;
        return this.emit(Events.StateDidSwitch, _.last(this._previousStates), stateName, this);
      } else {
        if (animationOptions == null) {
          animationOptions = this.animationOptions;
        }
        animationOptions.properties = properties;
        if ((ref1 = this._animation) != null) {
          ref1.stop();
        }
        this._animation = this.layer.animate(animationOptions);
        return this._animation.on("stop", (function (_this) {
          return function () {
            for (k in properties) {
              v = properties[k];
              if (!_.isNumber(v)) {
                _this.layer[k] = v;
              }
            }
            return _this.emit(Events.StateDidSwitch, _.last(_this._previousStates), stateName, _this);
          };
        })(this));
      }
    };

    LayerStates.prototype.switchInstant = function (stateName) {
      return this["switch"](stateName, null, true);
    };

    LayerStates.define("state", {
      get: function get() {
        return this._currentState;
      }
    });

    LayerStates.define("current", {
      get: function get() {
        return this._currentState;
      }
    });

    LayerStates.prototype.states = function () {
      return _.clone(this._orderedStates);
    };

    LayerStates.prototype.animatingKeys = function () {
      var keys, ref, state, stateName;
      keys = [];
      ref = this._states;
      for (stateName in ref) {
        state = ref[stateName];
        keys = _.union(keys, _.keys(state));
      }
      return keys;
    };

    LayerStates.prototype.previous = function (states, animationOptions) {
      if (states == null) {
        states = this.states();
      }
      return this["switch"](Utils.arrayPrev(states, this._currentState), animationOptions);
    };

    LayerStates.prototype.next = function () {
      var states;
      states = Utils.arrayFromArguments(arguments);
      if (!states.length) {
        states = this.states();
      }
      return this["switch"](Utils.arrayNext(states, this._currentState));
    };

    LayerStates.prototype.last = function (animationOptions) {
      return this["switch"](_.last(this._previousStates), animationOptions);
    };

    LayerStates.prototype.emit = function () {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      LayerStates.__super__.emit.apply(this, arguments);
      return (ref = this.layer).emit.apply(ref, args);
    };

    LayerStates.filterStateProperties = function (properties) {
      var k, stateProperties, v;
      stateProperties = {};
      for (k in properties) {
        v = properties[k];
        if (_.isNumber(v) || _.isFunction(v) || _.isBoolean(v) || _.isString(v)) {
          stateProperties[k] = v;
        }
      }
      return stateProperties;
    };

    return LayerStates;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Defaults":138,"./Events":142,"./Underscore":162}],154:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var _Force2DProperties, _WebkitProperties, filterFormat;

  filterFormat = function (value, unit) {
    return "" + Utils.round(value, 2) + unit;
  };

  _WebkitProperties = [["blur", "blur", 0, "px"], ["brightness", "brightness", 100, "%"], ["saturate", "saturate", 100, "%"], ["hue-rotate", "hueRotate", 0, "deg"], ["contrast", "contrast", 100, "%"], ["invert", "invert", 0, "%"], ["grayscale", "grayscale", 0, "%"], ["sepia", "sepia", 0, "%"]];

  _Force2DProperties = {
    "z": 0,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1,
    "skewX": 0,
    "skewY": 0,
    "rotationX": 0,
    "rotationY": 0
  };

  exports.LayerStyle = {
    width: function width(layer) {
      return layer._properties.width + "px";
    },
    height: function height(layer) {
      return layer._properties.height + "px";
    },
    display: function display(layer) {
      if (layer._properties.visible === true) {
        return "block";
      }
      return "none";
    },
    opacity: function opacity(layer) {
      return layer._properties.opacity;
    },
    overflow: function overflow(layer) {
      if (layer._properties.scrollHorizontal === true || layer._properties.scrollVertical === true) {
        return "auto";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    overflowX: function overflowX(layer) {
      if (layer._properties.scrollHorizontal === true) {
        return "scroll";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    overflowY: function overflowY(layer) {
      if (layer._properties.scrollVertical === true) {
        return "scroll";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    zIndex: function zIndex(layer) {
      return layer._properties.index;
    },
    webkitFilter: function webkitFilter(layer) {
      var css, cssName, fallback, i, layerName, len, ref, unit;
      css = [];
      for (i = 0, len = _WebkitProperties.length; i < len; i++) {
        ref = _WebkitProperties[i], cssName = ref[0], layerName = ref[1], fallback = ref[2], unit = ref[3];
        if (layer._properties.hasOwnProperty(layerName) && layer[layerName] !== fallback) {
          css.push(cssName + "(" + filterFormat(layer[layerName], unit) + ")");
        }
      }
      return css.join(" ");
    },
    webkitTransform: function webkitTransform(layer) {
      if (layer._prefer2d || layer._properties.force2d) {
        return exports.LayerStyle.webkitTransformForce2d(layer);
      }
      return "translate3d(" + layer._properties.x + "px," + layer._properties.y + "px," + layer._properties.z + "px) scale(" + layer._properties.scale + ") scale3d(" + layer._properties.scaleX + "," + layer._properties.scaleY + "," + layer._properties.scaleZ + ") skew(" + layer._properties.skew + "deg," + layer._properties.skew + "deg) skewX(" + layer._properties.skewX + "deg) skewY(" + layer._properties.skewY + "deg) rotateX(" + layer._properties.rotationX + "deg) rotateY(" + layer._properties.rotationY + "deg) rotateZ(" + layer._properties.rotationZ + "deg)";
    },
    webkitTransformForce2d: function webkitTransformForce2d(layer) {
      var css, p, v;
      css = [];
      for (p in _Force2DProperties) {
        v = _Force2DProperties[p];
        if (layer._properties[p] !== v) {
          console.warn("Layer property '" + p + "'' will be ignored with force2d enabled");
        }
      }
      css.push("translate(" + layer._properties.x + "px," + layer._properties.y + "px)");
      css.push("scale(" + layer._properties.scale + ")");
      css.push("skew(" + layer._properties.skew + "deg," + layer._properties.skew + "deg)");
      css.push("rotate(" + layer._properties.rotationZ + "deg)");
      return css.join(" ");
    },
    webkitTransformOrigin: function webkitTransformOrigin(layer) {
      return layer._properties.originX * 100 + "% " + layer._properties.originY * 100 + "%";
    },
    webkitPerspective: function webkitPerspective(layer) {
      return "" + layer._properties.perspective;
    },
    pointerEvents: function pointerEvents(layer) {
      if (layer._properties.ignoreEvents) {
        return "none";
      } else {
        return "auto";
      }
    },
    boxShadow: function boxShadow(layer) {
      if (!layer._properties.shadowColor) {
        return "";
      }
      return layer._properties.shadowX + "px " + layer._properties.shadowY + "px " + layer._properties.shadowBlur + "px " + layer._properties.shadowSpread + "px " + layer._properties.shadowColor;
    },
    backgroundColor: function backgroundColor(layer) {
      return layer._properties.backgroundColor;
    },
    color: function color(layer) {
      return layer._properties.color;
    },
    borderRadius: function borderRadius(layer) {
      if (!_.isNumber(layer._properties.borderRadius)) {
        return layer._properties.borderRadius;
      }
      return layer._properties.borderRadius + "px";
    },
    border: function border(layer) {
      return layer._properties.borderWidth + "px solid " + layer._properties.borderColor;
    }
  };
}).call(undefined);

},{}],155:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Context,
      Utils,
      printContext,
      printLayer,
      slice = [].slice;

  Utils = require("./Utils");

  Context = require("./Context").Context;

  "\nTodo:\n- Better looks\n- Resizable\n- Live in own space on top of all Framer stuff\n";

  printContext = null;

  printLayer = null;

  exports.print = function () {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (!printContext) {
      printContext = new Context({
        name: "Print"
      });
    }
    printContext.run(function () {
      var printNode, printPrefix, update;
      if (!printLayer) {
        printLayer = new Layer();
        printLayer.scrollVertical = true;
        printLayer.ignoreEvents = false;
        printLayer.html = "";
        printLayer.style = {
          "font": "12px/1.35em Menlo",
          "color": "rgba(0,0,0,.7)",
          "padding": "8px",
          "padding-bottom": "30px",
          "border-top": "1px solid #d9d9d9"
        };
        printLayer.opacity = 0.9;
        printLayer.style.zIndex = 999;
        printLayer.visible = true;
        printLayer.backgroundColor = "white";
        update = function () {
          printLayer.width = window.innerWidth;
          printLayer.height = 160;
          return printLayer.maxY = window.innerHeight;
        };
        update();
        printContext.eventManager.wrap(window).addEventListener("resize", update);
      }
      printPrefix = "» ";
      printNode = document.createElement("div");
      printNode.innerHTML = _.escape(printPrefix + args.map(Utils.inspect).join(", ")) + "<br>";
      printNode.style["-webkit-user-select"] = "text";
      printNode.style["cursor"] = "auto";
      return printLayer._element.appendChild(printNode);
    });
    return Utils.delay(0, function () {
      return printLayer._element.scrollTop = printLayer._element.scrollHeight;
    });
  };
}).call(undefined);

},{"./Context":136,"./Utils":163}],156:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      ScreenClass,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  BaseClass = require("./BaseClass").BaseClass;

  ScreenClass = (function (superClass) {
    extend(ScreenClass, superClass);

    function ScreenClass() {
      return ScreenClass.__super__.constructor.apply(this, arguments);
    }

    ScreenClass.define("width", {
      get: function get() {
        return Framer.CurrentContext.width;
      }
    });

    ScreenClass.define("height", {
      get: function get() {
        return Framer.CurrentContext.height;
      }
    });

    ScreenClass.define("size", {
      get: function get() {
        return {
          width: this.width,
          height: this.height
        };
      }
    });

    ScreenClass.define("frame", {
      get: function get() {
        return {
          x: 0,
          y: 0,
          width: this.width,
          height: this.height
        };
      }
    });

    return ScreenClass;
  })(BaseClass);

  exports.Screen = new ScreenClass();
}).call(undefined);

},{"./BaseClass":129}],157:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Config,
      Defaults,
      Events,
      FrictionSimulator,
      MomentumBounceSimulator,
      SimulatorClasses,
      SpringSimulator,
      Utils,
      _,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  };

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  Defaults = require("./Defaults").Defaults;

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  SpringSimulator = require("./Simulators/SpringSimulator").SpringSimulator;

  FrictionSimulator = require("./Simulators/FrictionSimulator").FrictionSimulator;

  MomentumBounceSimulator = require("./Simulators/MomentumBounceSimulator").MomentumBounceSimulator;

  Events.SimulationStart = 'simulationStart';

  Events.SimulationStep = 'simulationStep';

  Events.SimulationStop = 'simulationStop';

  SimulatorClasses = {
    "spring": SpringSimulator,
    "friction": FrictionSimulator,
    "inertial-scroll": MomentumBounceSimulator
  };

  exports.Simulation = (function (superClass) {
    extend(Simulation, superClass);

    function Simulation(options) {
      var SimulatorClass;
      if (options == null) {
        options = {};
      }
      this._update = bind(this._update, this);
      this._start = bind(this._start, this);
      this.start = bind(this.start, this);
      Simulation.__super__.constructor.call(this, options);
      this.options = _.defaults(options, {
        layer: null,
        properties: {},
        model: "spring",
        modelOptions: {},
        delay: 0,
        debug: false
      });
      this._running = false;
      SimulatorClass = SimulatorClasses[this.options.model] || SpringSimulator;
      this._simulator = new SimulatorClass(this.options.modelOptions);
    }

    Simulation.prototype.animatingProperties = function () {
      return _.keys(this.options.properties);
    };

    Simulation.prototype.start = function () {
      var animatingProperties, animation, property, ref;
      if (this.options.layer === null) {
        console.error("Simulation: missing layer");
      }
      if (this.options.debug) {
        console.log("Simulation.start " + this._simulator.constructor.name, this.options.modelOptions);
      }
      animatingProperties = this.animatingProperties();
      ref = this.options.layer.animatingProperties();
      for (property in ref) {
        animation = ref[property];
        if (indexOf.call(animatingProperties, property) >= 0) {
          animation.stop();
        }
      }
      if (this.options.delay) {
        Utils.delay(this.options.delay, this._start);
      } else {
        this._start();
      }
      return true;
    };

    Simulation.prototype.stop = function (emit) {
      if (emit == null) {
        emit = true;
      }
      if (!this._running) {
        return;
      }
      this._running = false;
      this.options.layer._context._animationList = _.without(this.options.layer._context._animationList, this);
      if (emit) {
        this.emit(Events.SimulationStop);
      }
      return Framer.Loop.off("update", this._update);
    };

    Simulation.prototype.emit = function (event) {
      Simulation.__super__.emit.apply(this, arguments);
      return this.options.layer.emit(event, this);
    };

    Simulation.prototype._start = function () {
      if (this._running) {
        return;
      }
      this._running = true;
      this.options.layer._context._animationList.push(this);
      this.emit(Events.SimulationStart);
      return Framer.Loop.on("update", this._update);
    };

    Simulation.prototype._update = function (delta) {
      var emit, result;
      if (this._simulator.finished()) {
        this.stop(emit = false);
        this.emit("end");
        return this.emit(Events.SimulationStop);
      } else {
        result = this._simulator.next(delta);
        return this.emit(Events.SimulationStep, result, delta);
      }
    };

    Simulation.define("simulator", {
      get: function get() {
        return this._simulator;
      }
    });

    Simulation.prototype.finished = function () {
      return this._simulator.finished();
    };

    return Simulation;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Config":135,"./Defaults":138,"./Events":142,"./Simulators/FrictionSimulator":159,"./Simulators/MomentumBounceSimulator":160,"./Simulators/SpringSimulator":161,"./Underscore":162,"./Utils":163}],158:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var BaseClass,
      Config,
      Utils,
      _,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("./Utils");

  _ = require("./Underscore")._;

  Config = require("./Config").Config;

  BaseClass = require("./BaseClass").BaseClass;

  exports.Simulator = (function (superClass) {
    "The simulator class runs a physics simulation based on a set of input values \nat setup({input values}), and emits an output state {x, v}";
    extend(Simulator, superClass);

    Simulator.define("state", {
      get: function get() {
        return _.clone(this._state);
      },
      set: function set(state) {
        return this._state = _.clone(state);
      }
    });

    function Simulator(options) {
      if (options == null) {
        options = {};
      }
      this._state = {
        x: 0,
        v: 0
      };
      this.options = null;
      this.setup(options);
    }

    Simulator.prototype.setup = function (options) {
      throw Error("Not implemented");
    };

    Simulator.prototype.next = function (delta) {
      throw Error("Not implemented");
    };

    Simulator.prototype.finished = function () {
      throw Error("Not implemented");
    };

    return Simulator;
  })(BaseClass);
}).call(undefined);

},{"./BaseClass":129,"./Config":135,"./Underscore":162,"./Utils":163}],159:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Defaults,
      Integrator,
      Simulator,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Defaults = require("../Defaults").Defaults;

  Simulator = require("../Simulator").Simulator;

  Integrator = require("../Integrator").Integrator;

  exports.FrictionSimulator = (function (superClass) {
    extend(FrictionSimulator, superClass);

    function FrictionSimulator() {
      this.finished = bind(this.finished, this);
      return FrictionSimulator.__super__.constructor.apply(this, arguments);
    }

    FrictionSimulator.prototype.setup = function (options) {
      this.options = Defaults.getDefaults("FrictionSimulator", options);
      this.options = _.defaults(options, {
        velocity: 0,
        position: 0
      });
      this._state = {
        x: this.options.position,
        v: this.options.velocity
      };
      return this._integrator = new Integrator((function (_this) {
        return function (state) {
          return -(_this.options.friction * state.v);
        };
      })(this));
    };

    FrictionSimulator.prototype.next = function (delta) {
      this._state = this._integrator.integrateState(this._state, delta);
      return this._state;
    };

    FrictionSimulator.prototype.finished = function () {
      return Math.abs(this._state.v) < this.options.tolerance;
    };

    return FrictionSimulator;
  })(Simulator);
}).call(undefined);

},{"../Defaults":138,"../Integrator":150,"../Simulator":158,"../Utils":163}],160:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Defaults,
      FrictionSimulator,
      Simulator,
      SpringSimulator,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Defaults = require("../Defaults").Defaults;

  Simulator = require("../Simulator").Simulator;

  SpringSimulator = require("./SpringSimulator").SpringSimulator;

  FrictionSimulator = require("./FrictionSimulator").FrictionSimulator;

  exports.MomentumBounceSimulator = (function (superClass) {
    extend(MomentumBounceSimulator, superClass);

    function MomentumBounceSimulator() {
      this.finished = bind(this.finished, this);
      return MomentumBounceSimulator.__super__.constructor.apply(this, arguments);
    }

    MomentumBounceSimulator.prototype.setup = function (options) {
      this.options = Defaults.getDefaults("MomentumBounceSimulator", options);
      this.options = _.defaults(options, {
        velocity: 0,
        position: 0,
        min: 0,
        max: 0
      });
      this._frictionSimulator = new FrictionSimulator({
        friction: this.options.momentum.friction,
        tolerance: this.options.momentum.tolerance,
        velocity: this.options.velocity,
        position: this.options.position
      });
      this._springSimulator = new SpringSimulator({
        tension: this.options.bounce.tension,
        friction: this.options.bounce.friction,
        tolerance: this.options.bounce.tolerance,
        velocity: this.options.velocity,
        position: this.options.position
      });
      this._state = {
        x: this.options.position,
        v: this.options.velocity
      };
      return this._useSpring = false;
    };

    MomentumBounceSimulator.prototype.next = function (delta) {
      if (this._useSpring) {
        this._state = this._springSimulator.next(delta);
      } else {
        this._state = this._frictionSimulator.next(delta);
        this._tryTransitionToSpring(this._state);
      }
      return this._state;
    };

    MomentumBounceSimulator.prototype.finished = function () {
      if (this._useSpring) {
        return this._springSimulator.finished();
      }
      return this._frictionSimulator.finished();
    };

    MomentumBounceSimulator.prototype.setState = function (state) {
      var bound;
      this._state = {
        x: state.x,
        v: state.v
      };
      this._frictionSimulator.setState(this._state);
      if (this._isValidState()) {
        return this._tryTransitionToSpring();
      } else {
        if (this._state.x <= this.options.min) {
          bound = this.options.min;
        }
        if (this._state.x >= this.options.max) {
          bound = this.options.max;
        }
        return this._transitionToSpring(bound);
      }
    };

    MomentumBounceSimulator.prototype._tryTransitionToSpring = function (force) {
      var aboveMaxWithVelocity, belowMinWithVelocity, bound;
      belowMinWithVelocity = this._state.x < this.options.min && this._state.v <= 0;
      aboveMaxWithVelocity = this._state.x > this.options.max && this._state.v >= 0;
      if (belowMinWithVelocity || aboveMaxWithVelocity) {
        if (belowMinWithVelocity) {
          bound = this.options.min;
        }
        if (aboveMaxWithVelocity) {
          bound = this.options.max;
        }
        return this._transitionToSpring(bound);
      } else {
        return this._useSpring = false;
      }
    };

    MomentumBounceSimulator.prototype._transitionToSpring = function (bound) {
      this._useSpring = true;
      this._springSimulator.options.offset = bound;
      return this._springSimulator.setState(this._state);
    };

    MomentumBounceSimulator.prototype._isValidState = function () {
      var aboveMaxTravelingBack, belowMinTravelingBack, bound, check, friction, solution;
      belowMinTravelingBack = this._state.x < this.options.min && this._state.v > 0;
      aboveMaxTravelingBack = this._state.x > this.options.max && this._state.v < 0;
      check = false;
      if (belowMinTravelingBack) {
        bound = this.options.min;
        check = true;
      } else if (aboveMaxTravelingBack) {
        bound = this.options.max;
        check = true;
      }
      if (check) {
        friction = this._frictionSimulator.options.friction;
        solution = 1 - friction * (bound - this._state.x) / this._state.v;
        return solution > 0;
      }
      return true;
    };

    return MomentumBounceSimulator;
  })(Simulator);
}).call(undefined);

},{"../Defaults":138,"../Simulator":158,"../Utils":163,"./FrictionSimulator":159,"./SpringSimulator":161}],161:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Defaults,
      Integrator,
      Simulator,
      Utils,
      bind = function bind(fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Utils = require("../Utils");

  Defaults = require("../Defaults").Defaults;

  Simulator = require("../Simulator").Simulator;

  Integrator = require("../Integrator").Integrator;

  exports.SpringSimulator = (function (superClass) {
    extend(SpringSimulator, superClass);

    function SpringSimulator() {
      this.finished = bind(this.finished, this);
      return SpringSimulator.__super__.constructor.apply(this, arguments);
    }

    SpringSimulator.prototype.setup = function (options) {
      this.options = Defaults.getDefaults("SpringSimulator", options);
      this.options = _.defaults(options, {
        velocity: 0,
        position: 0,
        offset: 0
      });
      this._state = {
        x: this.options.position,
        v: this.options.velocity
      };
      return this._integrator = new Integrator((function (_this) {
        return function (state) {
          return -_this.options.tension * state.x - _this.options.friction * state.v;
        };
      })(this));
    };

    SpringSimulator.prototype.next = function (delta) {
      this._state = this._integrator.integrateState(this._state, delta);
      return this.getState();
    };

    SpringSimulator.prototype.finished = function () {
      var positionNearZero, velocityNearZero;
      positionNearZero = Math.abs(this._state.x) < this.options.tolerance;
      velocityNearZero = Math.abs(this._state.v) < this.options.tolerance;
      return positionNearZero && velocityNearZero;
    };

    SpringSimulator.prototype.setState = function (state) {
      return this._state = {
        x: state.x - this.options.offset,
        v: state.v
      };
    };

    SpringSimulator.prototype.getState = function () {
      var state;
      return state = {
        x: this._state.x + this.options.offset,
        v: this._state.v
      };
    };

    return SpringSimulator;
  })(Simulator);
}).call(undefined);

},{"../Defaults":138,"../Integrator":150,"../Simulator":158,"../Utils":163}],162:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  exports._ = require("lodash");
}).call(undefined);

},{"lodash":119}],163:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Clock,
      Engine,
      Screen,
      Utils,
      _,
      __domComplete,
      __domReady,
      _textSizeNode,
      famous,
      setInterval,
      setTimeout,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }return -1;
  },
      slice = [].slice;

  _ = require("./Underscore")._;

  Screen = require("./Screen").Screen;

  Utils = {};

  famous = require("famous");

  Engine = famous.core.Engine;

  Clock = famous.utilities.Timer;

  setTimeout = function (callback, delay) {
    return Clock.setTimeout(callback, delay);
  };

  setInterval = function (callback, delay) {
    return Clock.setInterval(callback, delay);
  };

  Utils.reset = function () {
    return Framer.CurrentContext.reset();
  };

  Utils.getValue = function (value) {
    if (_.isFunction(value)) {
      return value();
    }
    return value;
  };

  Utils.getValueForKeyPath = function (obj, key) {
    var len, m, ref, ref1, result;
    result = obj;
    if ((ref = !".", indexOf.call(key, ref) >= 0)) {
      return obj[key];
    }
    ref1 = key.split(".");
    for (m = 0, len = ref1.length; m < len; m++) {
      key = ref1[m];
      result = result[key];
    }
    return result;
  };

  Utils.setValueForKeyPath = function (obj, path, val) {
    var field, fields, i, n, result;
    fields = path.split('.');
    result = obj;
    i = 0;
    n = fields.length;
    while (i < n && result !== void 0) {
      field = fields[i];
      if (i === n - 1) {
        result[field] = val;
      } else {
        if (typeof result[field] === 'undefined' || !_.isObject(result[field])) {
          result[field] = {};
        }
        result = result[field];
      }
      i++;
    }
  };

  Utils.valueOrDefault = function (value, defaultValue) {
    if (value === void 0 || value === null) {
      value = defaultValue;
    }
    return value;
  };

  Utils.arrayNext = function (arr, item) {
    return arr[arr.indexOf(item) + 1] || _.first(arr);
  };

  Utils.arrayPrev = function (arr, item) {
    return arr[arr.indexOf(item) - 1] || _.last(arr);
  };

  Utils.sum = function (arr) {
    return _.reduce(arr, function (a, b) {
      return a + b;
    });
  };

  Utils.average = function (arr) {
    return Utils.sum(arr) / arr.length;
  };

  Utils.mean = Utils.average;

  Utils.median = function (x) {
    var sorted;
    if (x.length === 0) {
      return null;
    }
    sorted = x.slice().sort(function (a, b) {
      return a - b;
    });
    if (sorted.length % 2 === 1) {
      return sorted[(sorted.length - 1) / 2];
    } else {
      return (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2;
    }
  };

  if (window.requestAnimationFrame == null) {
    window.requestAnimationFrame = window.webkitRequestAnimationFrame;
  }

  if (window.requestAnimationFrame == null) {
    window.requestAnimationFrame = function (f) {
      return Utils.delay(1 / 60, f);
    };
  }

  if (window.performance) {
    Utils.getTime = function () {
      return window.performance.now() / 1000;
    };
  } else {
    Utils.getTime = function () {
      return Date.now() / 1000;
    };
  }

  Utils.delay = function (time, f) {
    var timer;
    timer = setTimeout(f, time * 1000);
    Framer.CurrentContext._delayTimers.push(timer);
    return timer;
  };

  Utils.interval = function (time, f) {
    var timer;
    timer = setInterval(f, time * 1000);
    Framer.CurrentContext._delayIntervals.push(timer);
    return timer;
  };

  Utils.debounce = function (threshold, fn, immediate) {
    var timeout;
    if (threshold == null) {
      threshold = 0.1;
    }
    timeout = null;
    threshold *= 1000;
    return function () {
      var args, delayed, obj;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      obj = this;
      delayed = function () {
        if (!immediate) {
          fn.apply(obj, args);
        }
        return timeout = null;
      };
      if (timeout) {
        clearTimeout(timeout);
      } else if (immediate) {
        fn.apply(obj, args);
      }
      return timeout = setTimeout(delayed, threshold);
    };
  };

  Utils.throttle = function (delay, fn) {
    var timer;
    if (delay === 0) {
      return fn;
    }
    delay *= 1000;
    timer = false;
    return function () {
      if (timer) {
        return;
      }
      timer = true;
      if (delay !== -1) {
        setTimeout(function () {
          return timer = false;
        }, delay);
      }
      return fn.apply(null, arguments);
    };
  };

  Utils.memoize = function (fn) {
    return function () {
      var args, currentArg, hash, i;
      args = Array.prototype.slice.call(arguments);
      hash = "";
      i = args.length;
      currentArg = null;
      while (i--) {
        currentArg = args[i];
        hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg;
        fn.memoize || (fn.memoize = {});
      }
      if (hash in fn.memoize) {
        return fn.memoize[hash];
      } else {
        return fn.memoize[hash] = fn.apply(this, args);
      }
    };
  };

  Utils.randomColor = function (alpha) {
    var c;
    if (alpha == null) {
      alpha = 1.0;
    }
    c = function () {
      return parseInt(Math.random() * 255);
    };
    return "rgba(" + c() + ", " + c() + ", " + c() + ", " + alpha + ")";
  };

  Utils.randomChoice = function (arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  };

  Utils.randomNumber = function (a, b) {
    if (a == null) {
      a = 0;
    }
    if (b == null) {
      b = 1;
    }
    return Utils.mapRange(Math.random(), 0, 1, a, b);
  };

  Utils.defineEnum = function (names, offset, geometric) {
    var Enum, i, j, len, m, name;
    if (names == null) {
      names = [];
    }
    if (offset == null) {
      offset = 0;
    }
    if (geometric == null) {
      geometric = 0;
    }
    Enum = {};
    for (i = m = 0, len = names.length; m < len; i = ++m) {
      name = names[i];
      j = i;
      j = !offset ? j : j + offset;
      j = !geometric ? j : Math.pow(geometric, j);
      Enum[Enum[name] = j] = name;
    }
    return Enum;
  };

  Utils.labelLayer = function (layer, text, style) {
    if (style == null) {
      style = {};
    }
    style = _.extend({
      font: "10px/1em Menlo",
      lineHeight: layer.height + "px",
      textAlign: "center",
      color: "#fff"
    }, style);
    layer.style = style;
    return layer.html = text;
  };

  Utils.stringify = function (obj) {
    try {
      if (_.isObject(obj)) {
        return JSON.stringify(obj);
      }
    } catch (_error) {
      "";
    }
    if (obj === null) {
      return "null";
    }
    if (obj === void 0) {
      return "undefined";
    }
    if (obj.toString) {
      return obj.toString();
    }
    return obj;
  };

  Utils.inspectObjectType = function (item) {
    var className, extract, ref, ref1, ref2;
    if (((ref = item.constructor) != null ? ref.name : void 0) != null && ((ref1 = item.constructor) != null ? ref1.name : void 0) !== "Object") {
      return item.constructor.name;
    }
    extract = function (str) {
      var match, regex;
      if (!str) {
        return null;
      }
      regex = /\[object (\w+)\]/;
      match = regex.exec(str);
      if (match) {
        return match[1];
      }
      return null;
    };
    className = extract(item.toString());
    if (className) {
      return className;
    }
    className = extract((ref2 = item.constructor) != null ? ref2.toString() : void 0);
    if (className) {
      return className.replace("Constructor", "");
    }
    return item;
  };

  Utils.inspect = function (item, max, l) {
    var code, limit, objectInfo, objectType;
    if (max == null) {
      max = 5;
    }
    if (l == null) {
      l = 0;
    }
    if (item === null) {
      return "null";
    }
    if (item === void 0) {
      return "undefined";
    }
    if (_.isFunction(item.toInspect)) {
      return item.toInspect();
    }
    if (_.isString(item)) {
      return "\"" + item + "\"";
    }
    if (_.isNumber(item)) {
      return "" + item;
    }
    if (_.isFunction(item)) {
      code = item.toString().slice("function ".length).replace(/\n/g, "").replace(/\s+/g, " ");
      limit = 50;
      if (code.length > limit && l > 0) {
        code = _.trimRight(code.slice(0, +limit + 1 || 9e9)) + "… }";
      }
      return "<Function " + code + ">";
    }
    if (_.isArray(item)) {
      if (l > max) {
        return "[...]";
      }
      return "[" + _.map(item, function (i) {
        return Utils.inspect(i, max, l + 1);
      }).join(", ") + "]";
    }
    if (_.isObject(item)) {
      objectType = Utils.inspectObjectType(item);
      if (/HTML\w+?Element/.test(objectType)) {
        return "<" + objectType + ">";
      }
      if (l > max) {
        objectInfo = "{...}";
      } else {
        objectInfo = "{" + _.map(item, function (v, k) {
          return k + ":" + Utils.inspect(v, max, l + 1);
        }).join(", ") + "}";
      }
      if (objectType === "Object") {
        return objectInfo;
      }
      return "<" + objectType + " " + objectInfo + ">";
    }
    return "" + item;
  };

  Utils.uuid = function () {
    var chars, digit, m, output, r, random;
    chars = "0123456789abcdefghijklmnopqrstuvwxyz".split("");
    output = new Array(36);
    random = 0;
    for (digit = m = 1; m <= 32; digit = ++m) {
      if (random <= 0x02) {
        random = 0x2000000 + Math.random() * 0x1000000 | 0;
      }
      r = random & 0xf;
      random = random >> 4;
      output[digit] = chars[digit === 19 ? r & 0x3 | 0x8 : r];
    }
    return output.join("");
  };

  Utils.arrayFromArguments = function (args) {
    if (_.isArray(args[0])) {
      return args[0];
    }
    return Array.prototype.slice.call(args);
  };

  Utils.cycle = function () {
    var args, curr;
    args = Utils.arrayFromArguments(arguments);
    curr = -1;
    return function () {
      curr++;
      if (curr >= args.length) {
        curr = 0;
      }
      return args[curr];
    };
  };

  Utils.toggle = Utils.cycle;

  Utils.isWebKit = function () {
    return window.WebKitCSSMatrix !== void 0;
  };

  Utils.webkitVersion = function () {
    var regexp, result, version;
    version = -1;
    regexp = /AppleWebKit\/([\d.]+)/;
    result = regexp.exec(navigator.userAgent);
    if (result) {
      version = parseFloat(result[1]);
    }
    return version;
  };

  Utils.isChrome = function () {
    return (/chrome/.test(navigator.userAgent.toLowerCase())
    );
  };

  Utils.isSafari = function () {
    return (/safari/.test(navigator.userAgent.toLowerCase())
    );
  };

  Utils.isTouch = function () {
    return window.ontouchstart === null;
  };

  Utils.isDesktop = function () {
    return Utils.deviceType() === "desktop";
  };

  Utils.isPhone = function () {
    return Utils.deviceType() === "phone";
  };

  Utils.isTablet = function () {
    return Utils.deviceType() === "tablet";
  };

  Utils.isMobile = function () {
    return Utils.isPhone() || Utils.isTablet();
  };

  Utils.isFileUrl = function (url) {
    return _.startsWith(url, "file://");
  };

  Utils.isRelativeUrl = function (url) {
    return !/^([a-zA-Z]{1,8}:\/\/).*$/.test(url);
  };

  Utils.isLocalServerUrl = function (url) {
    return url.indexOf("127.0.0.1") !== -1 || url.indexOf("localhost") !== -1;
  };

  Utils.isLocalUrl = function (url) {
    if (Utils.isFileUrl(url)) {
      return true;
    }
    if (Utils.isLocalServerUrl(url)) {
      return true;
    }
    return false;
  };

  Utils.isLocalAssetUrl = function (url, baseUrl) {
    if (baseUrl == null) {
      baseUrl = window.location.href;
    }
    if (Utils.isLocalUrl(url)) {
      return true;
    }
    if (Utils.isRelativeUrl(url) && Utils.isLocalUrl(baseUrl)) {
      return true;
    }
    return false;
  };

  Utils.isFramerStudio = function () {
    return navigator.userAgent.indexOf("FramerStudio") !== -1;
  };

  Utils.devicePixelRatio = function () {
    return window.devicePixelRatio;
  };

  Utils.isJP2Supported = function () {
    return Utils.isWebKit() && !Utils.isChrome();
  };

  Utils.deviceType = function () {
    if (/(tablet)|(iPad)|(Nexus 9)/i.test(navigator.userAgent)) {
      return "tablet";
    }
    if (/(mobi)/i.test(navigator.userAgent)) {
      return "phone";
    }
    return "desktop";
  };

  Utils.pathJoin = function () {
    return Utils.arrayFromArguments(arguments).join("/");
  };

  Utils.round = function (value, decimals) {
    var d;
    if (decimals == null) {
      decimals = 0;
    }
    d = Math.pow(10, decimals);
    return Math.round(value * d) / d;
  };

  Utils.clamp = function (value, a, b) {
    var max, min;
    min = Math.min(a, b);
    max = Math.max(a, b);
    if (value < min) {
      value = min;
    }
    if (value > max) {
      value = max;
    }
    return value;
  };

  Utils.mapRange = function (value, fromLow, fromHigh, toLow, toHigh) {
    return toLow + (value - fromLow) / (fromHigh - fromLow) * (toHigh - toLow);
  };

  Utils.modulate = function (value, rangeA, rangeB, limit) {
    var fromHigh, fromLow, result, toHigh, toLow;
    if (limit == null) {
      limit = false;
    }
    fromLow = rangeA[0], fromHigh = rangeA[1];
    toLow = rangeB[0], toHigh = rangeB[1];
    result = toLow + (value - fromLow) / (fromHigh - fromLow) * (toHigh - toLow);
    if (limit === true) {
      if (toLow < toHigh) {
        if (result < toLow) {
          return toLow;
        }
        if (result > toHigh) {
          return toHigh;
        }
      } else {
        if (result > toLow) {
          return toLow;
        }
        if (result < toHigh) {
          return toHigh;
        }
      }
    }
    return result;
  };

  Utils.parseFunction = function (str) {
    var result;
    result = {
      name: "",
      args: []
    };
    if (_.endsWith(str, ")")) {
      result.name = str.split("(")[0];
      result.args = str.split("(")[1].split(",").map(function (a) {
        return _.trim(_.trimRight(a, ")"));
      });
    } else {
      result.name = str;
    }
    return result;
  };

  __domComplete = [];

  __domReady = false;

  if (typeof document !== "undefined" && document !== null) {
    document.onreadystatechange = (function (_this) {
      return function (event) {
        var f, results;
        if (document.readyState === "complete") {
          __domReady = true;
          results = [];
          while (__domComplete.length) {
            results.push(f = __domComplete.shift()());
          }
          return results;
        }
      };
    })(this);
  }

  Utils.domComplete = function (f) {
    if (document.readyState === "complete") {
      return f();
    } else {
      return __domComplete.push(f);
    }
  };

  Utils.domCompleteCancel = function (f) {
    return __domComplete = _.without(__domComplete, f);
  };

  Utils.domValidEvent = function (element, eventName) {
    if (!eventName) {
      return;
    }
    return typeof element["on" + eventName.toLowerCase()] !== "undefined";
  };

  Utils.domLoadScript = function (url, callback) {
    var head, script;
    script = document.createElement("script");
    script.type = "text/javascript";
    script.src = url;
    script.onload = callback;
    head = document.getElementsByTagName("head")[0];
    head.appendChild(script);
    return script;
  };

  Utils.domLoadData = function (path, callback) {
    var request;
    request = new XMLHttpRequest();
    request.addEventListener("load", function () {
      return callback(null, request.responseText);
    }, false);
    request.addEventListener("error", function () {
      return callback(true, null);
    }, false);
    request.open("GET", path, true);
    return request.send(null);
  };

  Utils.domLoadJSON = function (path, callback) {
    return Utils.domLoadData(path, function (err, data) {
      return callback(err, JSON.parse(data));
    });
  };

  Utils.domLoadDataSync = function (path) {
    var e, handleError, ref, request;
    request = new XMLHttpRequest();
    request.open("GET", path, false);
    try {
      request.send(null);
    } catch (_error) {
      e = _error;
      console.debug("XMLHttpRequest.error", e);
    }
    handleError = function () {
      throw Error("Utils.domLoadDataSync: " + path + " -> [" + request.status + " " + request.statusText + "]");
    };
    request.onerror = handleError;
    if ((ref = request.status) !== 200 && ref !== 0) {
      handleError();
    }
    if (!request.responseText) {
      handleError();
    }
    return request.responseText;
  };

  Utils.domLoadJSONSync = function (path) {
    return JSON.parse(Utils.domLoadDataSync(path));
  };

  Utils.domLoadScriptSync = function (path) {
    var scriptData;
    scriptData = Utils.domLoadDataSync(path);
    eval(scriptData);
    return scriptData;
  };

  Utils.insertCSS = function (css) {
    var styleElement;
    styleElement = document.createElement("style");
    styleElement.type = "text/css";
    styleElement.innerHTML = css;
    return Utils.domComplete(function () {
      return document.body.appendChild(styleElement);
    });
  };

  Utils.loadImage = function (url, callback, context) {
    var element;
    element = new Image();
    if (context == null) {
      context = Framer.CurrentContext;
    }
    context.eventManager.wrap(element).addEventListener("load", function (event) {
      return callback();
    });
    context.eventManager.wrap(element).addEventListener("error", function (event) {
      return callback(true);
    });
    return element.src = url;
  };

  Utils.pointZero = function (args) {
    if (args == null) {
      args = {};
    }
    return _.defaults(args, {
      x: 0,
      y: 0
    });
  };

  Utils.pointMin = function () {
    var point, points;
    points = Utils.arrayFromArguments(arguments);
    return point = {
      x: _.min(points.map(function (size) {
        return size.x;
      })),
      y: _.min(points.map(function (size) {
        return size.y;
      }))
    };
  };

  Utils.pointMax = function () {
    var point, points;
    points = Utils.arrayFromArguments(arguments);
    return point = {
      x: _.max(points.map(function (size) {
        return size.x;
      })),
      y: _.max(points.map(function (size) {
        return size.y;
      }))
    };
  };

  Utils.pointDistance = function (pointA, pointB) {
    var distance;
    return distance = {
      x: Math.abs(pointB.x - pointA.x),
      y: Math.abs(pointB.y - pointA.y)
    };
  };

  Utils.pointInvert = function (point) {
    return point = {
      x: 0 - point.x,
      y: 0 - point.y
    };
  };

  Utils.pointTotal = function (point) {
    return point.x + point.y;
  };

  Utils.pointAbs = function (point) {
    return point = {
      x: Math.abs(point.x),
      y: Math.abs(point.y)
    };
  };

  Utils.pointInFrame = function (point, frame) {
    if (point.x < Utils.frameGetMinX(frame) || point.x > Utils.frameGetMaxX(frame)) {
      return false;
    }
    if (point.y < Utils.frameGetMinY(frame) || point.y > Utils.frameGetMaxY(frame)) {
      return false;
    }
    return true;
  };

  Utils.sizeZero = function (args) {
    if (args == null) {
      args = {};
    }
    return _.defaults(args, {
      width: 0,
      height: 0
    });
  };

  Utils.sizeMin = function () {
    var size, sizes;
    sizes = Utils.arrayFromArguments(arguments);
    return size = {
      width: _.min(sizes.map(function (size) {
        return size.width;
      })),
      height: _.min(sizes.map(function (size) {
        return size.height;
      }))
    };
  };

  Utils.sizeMax = function () {
    var size, sizes;
    sizes = Utils.arrayFromArguments(arguments);
    return size = {
      width: _.max(sizes.map(function (size) {
        return size.width;
      })),
      height: _.max(sizes.map(function (size) {
        return size.height;
      }))
    };
  };

  Utils.rectZero = function (args) {
    if (args == null) {
      args = {};
    }
    return _.defaults(args, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    });
  };

  Utils.parseRect = function (args) {
    if (_.isArray(args) && _.isNumber(args[0])) {
      if (args.length === 1) {
        return Utils.parseRect({
          top: args[0]
        });
      }
      if (args.length === 2) {
        return Utils.parseRect({
          top: args[0],
          right: args[1]
        });
      }
      if (args.length === 3) {
        return Utils.parseRect({
          top: args[0],
          right: args[1],
          bottom: args[2]
        });
      }
      if (args.length === 4) {
        return Utils.parseRect({
          top: args[0],
          right: args[1],
          bottom: args[2],
          left: args[3]
        });
      }
    }
    if (_.isArray(args) && _.isObject(args[0])) {
      return args[0];
    }
    if (_.isObject(args)) {
      return args;
    }
    return {};
  };

  Utils.frameGetMinX = function (frame) {
    return frame.x;
  };

  Utils.frameSetMinX = function (frame, value) {
    return frame.x = value;
  };

  Utils.frameGetMidX = function (frame) {
    if (frame.width === 0) {
      return 0;
    } else {
      return frame.x + frame.width / 2.0;
    }
  };

  Utils.frameSetMidX = function (frame, value) {
    return frame.x = frame.width === 0 ? 0 : value - frame.width / 2.0;
  };

  Utils.frameGetMaxX = function (frame) {
    if (frame.width === 0) {
      return 0;
    } else {
      return frame.x + frame.width;
    }
  };

  Utils.frameSetMaxX = function (frame, value) {
    return frame.x = frame.width === 0 ? 0 : value - frame.width;
  };

  Utils.frameGetMinY = function (frame) {
    return frame.y;
  };

  Utils.frameSetMinY = function (frame, value) {
    return frame.y = value;
  };

  Utils.frameGetMidY = function (frame) {
    if (frame.height === 0) {
      return 0;
    } else {
      return frame.y + frame.height / 2.0;
    }
  };

  Utils.frameSetMidY = function (frame, value) {
    return frame.y = frame.height === 0 ? 0 : value - frame.height / 2.0;
  };

  Utils.frameGetMaxY = function (frame) {
    if (frame.height === 0) {
      return 0;
    } else {
      return frame.y + frame.height;
    }
  };

  Utils.frameSetMaxY = function (frame, value) {
    return frame.y = frame.height === 0 ? 0 : value - frame.height;
  };

  Utils.frameZero = function (args) {
    if (args == null) {
      args = {};
    }
    return _.defaults(args, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    });
  };

  Utils.frameSize = function (frame) {
    var size;
    return size = {
      width: frame.width,
      height: frame.height
    };
  };

  Utils.framePoint = function (frame) {
    var point;
    return point = {
      x: frame.x,
      y: frame.y
    };
  };

  Utils.frameMerge = function () {
    var frame, frames;
    frames = Utils.arrayFromArguments(arguments);
    frame = {
      x: _.min(frames.map(Utils.frameGetMinX)),
      y: _.min(frames.map(Utils.frameGetMinY))
    };
    frame.width = _.max(frames.map(Utils.frameGetMaxX)) - frame.x;
    frame.height = _.max(frames.map(Utils.frameGetMaxY)) - frame.y;
    return frame;
  };

  Utils.framePointForOrigin = function (frame, originX, originY) {
    return frame = {
      x: frame.x + originX * frame.width,
      y: frame.y + originY * frame.height,
      width: frame.width,
      height: frame.height
    };
  };

  Utils.frameInset = function (frame, inset) {
    return frame = {
      x: frame.x + inset.left,
      y: frame.y + inset.top,
      width: frame.width - inset.left - inset.right,
      height: frame.height - inset.top - inset.bottom
    };
  };

  Utils.frameSortByAbsoluteDistance = function (point, frames, originX, originY) {
    var distance;
    if (originX == null) {
      originX = 0;
    }
    if (originY == null) {
      originY = 0;
    }
    distance = function (frame) {
      var result;
      result = Utils.pointDistance(point, Utils.framePointForOrigin(frame, originX, originY));
      result = Utils.pointAbs(result);
      result = Utils.pointTotal(result);
      return result;
    };
    return frames.sort(function (a, b) {
      return distance(a) - distance(b);
    });
  };

  Utils.pointInPolygon = function (point, vs) {
    var i, inside, intersect, j, x, xi, xj, y, yi, yj;
    x = point[0];
    y = point[1];
    inside = false;
    i = 0;
    j = vs.length - 1;
    while (i < vs.length) {
      xi = vs[i][0];
      yi = vs[i][1];
      xj = vs[j][0];
      yj = vs[j][1];
      intersect = yi > y && y !== yj && yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) {
        inside = !inside;
      }
      j = i++;
    }
    return inside;
  };

  Utils.pointAngle = function (p1, p2) {
    return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
  };

  Utils.convertPoint = function (input, layerA, layerB, context) {
    var layer, len, len1, m, o, point, superLayersA, superLayersB;
    if (context == null) {
      context = false;
    }
    point = _.defaults(input, {
      x: 0,
      y: 0
    });
    superLayersA = (layerA != null ? layerA.superLayers(context) : void 0) || [];
    superLayersB = (layerB != null ? layerB.superLayers(context) : void 0) || [];
    if (layerB) {
      superLayersB.push(layerB);
    }
    for (m = 0, len = superLayersA.length; m < len; m++) {
      layer = superLayersA[m];
      point.x += layer.x;
      point.y += layer.y;
    }
    for (o = 0, len1 = superLayersB.length; o < len1; o++) {
      layer = superLayersB[o];
      point.x -= layer.x;
      point.y -= layer.y;
    }
    return point;
  };

  Utils.globalLayers = function (importedLayers) {
    var layer, layerName;
    for (layerName in importedLayers) {
      layer = importedLayers[layerName];
      layerName = layerName.replace(/\s/g, "");
      if (window.hasOwnProperty(layerName) && !window.Framer._globalWarningGiven) {
        print("Warning: Cannot make layer '" + layerName + "' a global, a variable with that name already exists");
      } else {
        window[layerName] = layer;
      }
    }
    return window.Framer._globalWarningGiven = true;
  };

  _textSizeNode = null;

  Utils.textSize = function (text, style, constraints) {
    var frame, rect, shouldCreateNode;
    if (style == null) {
      style = {};
    }
    if (constraints == null) {
      constraints = {};
    }
    shouldCreateNode = !_textSizeNode;
    if (shouldCreateNode) {
      _textSizeNode = document.createElement("div");
      _textSizeNode.id = "_textSizeNode";
    }
    _textSizeNode.removeAttribute("style");
    _textSizeNode.innerHTML = text;
    style = _.extend(_.clone(style), {
      position: "fixed",
      display: "inline",
      visibility: "hidden",
      top: "-10000px",
      left: "-10000px"
    });
    delete style.width;
    delete style.height;
    delete style.bottom;
    delete style.right;
    if (constraints.width) {
      style.width = constraints.width + "px";
    }
    if (constraints.height) {
      style.height = constraints.height + "px";
    }
    _.extend(_textSizeNode.style, style);
    if (shouldCreateNode) {
      if (!window.document.body) {
        document.write(_textSizeNode.outerHTML);
        _textSizeNode = document.getElementById("_textSizeNode");
      } else {
        window.document.body.appendChild(_textSizeNode);
      }
    }
    rect = _textSizeNode.getBoundingClientRect();
    return frame = {
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };
  };

  _.extend(exports, Utils);
}).call(undefined);

},{"./Screen":156,"./Underscore":162,"famous":24}],164:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var Layer,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  },
      hasProp = ({}).hasOwnProperty;

  Layer = require("./Layer").Layer;

  exports.VideoLayer = (function (superClass) {
    extend(VideoLayer, superClass);

    function VideoLayer(options) {
      if (options == null) {
        options = {};
      }
      this.player = document.createElement("video");
      this.player.setAttribute("webkit-playsinline", "true");
      this.player.style.width = "100%";
      this.player.style.height = "100%";
      VideoLayer.__super__.constructor.call(this, options);
      this.player.on = this.player.addEventListener;
      this.player.off = this.player.removeEventListener;
      this.video = options.video;
      this._element.appendChild(this.player);
    }

    VideoLayer.define("video", {
      get: function get() {
        return this.player.src;
      },
      set: function set(video) {
        return this.player.src = video;
      }
    });

    return VideoLayer;
  })(Layer);
}).call(undefined);

},{"./Layer":151}],165:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
"use strict";

(function () {
  var famous, layerA;

  require("./Framer");

  famous = require("famous");

  layerA = new Layer({
    width: 80,
    height: 80,
    backgroundColor: "#7ed6ff",
    borderRadius: "4px"
  });

  layerA.animate({
    properties: {
      y: 300
    }
  });
}).call(undefined);

},{"./Framer":148,"famous":24}]},{},[165])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
