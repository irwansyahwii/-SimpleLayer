// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter, LayerAnchor, calculateFrame,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require("./EventEmitter").EventEmitter;


  /*
  top, right, bottom, left, centerX, centerY, center
   */

  calculateFrame = function(layer, rules) {
    var def, frame, parentSize, val;
    val = (function(_this) {
      return function(rule) {
        var value;
        value = rules[rule];
        if (_.isFunction(value)) {
          value = value();
        }
        return value;
      };
    })(this);
    def = function(rule) {
      return _.isNumber(val(rule));
    };
    if (def("center")) {
      rules["centerX"] = val("center");
      rules["centerY"] = val("center");
    }
    parentSize = layer.superLayer;
    if (parentSize == null) {
      parentSize = Screen;
    }
    frame = layer.frame;
    if (def("left") && def("right")) {
      frame.x = val("left");
      frame.width = parentSize.width - val("left") - val("right");
    } else if (def("left")) {
      frame.x = val("left");
    } else if (def("right")) {
      frame.x = parentSize.width - frame.width - val("right");
    } else if (def("centerX")) {
      frame.x = (parentSize.width / 2) - (frame.width / 2) + val("centerX");
    }
    if (def("top") && def("bottom")) {
      frame.y = val("top");
      frame.height = parentSize.height - val("top") - val("bottom");
    } else if (def("top")) {
      frame.y = val("top");
    } else if (def("bottom")) {
      frame.y = parentSize.height - frame.height - val("bottom");
    } else if (def("centerY")) {
      frame.y = (parentSize.height / 2) - (frame.height / 2) + val("centerY");
    }
    return frame;
  };

  LayerAnchor = (function(superClass) {
    extend(LayerAnchor, superClass);

    function LayerAnchor(layer1, rules) {
      this.layer = layer1;
      this._parseRules = bind(this._parseRules, this);
      this._setNeedsUpdate = bind(this._setNeedsUpdate, this);
      this._addListener = bind(this._addListener, this);
      this._setupListener = bind(this._setupListener, this);
      this.updateRules(rules);
    }

    LayerAnchor.prototype.updateRules = function(rules) {
      this.rules = this._parseRules(rules);
      this.layer.on("change:superLayer", this._setupListener);
      this._setNeedsUpdate();
      this._removeListeners();
      return this._setupListener();
    };

    LayerAnchor.prototype._setupListener = function() {
      this._removeListeners();
      if (this.layer.superLayer) {
        return this._addListener(this.layer.superLayer, "change:frame", this._setNeedsUpdate);
      } else {
        return this._addListener(Canvas, "resize", this._setNeedsUpdate);
      }
    };

    LayerAnchor.prototype._addListener = function(obj, eventName, listener) {
      var base;
      obj.on(eventName, listener);
      if ((base = this._currentListeners)[obj] == null) {
        base[obj] = [];
      }
      return this._currentListeners[obj].push(eventName);
    };

    LayerAnchor.prototype._removeListeners = function() {
      var eventName, obj, ref;
      ref = this._currentListeners;
      for (obj in ref) {
        eventName = ref[obj];
        obj.off(eventName, this._setNeedsUpdate);
      }
      return this._currentListeners = {};
    };

    LayerAnchor.prototype._setNeedsUpdate = function() {
      return this.layer.frame = calculateFrame(this.layer, this.rules);
    };

    LayerAnchor.prototype._parseRules = function() {
      return Utils.parseRect(Utils.arrayFromArguments(arguments));
    };

    return LayerAnchor;

  })(EventEmitter);

  exports.LayerAnchor = LayerAnchor;

}).call(this);
