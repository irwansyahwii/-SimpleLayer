// Generated by CoffeeScript 1.9.2
(function() {
  var Application, DOMElement, FamousWindow, Layer, LayerId, Logger, famous,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  famous = require("famous");

  FamousWindow = require("./FamousWindow");

  Application = require("./Application");

  LayerId = require("./LayerId");

  Logger = require('./Logger');

  DOMElement = famous.domRenderables.DOMElement;

  Layer = (function() {
    function Layer(options) {
      this.applySuperlayer = bind(this.applySuperlayer, this);
      this.getSize = bind(this.getSize, this);
      this.center = bind(this.center, this);
      this.centerY = bind(this.centerY, this);
      this.centerX = bind(this.centerX, this);
      this.centerAxis = bind(this.centerAxis, this);
      this.applyRotation = bind(this.applyRotation, this);
      this.applyOpacity = bind(this.applyOpacity, this);
      this.applyScale = bind(this.applyScale, this);
      this.applyPosition = bind(this.applyPosition, this);
      this.applyBorderRadius = bind(this.applyBorderRadius, this);
      this._id = LayerId.generateNewId();
      this._name = "";
      this._x = options.x || 0;
      this._y = options.y || 0;
      this._width = options.width || 0;
      this._height = options.height || 0;
      this._window = options.window;
      if (this._window == null) {
        this._window = Application.getRootWindow();
      }
      this._tagName = "div";
      this._xAxisSizeMode = "absolute";
      this._yAxisSizeMode = "absolute";
      this._zAxisSizeMode = "absolute";
      this._scale = options.scale || 1;
      this._backgroundColor = options.backgroundColor || '#FFFFFF';
      this._layerNode = this._window.createNode();
      this._layerElement = new DOMElement(this._layerNode, {
        tagName: this._tagName,
        properties: {
          backgroundColor: this._backgroundColor
        }
      });
      this._borderRadius = options.borderRadius || 0;
      if (this._borderRadius > 0) {
        this.applyBorderRadius();
      }
      this._scale = options.scale || 1;
      this._opacity = options.opacity || 1.0;
      this._rotation = options.rotation || 0;
      this._superlayer = options.superlayer || null;
      this._layerNode.setScale(this._scale, this._scale);
      if (this._x !== 0 || this._y !== 0) {
        this.applyPosition();
      }
      if (this._scale !== 1) {
        this.applyScale();
      }
      if (this._opacity !== 1.0) {
        this.applyOpacity();
      }
      if (this._rotation !== 0) {
        this.applyRotation();
      }
      this._layerNode.setSizeMode(this._xAxisSizeMode, this._yAxisSizeMode, this._zAxisSizeMode);
      this._layerNode.setAbsoluteSize(this._width, this._height);
      this._layerNode.setOrigin(0.5, 0.5);
    }

    Layer.prototype.applyBorderRadius = function() {
      this._layerElement.setProperty('border-radius', this._borderRadius + "px");
      return this._layerElement.setProperty('border', this._borderRadius + "px solid " + this._backgroundColor);
    };

    Layer.property('borderRadius', {
      get: function() {
        return this._borderRadius;
      },
      set: function(newVal) {
        if (this._borderRadius !== newVal) {
          this._borderRadius = newVal;
          return this.applyBorderRadius();
        }
      }
    });

    Layer.property('id', {
      get: function() {
        return this._id;
      }
    });

    Layer.property('name', {
      get: function() {
        return this._name;
      },
      set: function(newVal) {
        return this._name = newVal;
      }
    });

    Layer.prototype.applyPosition = function() {
      return this._layerNode.setPosition(this._x, this._y);
    };

    Layer.property('x', {
      get: function() {
        return this._x;
      },
      set: function(newVal) {
        if (this._x !== newVal) {
          this._x = newVal;
          return this.applyPosition();
        }
      }
    });

    Layer.property('y', {
      get: function() {
        return this._y;
      },
      set: function(newVal) {
        if (this._y !== newVal) {
          this._y = newVal;
          return this.applyPosition();
        }
      }
    });

    Layer.prototype.applyScale = function() {
      return this._layerNode.setScale(this._scale, this._scale, this._scale);
    };

    Layer.property('scale', {
      get: function() {
        return this._scale;
      },
      set: function(newVal) {
        if (this._scale !== newVal) {
          this._scale = newVal;
          return this.applyScale();
        }
      }
    });

    Layer.prototype.applyOpacity = function() {
      return this._layerNode.setOpacity(this._opacity);
    };

    Layer.property('opacity', {
      get: function() {
        return this._opacity;
      },
      set: function(newVal) {
        if (this._opacity !== newVal) {
          this._opacity = newVal;
          return this.applyOpacity();
        }
      }
    });

    Layer.prototype.applyRotation = function() {
      var thetaRadian;
      thetaRadian = 2 * Math.PI / 360.;
      return this._layerNode.setRotation(0, 0, this._rotation * thetaRadian);
    };

    Layer.property('rotation', {
      get: function() {
        return this._rotation;
      },
      set: function(newVal) {
        if (this._rotation !== newVal) {
          this._rotation = newVal;
          return this.applyRotation();
        }
      }
    });

    Layer.prototype.centerAxis = function(isX, isY) {
      var contextSize, parentSize;
      if (this._superlayer !== null) {
        parentSize = this._superlayer.getSize();
        if (isX) {
          this.x = (parentSize[0] / 2) - (this._layerNode.getAbsoluteSize()[0] / 2);
        }
        if (isY) {
          return this.y = (parentSize[1] / 2) - (this._layerNode.getAbsoluteSize()[1] / 2);
        }
      } else {
        contextSize = context._size;
        if (isX) {
          this.x = (contextSize[0] / 2) - (this._layerNode.getAbsoluteSize()[0] / 2);
        }
        if (isY) {
          return this.y = (contextSize[1] / 2) - (this._layerNode.getAbsoluteSize()[1] / 2);
        }
      }
    };

    Layer.prototype.centerX = function() {
      return this.centerAxis(true, false);
    };

    Layer.prototype.centerY = function() {
      return this.centerAxis(false, true);
    };

    Layer.prototype.center = function() {
      return this.centerAxis(true, true);
    };

    Layer.prototype.getSize = function() {
      return this._layerNode.getAbsoluteSize();
    };

    Layer.prototype.applySuperlayer = function() {};

    Layer.property('superlayer', {
      get: function() {
        return this._superlayer;
      },
      set: function(newVal) {
        if (this._superlayer !== newVal) {
          this._superlayer = newVal;
          return this.applySuperlayer();
        }
      }
    });

    return Layer;

  })();

  module.exports = Layer;

}).call(this);
