// Generated by CoffeeScript 1.9.2
(function() {
  var Animation, BaseClass, Config, DOMElement, Defaults, Engine, EventEmitter, Events, FamousPropertySetter, LayerDraggable, LayerStates, LayerStyle, NoCacheDateKey, Node, Utils, _, famous, layerProperty, layerValueTypeError,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  Defaults = require("./Defaults").Defaults;

  BaseClass = require("./BaseClass").BaseClass;

  EventEmitter = require("./EventEmitter").EventEmitter;

  Animation = require("./Animation").Animation;

  LayerStyle = require("./LayerStyle").LayerStyle;

  LayerStates = require("./LayerStates").LayerStates;

  LayerDraggable = require("./LayerDraggable").LayerDraggable;

  Events = require("./Events").Events;

  NoCacheDateKey = Date.now();

  famous = require("famous");

  Engine = famous.core.FamousEngine;

  Node = famous.core.Node;

  DOMElement = famous.domRenderables.DOMElement;

  FamousPropertySetter = require("./FamousPropertySetter");

  layerValueTypeError = function(name, value) {
    throw new Error("Layer." + name + ": value '" + value + "' of type '" + (typeof value) + "'' is not valid");
  };

  layerProperty = function(obj, name, cssProperty, fallback, validator, options, set) {
    var result;
    if (options == null) {
      options = {};
    }
    result = {
      "default": fallback,
      get: function() {
        result = null;
        if (this._properties.hasOwnProperty(name)) {
          result = this._properties[name];
        }
        if (result === null) {
          result = fallback;
        }
        return result;
      },
      set: function(value) {
        if (value && validator && !validator(value)) {
          layerValueTypeError(name, value);
        }
        this._properties[name] = value;
        if (typeof FamousPropertySetter[name] === "function") {
          FamousPropertySetter[name](this);
        }
        if (typeof set === "function") {
          set(this, value);
        }
        this.emit("change:" + name, value);
        if (name === "x" || name === "y") {
          this.emit("change:point", value);
        }
        if (name === "width" || name === "height") {
          this.emit("change:size", value);
        }
        if (name === "x" || name === "y" || name === "width" || name === "height") {
          this.emit("change:frame", value);
        }
        if (name === "rotationZ") {
          return this.emit("change:rotation", value);
        }
      }
    };
    return result = _.extend(result, options);
  };

  exports.Layer = (function(superClass) {
    extend(Layer, superClass);

    function Layer(options) {
      if (options == null) {
        options = {};
      }
      this.addListener = bind(this.addListener, this);
      this._properties = {};
      this._style = {};
      this._prefer2d = false;
      this._alwaysUseImageCache = false;
      this._createElement();
      if (options.hasOwnProperty("frame")) {
        options = _.extend(options, options.frame);
      }
      options = Defaults.getDefaults("Layer", options);
      Layer.__super__.constructor.call(this, options);
      this._context.addLayer(this);
      this._id = this._context.nextLayerId();
      this._element.setId(this._id);
      if (!options.superLayer) {
        if (!options.shadow) {
          this._insertElement();
        }
      } else {
        this.superLayer = options.superLayer;
      }
      if (options.hasOwnProperty("index")) {
        this.index = options.index;
      }
      this._subLayers = [];
      this._context.emit("layer:create", this);
    }

    Layer.define("custom", Layer.simpleProperty("custom", void 0));

    Layer.define("width", layerProperty(Layer, "width", "width", 100, _.isNumber));

    Layer.define("height", layerProperty(Layer, "height", "height", 100, _.isNumber));

    Layer.define("visible", layerProperty(Layer, "visible", "display", true, _.isBoolean));

    Layer.define("opacity", layerProperty(Layer, "opacity", "opacity", 1, _.isNumber));

    Layer.define("index", layerProperty(Layer, "index", "zIndex", 0, _.isNumber, {
      importable: false,
      exportable: false
    }));

    Layer.define("clip", layerProperty(Layer, "clip", "overflow", true, _.isBoolean));

    Layer.define("scrollHorizontal", layerProperty(Layer, "scrollHorizontal", "overflowX", false, _.isBoolean, {}, function(layer, value) {
      if (value === true) {
        return layer.ignoreEvents = false;
      }
    }));

    Layer.define("scrollVertical", layerProperty(Layer, "scrollVertical", "overflowY", false, _.isBoolean, {}, function(layer, value) {
      if (value === true) {
        return layer.ignoreEvents = false;
      }
    }));

    Layer.define("scroll", {
      get: function() {
        return this.scrollHorizontal === true || this.scrollVertical === true;
      },
      set: function(value) {
        return this.scrollHorizontal = this.scrollVertical = value;
      }
    });

    Layer.define("ignoreEvents", layerProperty(Layer, "ignoreEvents", "pointerEvents", true, _.isBoolean));

    Layer.define("x", layerProperty(Layer, "x", "webkitTransform", 0, _.isNumber));

    Layer.define("y", layerProperty(Layer, "y", "webkitTransform", 0, _.isNumber));

    Layer.define("z", layerProperty(Layer, "z", "webkitTransform", 0, _.isNumber));

    Layer.define("scaleX", layerProperty(Layer, "scaleX", "webkitTransform", 1, _.isNumber));

    Layer.define("scaleY", layerProperty(Layer, "scaleY", "webkitTransform", 1, _.isNumber));

    Layer.define("scaleZ", layerProperty(Layer, "scaleZ", "webkitTransform", 1, _.isNumber));

    Layer.define("scale", layerProperty(Layer, "scale", "webkitTransform", 1, _.isNumber));

    Layer.define("skewX", layerProperty(Layer, "skewX", "webkitTransform", 0, _.isNumber));

    Layer.define("skewY", layerProperty(Layer, "skewY", "webkitTransform", 0, _.isNumber));

    Layer.define("skew", layerProperty(Layer, "skew", "webkitTransform", 0, _.isNumber));

    Layer.define("originX", layerProperty(Layer, "originX", "webkitTransformOrigin", 0.5, _.isNumber));

    Layer.define("originY", layerProperty(Layer, "originY", "webkitTransformOrigin", 0.5, _.isNumber));

    Layer.define("perspective", layerProperty(Layer, "perspective", "webkitPerspective", 0, _.isNumber));

    Layer.define("rotationX", layerProperty(Layer, "rotationX", "webkitTransform", 0, _.isNumber));

    Layer.define("rotationY", layerProperty(Layer, "rotationY", "webkitTransform", 0, _.isNumber));

    Layer.define("rotationZ", layerProperty(Layer, "rotationZ", "webkitTransform", 0, _.isNumber));

    Layer.define("rotation", {
      get: function() {
        return this.rotationZ;
      },
      set: function(value) {
        return this.rotationZ = value;
      }
    });

    Layer.define("blur", layerProperty(Layer, "blur", "webkitFilter", 0, _.isNumber));

    Layer.define("brightness", layerProperty(Layer, "brightness", "webkitFilter", 100, _.isNumber));

    Layer.define("saturate", layerProperty(Layer, "saturate", "webkitFilter", 100, _.isNumber));

    Layer.define("hueRotate", layerProperty(Layer, "hueRotate", "webkitFilter", 0, _.isNumber));

    Layer.define("contrast", layerProperty(Layer, "contrast", "webkitFilter", 100, _.isNumber));

    Layer.define("invert", layerProperty(Layer, "invert", "webkitFilter", 0, _.isNumber));

    Layer.define("grayscale", layerProperty(Layer, "grayscale", "webkitFilter", 0, _.isNumber));

    Layer.define("sepia", layerProperty(Layer, "sepia", "webkitFilter", 0, _.isNumber));

    Layer.define("shadowX", layerProperty(Layer, "shadowX", "boxShadow", 0, _.isNumber));

    Layer.define("shadowY", layerProperty(Layer, "shadowY", "boxShadow", 0, _.isNumber));

    Layer.define("shadowBlur", layerProperty(Layer, "shadowBlur", "boxShadow", 0, _.isNumber));

    Layer.define("shadowSpread", layerProperty(Layer, "shadowSpread", "boxShadow", 0, _.isNumber));

    Layer.define("shadowColor", layerProperty(Layer, "shadowColor", "boxShadow", ""));

    Layer.define("backgroundColor", layerProperty(Layer, "backgroundColor", "backgroundColor", null, _.isString));

    Layer.define("color", layerProperty(Layer, "color", "color", null, _.isString));

    Layer.define("borderColor", layerProperty(Layer, "borderColor", "border", null, _.isString));

    Layer.define("borderWidth", layerProperty(Layer, "borderWidth", "border", 0, _.isNumber));

    Layer.define("force2d", layerProperty(Layer, "force2d", "webkitTransform", false, _.isBoolean));

    Layer.define("name", {
      "default": "",
      get: function() {
        return this._element._attributes["name"];
      },
      set: function(value) {
        this._setPropertyValue("name", value);
        return this._element.setAttribute("name", value);
      }
    });

    Layer.define("borderRadius", {
      "default": 0,
      get: function() {
        return this._properties["borderRadius"];
      },
      set: function(value) {
        this._properties["borderRadius"] = value;
        this._element.setProperty("borderRadius", LayerStyle["borderRadius"](this));
        return this.emit("change:borderRadius", value);
      }
    });

    Layer.define("cornerRadius", {
      importable: true,
      get: function() {
        return this.borderRadius;
      },
      set: function(value) {
        return this.borderRadius = value;
      }
    });

    Layer.define("point", {
      get: function() {
        return _.pick(this, ["x", "y"]);
      },
      set: function(point) {
        var i, k, len, ref, results;
        if (!point) {
          return;
        }
        ref = ["x", "y"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (point.hasOwnProperty(k)) {
            results.push(this[k] = point[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("size", {
      get: function() {
        return _.pick(this, ["width", "height"]);
      },
      set: function(size) {
        var i, k, len, ref, results;
        if (!size) {
          return;
        }
        ref = ["width", "height"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (size.hasOwnProperty(k)) {
            results.push(this[k] = size[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("frame", {
      get: function() {
        return _.pick(this, ["x", "y", "width", "height"]);
      },
      set: function(frame) {
        var i, k, len, ref, results;
        if (!frame) {
          return;
        }
        ref = ["x", "y", "width", "height"];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          k = ref[i];
          if (frame.hasOwnProperty(k)) {
            results.push(this[k] = frame[k]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    Layer.define("minX", {
      importable: true,
      exportable: false,
      get: function() {
        return this.x;
      },
      set: function(value) {
        return this.x = value;
      }
    });

    Layer.define("midX", {
      importable: true,
      exportable: false,
      get: function() {
        return Utils.frameGetMidX(this);
      },
      set: function(value) {
        return Utils.frameSetMidX(this, value);
      }
    });

    Layer.define("maxX", {
      importable: true,
      exportable: false,
      get: function() {
        return Utils.frameGetMaxX(this);
      },
      set: function(value) {
        return Utils.frameSetMaxX(this, value);
      }
    });

    Layer.define("minY", {
      importable: true,
      exportable: false,
      get: function() {
        return this.y;
      },
      set: function(value) {
        return this.y = value;
      }
    });

    Layer.define("midY", {
      importable: true,
      exportable: false,
      get: function() {
        return Utils.frameGetMidY(this);
      },
      set: function(value) {
        return Utils.frameSetMidY(this, value);
      }
    });

    Layer.define("maxY", {
      importable: true,
      exportable: false,
      get: function() {
        return Utils.frameGetMaxY(this);
      },
      set: function(value) {
        return Utils.frameSetMaxY(this, value);
      }
    });

    Layer.prototype.convertPoint = function(point) {
      return Utils.convertPoint(point, null, this);
    };

    Layer.define("canvasFrame", {
      importable: true,
      exportable: false,
      get: function() {
        var context;
        return Utils.convertPoint(this.frame, this, null, context = true);
      },
      set: function(frame) {
        var context;
        if (!this.superLayer) {
          return this.frame = frame;
        } else {
          return this.frame = Utils.convertPoint(frame, null, this.superLayer, context = true);
        }
      }
    });

    Layer.define("screenFrame", {
      importable: true,
      exportable: false,
      get: function() {
        var context;
        return Utils.convertPoint(this.frame, this, null, context = false);
      },
      set: function(frame) {
        var context;
        if (!this.superLayer) {
          return this.frame = frame;
        } else {
          return this.frame = Utils.convertPoint(frame, null, this.superLayer, context = false);
        }
      }
    });

    Layer.prototype.contentFrame = function() {
      if (!this.subLayers.length) {
        return {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      return Utils.frameMerge(_.pluck(this.subLayers, "frame"));
    };

    Layer.prototype.centerFrame = function() {
      var frame;
      if (this.superLayer) {
        frame = this.frame;
        Utils.frameSetMidX(frame, parseInt(this.superLayer.width / 2.0));
        Utils.frameSetMidY(frame, parseInt(this.superLayer.height / 2.0));
        return frame;
      } else {
        frame = this.frame;
        Utils.frameSetMidX(frame, parseInt(this._context.width / 2.0));
        Utils.frameSetMidY(frame, parseInt(this._context.height / 2.0));
        return frame;
      }
    };

    Layer.prototype.center = function() {
      this.frame = this.centerFrame();
      return this;
    };

    Layer.prototype.centerX = function(offset) {
      if (offset == null) {
        offset = 0;
      }
      this.x = this.centerFrame().x + offset;
      return this;
    };

    Layer.prototype.centerY = function(offset) {
      if (offset == null) {
        offset = 0;
      }
      this.y = this.centerFrame().y + offset;
      return this;
    };

    Layer.prototype.pixelAlign = function() {
      this.x = parseInt(this.x);
      return this.y = parseInt(this.y);
    };

    Layer.prototype.canvasScaleX = function() {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleX;
      ref = this.superLayers(context = true);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleX;
      }
      return scale;
    };

    Layer.prototype.canvasScaleY = function() {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleY;
      ref = this.superLayers(context = true);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleY;
      }
      return scale;
    };

    Layer.prototype.screenScaleX = function() {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleX;
      ref = this.superLayers(context = false);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleX;
      }
      return scale;
    };

    Layer.prototype.screenScaleY = function() {
      var context, i, len, ref, scale, superLayer;
      scale = this.scale * this.scaleY;
      ref = this.superLayers(context = false);
      for (i = 0, len = ref.length; i < len; i++) {
        superLayer = ref[i];
        scale = scale * superLayer.scale * superLayer.scaleY;
      }
      return scale;
    };

    Layer.prototype.screenScaledFrame = function() {
      var context, factorX, factorY, frame, i, layerScaledFrame, layers, len, superLayer;
      frame = {
        x: 0,
        y: 0,
        width: this.width * this.screenScaleX(),
        height: this.height * this.screenScaleY()
      };
      layers = this.superLayers(context = true);
      layers.push(this);
      layers.reverse();
      for (i = 0, len = layers.length; i < len; i++) {
        superLayer = layers[i];
        factorX = superLayer._superOrParentLayer() ? superLayer._superOrParentLayer().screenScaleX() : 1;
        factorY = superLayer._superOrParentLayer() ? superLayer._superOrParentLayer().screenScaleY() : 1;
        layerScaledFrame = superLayer.scaledFrame();
        frame.x += layerScaledFrame.x * factorX;
        frame.y += layerScaledFrame.y * factorY;
      }
      return frame;
    };

    Layer.prototype.scaledFrame = function() {
      var frame, scaleX, scaleY;
      frame = this.frame;
      scaleX = this.scale * this.scaleX;
      scaleY = this.scale * this.scaleY;
      frame.width *= scaleX;
      frame.height *= scaleY;
      frame.x += (1 - scaleX) * this.originX * this.width;
      frame.y += (1 - scaleY) * this.originY * this.height;
      return frame;
    };

    Layer.define("style", {
      importable: true,
      exportable: false,
      get: function() {
        return this._element._styles;
      },
      set: function(value) {
        var key, val;
        _.extend(this._element.style, value);
        for (key in value) {
          val = value[key];
          this._properties[key] = val;
          this._element.setProperty(key, val);
        }
        return this.emit("change:style");
      }
    });

    Layer.prototype.computedStyle = function() {
      var getComputedStyle;
      getComputedStyle = document.defaultView.getComputedStyle;
      if (getComputedStyle == null) {
        getComputedStyle = window.getComputedStyle;
      }
      return getComputedStyle(this._element);
    };

    Layer.define("classList", {
      importable: true,
      exportable: false,
      get: function() {
        return this._element.classList;
      }
    });

    Layer.prototype._framerOriginal__createElement = function() {
      if (this._element != null) {
        return;
      }
      this._element = document.createElement("div");
      return this._element.classList.add("framerLayer");
    };

    Layer.prototype._createElement = function() {
      if (this._element != null) {
        return;
      }
      this._node = new Node();
      this._node.setSizeMode("absolute", "absolute", "absolute");
      this._node.setAbsoluteSize(250, 250);
      this._node.setOrigin(0.5, 0.5);
      this._element = new DOMElement(this._node, {
        tagName: "div"
      });
      this._element._layer = this;
      return this._element;
    };

    Layer.prototype._insertElement = function() {
      this.bringToFront();
      console.log("Add layer's " + this.name + " node to context rootElement");
      return this._context.getRootElement()._node.addChild(this._element._node);
    };

    Layer.define("html", {
      get: function() {
        var ref;
        return ((ref = this._element) != null ? ref._content : void 0) || "";
      },
      set: function(value) {
        this._element.setContent(value);
        return this.emit("change:html");
      }
    });

    Layer.prototype.querySelector = function(query) {
      return this._element.querySelector(query);
    };

    Layer.prototype.querySelectorAll = function(query) {
      return this._element.querySelectorAll(query);
    };

    Layer.prototype.destroy = function() {
      var ref;
      if (this.superLayer) {
        this.superLayer._subLayers = _.without(this.superLayer._subLayers, this);
      }
      if ((ref = this._element.parentNode) != null) {
        ref.removeChild(this._element);
      }
      this.removeAllListeners();
      this._context.removeLayer(this);
      return this._context.emit("layer:destroy", this);
    };

    Layer.prototype.copy = function() {
      var copiedSublayer, i, layer, len, ref, subLayer;
      layer = this.copySingle();
      ref = this.subLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        subLayer = ref[i];
        copiedSublayer = subLayer.copy();
        copiedSublayer.superLayer = layer;
      }
      return layer;
    };

    Layer.prototype.copySingle = function() {
      return new this.constructor(this.props);
    };

    Layer.define("image", {
      "default": "",
      get: function() {
        return this._getPropertyValue("image");
      },
      set: function(value) {
        var currentValue, imageUrl, loader, ref, ref1;
        if (!(_.isString(value) || value === null)) {
          layerValueTypeError("image", value);
        }
        currentValue = this._getPropertyValue("image");
        if (currentValue === value) {
          return this.emit("load");
        }
        this.backgroundColor = null;
        this._setPropertyValue("image", value);
        if (value === null || value === "") {
          this._element.setProperty("background-image", null);
          return;
        }
        imageUrl = value;
        if (this._alwaysUseImageCache === false && Utils.isLocalAssetUrl(imageUrl)) {
          imageUrl += "?nocache=" + NoCacheDateKey;
        }
        if ((ref = this._eventListeners) != null ? ref.hasOwnProperty("load" || ((ref1 = this._eventListeners) != null ? ref1.hasOwnProperty("error") : void 0)) : void 0) {
          loader = new Image();
          loader.name = imageUrl;
          loader.src = imageUrl;
          loader.onload = (function(_this) {
            return function() {
              _this._element.setProperty("background-image", "url('" + imageUrl + "')");
              return _this.emit("load", loader);
            };
          })(this);
          return loader.onerror = (function(_this) {
            return function() {
              return _this.emit("error", loader);
            };
          })(this);
        } else {
          return this._element.setProperty("background-image", "url('" + imageUrl + "')");
        }
      }
    });

    Layer.define("superLayer", {
      enumerable: false,
      exportable: false,
      importable: true,
      get: function() {
        return this._superLayer || null;
      },
      set: function(layer) {
        var foundIndex, parentChildren;
        if (layer === this._superLayer) {
          return;
        }
        if (!layer instanceof Layer) {
          throw Error("Layer.superLayer needs to be a Layer object");
        }
        parentChildren = this._context.getRootElement()._node.getChildren();
        foundIndex = parentChildren.indexOf(this._element._node);
        if (foundIndex >= 0) {
          this._context.getRootElement()._node.removeChild(this._element._node);
        }
        if (this._superLayer) {
          this._superLayer._subLayers = _.without(this._superLayer._subLayers, this);
          parentChildren = this._superLayer._element._node.getChildren();
          foundIndex = parentChildren.indexOf(this._element._node);
          if (foundIndex >= 0) {
            this._superLayer._element._node.removeChild(this._element._node);
          }
          this._element._node.dismount();
          this._superLayer.emit("change:subLayers", {
            added: [],
            removed: [this]
          });
        }
        if (layer) {
          layer._element._node.addChild(this._element._node);
          layer._subLayers.push(this);
          layer.emit("change:subLayers", {
            added: [this],
            removed: []
          });
        } else {
          this._insertElement();
        }
        this._superLayer = layer;
        this.bringToFront();
        return this.emit("change:superLayer");
      }
    });

    Layer.define("subLayers", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function() {
        return _.clone(this._subLayers);
      }
    });

    Layer.define("siblingLayers", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function() {
        if (this.superLayer === null) {
          return _.filter(this._context.getLayers(), (function(_this) {
            return function(layer) {
              return layer !== _this && layer.superLayer === null;
            };
          })(this));
        }
        return _.without(this.superLayer.subLayers, this);
      }
    });

    Layer.prototype.addSubLayer = function(layer) {
      return layer.superLayer = this;
    };

    Layer.prototype.removeSubLayer = function(layer) {
      if (indexOf.call(this.subLayers, layer) < 0) {
        return;
      }
      return layer.superLayer = null;
    };

    Layer.prototype.subLayersByName = function(name) {
      return _.filter(this.subLayers, function(layer) {
        return layer.name === name;
      });
    };

    Layer.prototype.siblingLayersByName = function(name) {
      return _.filter(this.siblingLayers, function(layer) {
        return layer.name === name;
      });
    };

    Layer.prototype.superLayers = function(context) {
      var currentLayer, superLayers;
      if (context == null) {
        context = false;
      }
      superLayers = [];
      currentLayer = this;
      if (context === false) {
        while (currentLayer.superLayer) {
          superLayers.push(currentLayer.superLayer);
          currentLayer = currentLayer.superLayer;
        }
      } else {
        while (currentLayer._superOrParentLayer()) {
          superLayers.push(currentLayer._superOrParentLayer());
          currentLayer = currentLayer._superOrParentLayer();
        }
      }
      return superLayers;
    };

    Layer.prototype._superOrParentLayer = function() {
      if (this.superLayer) {
        return this.superLayer;
      }
      if (this._context._parentLayer) {
        return this._context._parentLayer;
      }
    };

    Layer.prototype.subLayersAbove = function(point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function(layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).y < point.y;
      });
    };

    Layer.prototype.subLayersBelow = function(point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function(layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).y > point.y;
      });
    };

    Layer.prototype.subLayersLeft = function(point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function(layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).x < point.x;
      });
    };

    Layer.prototype.subLayersRight = function(point, originX, originY) {
      if (originX == null) {
        originX = 0;
      }
      if (originY == null) {
        originY = 0;
      }
      return _.filter(this.subLayers, function(layer) {
        return Utils.framePointForOrigin(layer.frame, originX, originY).x > point.x;
      });
    };

    Layer.prototype.animate = function(options) {
      var animation, start;
      start = options.start;
      if (start == null) {
        start = true;
      }
      delete options.start;
      options.layer = this;
      animation = new Animation(options);
      if (start) {
        animation.start();
      }
      return animation;
    };

    Layer.prototype.animations = function() {
      return _.filter(this._context._animationList, (function(_this) {
        return function(animation) {
          return animation.options.layer === _this;
        };
      })(this));
    };

    Layer.prototype.animatingProperties = function() {
      var animation, i, j, len, len1, properties, propertyName, ref, ref1;
      properties = {};
      ref = this.animations();
      for (i = 0, len = ref.length; i < len; i++) {
        animation = ref[i];
        ref1 = animation.animatingProperties();
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          propertyName = ref1[j];
          properties[propertyName] = animation;
        }
      }
      return properties;
    };

    Layer.define("isAnimating", {
      enumerable: false,
      exportable: false,
      get: function() {
        return this.animations().length !== 0;
      }
    });

    Layer.prototype.animateStop = function() {
      var ref;
      _.invoke(this.animations(), "stop");
      return (ref = this._draggable) != null ? ref.animateStop() : void 0;
    };

    Layer.prototype.bringToFront = function() {
      return this.index = _.max(_.union([0], this.siblingLayers.map(function(layer) {
        return layer.index;
      }))) + 1;
    };

    Layer.prototype.sendToBack = function() {
      return this.index = _.min(_.union([0], this.siblingLayers.map(function(layer) {
        return layer.index;
      }))) - 1;
    };

    Layer.prototype.placeBefore = function(layer) {
      var i, l, len, ref;
      if (indexOf.call(this.siblingLayers, layer) < 0) {
        return;
      }
      ref = this.siblingLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        if (l.index <= layer.index) {
          l.index -= 1;
        }
      }
      return this.index = layer.index + 1;
    };

    Layer.prototype.placeBehind = function(layer) {
      var i, l, len, ref;
      if (indexOf.call(this.siblingLayers, layer) < 0) {
        return;
      }
      ref = this.siblingLayers;
      for (i = 0, len = ref.length; i < len; i++) {
        l = ref[i];
        if (l.index >= layer.index) {
          l.index += 1;
        }
      }
      return this.index = layer.index - 1;
    };

    Layer.define("states", {
      enumerable: false,
      exportable: false,
      importable: false,
      get: function() {
        return this._states != null ? this._states : this._states = new LayerStates(this);
      }
    });

    Layer.define("draggable", {
      importable: false,
      exportable: false,
      get: function() {
        return this._draggable != null ? this._draggable : this._draggable = new LayerDraggable(this);
      },
      set: function(value) {
        if (_.isBoolean(value)) {
          return this.draggable.enabled = value;
        }
      }
    });

    Layer.define("scrollFrame", {
      importable: false,
      get: function() {
        var frame;
        return frame = {
          x: this.scrollX,
          y: this.scrollY,
          width: this.width,
          height: this.height
        };
      },
      set: function(frame) {
        this.scrollX = frame.x;
        return this.scrollY = frame.y;
      }
    });

    Layer.define("scrollX", {
      get: function() {
        return this._element._styles['scrollLeft'];
      },
      set: function(value) {
        if (!_.isNumber(value)) {
          layerValueTypeError("scrollX", value);
        }
        return this._element.setProperty("scrollLeft", value);
      }
    });

    Layer.define("scrollY", {
      get: function() {
        return this._element._styles["scrollTop"];
      },
      set: function(value) {
        if (!_.isNumber(value)) {
          layerValueTypeError("scrollY", value);
        }
        return this._element.setProperty("scrollTop", value);
      }
    });

    Layer.prototype.addListener = function() {
      var eventName, eventNames, i, j, len, listener, originalListener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), originalListener = arguments[i++];
      if (!originalListener) {
        return;
      }
      listener = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return originalListener.call.apply(originalListener, [_this].concat(slice.call(args), [_this]));
        };
      })(this);
      originalListener.modifiedListener = listener;
      if (typeof eventNames === 'string') {
        eventNames = [eventNames];
      }
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        results.push((function(_this) {
          return function(eventName) {
            var base;
            Layer.__super__.addListener.call(_this, eventName, listener);
            _this._context.eventManager.wrap(_this._element).addEventListener(eventName, listener);
            if (_this._eventListeners == null) {
              _this._eventListeners = {};
            }
            if ((base = _this._eventListeners)[eventName] == null) {
              base[eventName] = [];
            }
            _this._eventListeners[eventName].push(listener);
            if (!_.startsWith(eventName, "change:")) {
              return _this.ignoreEvents = false;
            }
          };
        })(this)(eventName));
      }
      return results;
    };

    Layer.prototype.removeListener = function() {
      var eventName, eventNames, i, j, len, listener, results;
      eventNames = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), listener = arguments[i++];
      if (listener.modifiedListener) {
        listener = listener.modifiedListener;
      }
      if (typeof eventNames === 'string') {
        eventNames = [eventNames];
      }
      results = [];
      for (j = 0, len = eventNames.length; j < len; j++) {
        eventName = eventNames[j];
        results.push((function(_this) {
          return function(eventName) {
            Layer.__super__.removeListener.call(_this, eventName, listener);
            _this._context.eventManager.wrap(_this._element).removeEventListener(eventName, listener);
            if (_this._eventListeners) {
              return _this._eventListeners[eventName] = _.without(_this._eventListeners[eventName], listener);
            }
          };
        })(this)(eventName));
      }
      return results;
    };

    Layer.prototype.once = function(eventName, listener) {
      var originalListener;
      originalListener = listener;
      listener = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          originalListener.call.apply(originalListener, [_this].concat(slice.call(args), [_this]));
          return _this.removeListener(eventName, listener);
        };
      })(this);
      return this.addListener(eventName, listener);
    };

    Layer.prototype.removeAllListeners = function() {
      var eventName, listener, listeners, ref, results;
      if (!this._eventListeners) {
        return;
      }
      ref = this._eventListeners;
      results = [];
      for (eventName in ref) {
        listeners = ref[eventName];
        results.push((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = listeners.length; i < len; i++) {
            listener = listeners[i];
            results1.push(this.removeListener(eventName, listener));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Layer.prototype.on = Layer.prototype.addListener;

    Layer.prototype.off = Layer.prototype.removeListener;

    Layer.prototype.toInspect = function() {
      var round;
      round = function(value) {
        if (parseInt(value) === value) {
          return parseInt(value);
        }
        return Utils.round(value, 1);
      };
      if (this.name) {
        return "<" + this.constructor.name + " id:" + this.id + " name:" + this.name + " (" + (round(this.x)) + "," + (round(this.y)) + ") " + (round(this.width)) + "x" + (round(this.height)) + ">";
      }
      return "<" + this.constructor.name + " id:" + this.id + " (" + (round(this.x)) + "," + (round(this.y)) + ") " + (round(this.width)) + "x" + (round(this.height)) + ">";
    };

    return Layer;

  })(BaseClass);

}).call(this);
