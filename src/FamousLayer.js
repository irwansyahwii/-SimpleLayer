// Generated by CoffeeScript 1.9.2
(function() {
  var FamousLayer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FamousLayer = (function() {
    function FamousLayer(options) {
      this.setHeight = bind(this.setHeight, this);
      this.setWidth = bind(this.setWidth, this);
      this.setY = bind(this.setY, this);
      this.setX = bind(this.setX, this);
      this.addSubLayer = bind(this.addSubLayer, this);
      this.removeSubLayer = bind(this.removeSubLayer, this);
      this.removeChild = bind(this.removeChild, this);
      this.removeFromParent = bind(this.removeFromParent, this);
      this.setProperty = bind(this.setProperty, this);
      this.setAttribute = bind(this.setAttribute, this);
      this.setId = bind(this.setId, this);
      this.setContent = bind(this.setContent, this);
      var defaultProp;
      defaultProp = {
        backgroundColor: '#FA5C4F',
        overflow: "auto"
      };
      options = options || defaultProp;
      this.surface = new ContainerSurface({
        properties: options
      });
      this.stateModifier = new StateModifier({
        size: [200, 200],
        origin: [0.5, 0.5]
      });
      this.node = new RenderNode(this.stateModifier);
      this.node.add(this.surface);
      this._id = null;
      this._attributes = this.surface.attributes;
      this._styles = this.surface.properties;
      this.classList = this.surface.classList;
      this._content = this.surface.content;
      this.parentNode = null;
    }

    FamousLayer.prototype.setContent = function(contentVal) {
      return this.surface.setContent(contentVal);
    };

    FamousLayer.prototype.setId = function(idValue) {
      return this._id = idValue;
    };

    FamousLayer.prototype.setAttribute = function(attrName, attrValue) {
      return this.surface.setAttributes({
        attrName: attrValue
      });
    };

    FamousLayer.prototype.setProperty = function(propName, propValue) {
      return this.surface.setProperties({
        propName: propValue
      });
    };

    FamousLayer.prototype.removeFromParent = function() {
      if (this.superLayer != null) {
        return this.superLayer.removeSubLayer(this);
      }
    };

    FamousLayer.prototype.removeChild = function(child) {
      return this.removeSubLayer(child);
    };

    FamousLayer.prototype.removeSubLayer = function(layer) {
      var removeIndex;
      if (!(this.surface.context._node._child instanceof Array)) {
        this.surface.context._node._child = null;
      } else {
        removeIndex = this.surface.context._node._child.indexOf(layer.node);
        this.surface.context._node._child.splice(removeIndex, 1);
      }
      layer.superLayer = null;
      return layer.parentNode = null;
    };

    FamousLayer.prototype.addSubLayer = function(layer) {
      if (layer.superLayer != null) {
        layer.superLayer.removeSubLayer(layer);
      }
      this.surface.add(layer.node);
      layer.superLayer = this;
      return layer.parentNode = this;
    };

    FamousLayer.prototype.setX = function(val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setX. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(val, currentTransform[1], currentTransform[2]));
    };

    FamousLayer.prototype.setY = function(val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setY. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(currentTransform[0], val, currentTransform[2]));
    };

    FamousLayer.prototype.setWidth = function(val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      return this.stateModifier.setSize([val, currentSize[1]]);
    };

    FamousLayer.prototype.setHeight = function(val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      return this.stateModifier.setSize([currentSize[0], val]);
    };

    return FamousLayer;

  })();

  module.exports = FamousLayer;

}).call(this);
