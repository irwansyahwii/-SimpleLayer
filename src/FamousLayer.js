// Generated by CoffeeScript 1.9.2
(function() {
  var ContainerSurface, FamousLayer, RenderNode, StateModifier, Transform, famous,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  famous = require("famous");

  ContainerSurface = famous.surfaces.ContainerSurface;

  StateModifier = famous.modifiers.StateModifier;

  RenderNode = famous.core.RenderNode;

  Transform = famous.core.Transform;

  FamousLayer = (function() {
    function FamousLayer(options) {
      this.setHeight = bind(this.setHeight, this);
      this.setWidth = bind(this.setWidth, this);
      this.setY = bind(this.setY, this);
      this.setX = bind(this.setX, this);
      this.addSubLayer = bind(this.addSubLayer, this);
      this.removeSubLayer = bind(this.removeSubLayer, this);
      this.setRotation = bind(this.setRotation, this);
      this.getRotation = bind(this.getRotation, this);
      this.setScale = bind(this.setScale, this);
      this.getScale = bind(this.getScale, this);
      this.setPosition = bind(this.setPosition, this);
      this.getPosition = bind(this.getPosition, this);
      this.setOrigin = bind(this.setOrigin, this);
      this.getOrigin = bind(this.getOrigin, this);
      this.setAbsoluteSize = bind(this.setAbsoluteSize, this);
      this.getAbsoluteSize = bind(this.getAbsoluteSize, this);
      this.setOpacity = bind(this.setOpacity, this);
      this.removeChild = bind(this.removeChild, this);
      this.removeFromParent = bind(this.removeFromParent, this);
      this.setProperty = bind(this.setProperty, this);
      this.setAttribute = bind(this.setAttribute, this);
      this.setId = bind(this.setId, this);
      this.setContent = bind(this.setContent, this);
      var defaultProp;
      defaultProp = {};
      options = options || defaultProp;
      this.surface = new ContainerSurface({
        properties: options
      });
      this.stateModifier = new StateModifier({
        origin: [0.5, 0.5]
      });
      this.node = new RenderNode(this.stateModifier);
      this.node.add(this.surface);
      this._id = null;
      this._attributes = this.surface.attributes;
      this._styles = this.surface.properties;
      this.classList = this.surface.classList;
      this._content = this.surface.content;
      this.parentNode = null;
    }

    FamousLayer.prototype.setContent = function(contentVal) {
      console.log("@surface.setContent()");
      return this.surface.setContent(contentVal);
    };

    FamousLayer.prototype.setId = function(idValue) {
      return this._id = idValue;
    };

    FamousLayer.prototype.setAttribute = function(attrName, attrValue) {
      console.log("@surface.setAttribute()");
      return this.surface.setAttributes({
        attrName: attrValue
      });
    };

    FamousLayer.prototype.setProperty = function(propName, propValue) {
      var obj;
      console.log("@surface.setProperty(" + propName + ", " + propValue + ")");
      return this.surface.setProperties((
        obj = {},
        obj["" + propName] = propValue,
        obj
      ));
    };

    FamousLayer.prototype.removeFromParent = function() {
      if (this.superLayer != null) {
        return this.superLayer.removeSubLayer(this);
      }
    };

    FamousLayer.prototype.removeChild = function(child) {
      return this.removeSubLayer(child);
    };

    FamousLayer.prototype.setOpacity = function(opacityValue) {
      console.log("@stateModifier.setOpacity(" + opacityValue + ")");
      return this.stateModifier.setOpacity(opacityValue);
    };

    FamousLayer.prototype.getAbsoluteSize = function() {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("currentSize:");
      console.log(currentSize);
      return currentSize || [0, 0, 0];
    };

    FamousLayer.prototype.setAbsoluteSize = function(x, y, z) {
      console.log("@stateModifier.setSize([" + x + ", " + y + ", " + z + "])");
      return this.stateModifier.setSize([x, y, z]);
    };

    FamousLayer.prototype.getOrigin = function() {
      return this.stateModifier.getOrigin() || [0, 0, 0];
    };

    FamousLayer.prototype.setOrigin = function(x, y, z) {
      console.log("@stateModifier.setOrigin(" + x + ", " + y + ", " + z + ")");
      z = z || 0;
      return this.stateModifier.setOrigin([x, y, z]);
    };

    FamousLayer.prototype.getPosition = function() {
      var currentPos;
      currentPos = Transform.getTranslate(this.stateModifier.getTransform());
      currentPos[0] = currentPos[0] || 0;
      currentPos[1] = currentPos[1] || 0;
      currentPos[2] = currentPos[2] || 0;
      return currentPos;
    };

    FamousLayer.prototype.setPosition = function(x, y, z) {
      var currentTransform, deltaX, deltaY, deltaZ, m, originalTranslate;
      console.log("FamousLayer::setPosition: x: " + x + ", y: " + y + ", z: " + z);
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("currentTransform:");
      console.log(currentTransform);
      m = this.stateModifier.getTransform();
      originalTranslate = Transform.getTranslate(m);
      deltaX = x - originalTranslate[0];
      deltaY = y - originalTranslate[1];
      deltaZ = z - originalTranslate[2];
      this.stateModifier.setTransform(Transform.thenMove(m, [deltaX, deltaY, deltaZ]));
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("AFTER currentTransform:");
      return console.log(currentTransform);
    };

    FamousLayer.prototype.getScale = function() {
      return Transform.interpret(this.stateModifier.getTransform()).scale;
    };

    FamousLayer.prototype.setScale = function(x, y, z) {
      var transformParts;
      console.log("@stateModifier.setTransform(Transform.scale(" + x + ", " + y + ", " + z + "))");
      transformParts = Transform.interpret(this.stateModifier.getTransform());
      transformParts.scale = Transform.multiply(transformParts.scale, Transform.scale(x, y, z));
      return this.stateModifier.setTransform(Transform.build(transformParts));
    };

    FamousLayer.prototype.getRotation = function() {
      return Transform.interpret(this.stateModifier.getTransform()).rotate;
    };

    FamousLayer.prototype.setRotation = function(x, y, z) {
      return console.log("@stateModifier.setTransform(Transform.rotate(" + x + ", " + y + ", " + z + "))");
    };

    FamousLayer.prototype.removeSubLayer = function(layer) {
      var removeIndex;
      if (!(this.surface.context._node._child instanceof Array)) {
        this.surface.context._node._child = null;
      } else {
        removeIndex = this.surface.context._node._child.indexOf(layer.node);
        this.surface.context._node._child.splice(removeIndex, 1);
      }
      layer.superLayer = null;
      return layer.parentNode = null;
    };

    FamousLayer.prototype.addSubLayer = function(layer) {
      if (layer.superLayer != null) {
        layer.superLayer.removeSubLayer(layer);
      }
      this.surface.add(layer.node);
      layer.superLayer = this;
      return layer.parentNode = this;
    };

    FamousLayer.prototype.setX = function(val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setX. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(val, currentTransform[1], currentTransform[2]));
    };

    FamousLayer.prototype.setY = function(val) {
      var currentTransform;
      currentTransform = Transform.getTranslate(this.stateModifier.getTransform());
      console.log("setY. currentTransform: " + currentTransform);
      console.log(currentTransform);
      return this.stateModifier.setTransform(Transform.translate(currentTransform[0], val, currentTransform[2]));
    };

    FamousLayer.prototype.setWidth = function(val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("@stateModifier.setSize([" + val + ", currentSize[1]])");
      return this.stateModifier.setSize([val, currentSize[1]]);
    };

    FamousLayer.prototype.setHeight = function(val) {
      var currentSize;
      currentSize = this.stateModifier.getSize();
      console.log("@stateModifier.setSize([currentSize[0], " + val + "])");
      return this.stateModifier.setSize([currentSize[0], val]);
    };

    return FamousLayer;

  })();

  module.exports = FamousLayer;

}).call(this);
