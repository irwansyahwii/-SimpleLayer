// Generated by CoffeeScript 1.9.2
(function() {
  var Events, Layer, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Utils = require("../Utils");

  Layer = require("../Layer").Layer;

  Events = require("../Events").Events;

  "SliderComponent\n\nknob <layer>\nknobSize <width, height>\nfill <layer>\nmin <number>\nmax <number>\n\npointForValue(<n>)\nvalueForPoint(<n>)\n\nanimateToValue(value, animationOptions={})";

  exports.SliderComponent = (function(superClass) {
    extend(SliderComponent, superClass);

    function SliderComponent(options) {
      if (options == null) {
        options = {};
      }
      this._updateValue = bind(this._updateValue, this);
      this._setRadius = bind(this._setRadius, this);
      this._updateFrame = bind(this._updateFrame, this);
      this._updateKnob = bind(this._updateKnob, this);
      this._updateFill = bind(this._updateFill, this);
      this._touchDown = bind(this._touchDown, this);
      if (options.backgroundColor == null) {
        options.backgroundColor = "#ccc";
      }
      if (options.borderRadius == null) {
        options.borderRadius = 50;
      }
      if (options.clip == null) {
        options.clip = false;
      }
      if (options.width == null) {
        options.width = 300;
      }
      if (options.height == null) {
        options.height = 10;
      }
      if (options.value == null) {
        options.value = 0;
      }
      this.knob = new Layer({
        backgroundColor: "#fff",
        shadowY: 1,
        shadowBlur: 3,
        shadowColor: "rgba(0,0,0,0.35)"
      });
      this.fill = new Layer({
        backgroundColor: "#333",
        width: 0,
        force2d: true
      });
      SliderComponent.__super__.constructor.call(this, options);
      this.knobSize = options.knobSize || 30;
      this.knob.superLayer = this.fill.superLayer = this;
      if (this.width > this.height) {
        this.fill.height = this.height;
      } else {
        this.fill.width = this.width;
      }
      this.fill.borderRadius = this.borderRadius;
      this.knob.draggable.enabled = true;
      this.knob.draggable.overdrag = false;
      this.knob.draggable.momentum = true;
      this.knob.draggable.momentumOptions = {
        friction: 5,
        tolerance: 0.25
      };
      this.knob.draggable.bounce = false;
      this.knob.draggable.propagateEvents = false;
      this.knob.borderRadius = "50%";
      this._updateFrame();
      this._updateKnob();
      this._updateFill();
      this.on("change:size", this._updateFrame);
      this.on("change:borderRadius", this._setRadius);
      if (this.width > this.height) {
        this.knob.draggable.speedY = 0;
        this.knob.on("change:x", this._updateFill);
      } else {
        this.knob.draggable.speedX = 0;
        this.knob.on("change:y", this._updateFill);
      }
      this.knob.on("change:size", this._updateKnob);
      this.knob.on(Events.Move, (function(_this) {
        return function() {
          _this._updateFrame();
          return _this._updateValue();
        };
      })(this));
      this.on(Events.TouchStart, this._touchDown);
    }

    SliderComponent.prototype._touchDown = function(event) {
      var offsetX, offsetY;
      event.preventDefault();
      event.stopPropagation();
      offsetX = (this.min / this.canvasScaleX()) - this.min;
      offsetY = (this.min / this.canvasScaleY()) - this.min;
      if (this.width > this.height) {
        this.value = this.valueForPoint(Events.touchEvent(event).clientX - this.screenScaledFrame().x) / this.canvasScaleX() - offsetX;
      } else {
        this.value = this.valueForPoint(Events.touchEvent(event).clientY - this.screenScaledFrame().y) / this.canvasScaleY() - offsetY;
      }
      this.knob.draggable._touchStart(event);
      return this._updateValue();
    };

    SliderComponent.prototype._updateFill = function() {
      if (this.width > this.height) {
        return this.fill.width = this.knob.midX;
      } else {
        return this.fill.height = this.knob.midY;
      }
    };

    SliderComponent.prototype._updateKnob = function() {
      if (this.width > this.height) {
        this.knob.midX = this.fill.width;
        return this.knob.centerY();
      } else {
        this.knob.midY = this.fill.height;
        return this.knob.centerX();
      }
    };

    SliderComponent.prototype._updateFrame = function() {
      this.knob.draggable.constraints = {
        x: -this.knob.width / 2,
        y: -this.knob.height / 2,
        width: this.width + this.knob.width,
        height: this.height + this.knob.height
      };
      if (this.width > this.height) {
        this.fill.height = this.height;
        return this.knob.centerY();
      } else {
        this.fill.width = this.width;
        return this.knob.centerX();
      }
    };

    SliderComponent.prototype._setRadius = function() {
      var radius;
      radius = this.borderRadius;
      return this.fill.style.borderRadius = radius + "px 0 0 " + radius + "px";
    };

    SliderComponent.define("knobSize", {
      get: function() {
        return this._knobSize;
      },
      set: function(value) {
        this._knobSize = value;
        this.knob.width = this._knobSize;
        this.knob.height = this._knobSize;
        return this._updateFrame();
      }
    });

    SliderComponent.define("min", {
      get: function() {
        return this._min || 0;
      },
      set: function(value) {
        return this._min = value;
      }
    });

    SliderComponent.define("max", {
      get: function() {
        return this._max || 1;
      },
      set: function(value) {
        return this._max = value;
      }
    });

    SliderComponent.define("value", {
      get: function() {
        if (this.width > this.height) {
          return this.valueForPoint(this.knob.midX);
        } else {
          return this.valueForPoint(this.knob.midY);
        }
      },
      set: function(value) {
        if (this.width > this.height) {
          this.knob.midX = this.pointForValue(value);
          return this._updateFill();
        } else {
          this.knob.midY = this.pointForValue(value);
          return this._updateFill();
        }
      }
    });

    SliderComponent.prototype._updateValue = function() {
      return this.emit("change:value", this.value);
    };

    SliderComponent.prototype.pointForValue = function(value) {
      if (this.width > this.height) {
        return Utils.modulate(value, [this.min, this.max], [0, this.width], true);
      } else {
        return Utils.modulate(value, [this.min, this.max], [0, this.height], true);
      }
    };

    SliderComponent.prototype.valueForPoint = function(value) {
      if (this.width > this.height) {
        return Utils.modulate(value, [0, this.width], [this.min, this.max], true);
      } else {
        return Utils.modulate(value, [0, this.height], [this.min, this.max], true);
      }
    };

    SliderComponent.prototype.animateToValue = function(value, animationOptions) {
      if (animationOptions == null) {
        animationOptions = {
          curve: "spring(300,25,0)"
        };
      }
      if (this.width > this.height) {
        animationOptions.properties = {
          x: this.pointForValue(value) - (this.knob.width / 2)
        };
        this.knob.on("change:x", this._updateValue);
      } else {
        animationOptions.properties = {
          y: this.pointForValue(value) - (this.knob.height / 2)
        };
        this.knob.on("change:y", this._updateValue);
      }
      return this.knob.animate(animationOptions);
    };

    return SliderComponent;

  })(Layer);

}).call(this);
