// Generated by CoffeeScript 1.9.2
(function() {
  var AppleWatch38Device, AppleWatch42Device, BaseClass, Defaults, DeviceComponentDefaultDevice, Devices, Events, Layer, Nexus5BaseDevice, Nexus5BaseDeviceHand, Nexus9BaseDevice, Utils, _, iPadAirBaseDevice, iPadAirBaseDeviceHand, iPadMiniBaseDevice, iPadMiniBaseDeviceHand, iPhone5BaseDevice, iPhone5BaseDeviceHand, iPhone5CBaseDevice, iPhone5CBaseDeviceHand, iPhone6BaseDevice, iPhone6BaseDeviceHand, iPhone6PlusBaseDevice, iPhone6PlusBaseDeviceHand,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Utils = require("../Utils");

  _ = require("../Underscore")._;

  DeviceComponentDefaultDevice = "iphone-6-silver";

  BaseClass = require("../BaseClass").BaseClass;

  Layer = require("../Layer").Layer;

  Defaults = require("../Defaults").Defaults;

  Events = require("../Events").Events;


  /*
  
  Device._setup()
  Device._update()
  Device._setupContext()
  
  Device.fullScreen bool
  Device.deviceType str
  Device.padding int
  
  Device.orientation(orientation:float)
  Device.orientationName landscape|portrait|unknown
  Device.rotateLeft()
  Device.rotateRight()
  
  Device.setDeviceScale(zoom:float, animate:bool)
  Device.setContentScale(zoom:float, animate:bool)
  
  Device.keyboard bool
  Device.setKeyboard(visible:bool, animate:bool)
  Device.showKeyboard(animate:bool)
  Device.hideKeyboard(animate:bool)
  Device.toggleKeyboard(animate:bool)
  
  
   * Events
  Events.DeviceTypeDidChange
  Events.DeviceFullScreenDidChange
  Events.DeviceKeyboardWillShow
  Events.DeviceKeyboardDidShow
   */

  exports.DeviceComponent = (function(superClass) {
    extend(DeviceComponent, superClass);

    DeviceComponent.define("context", {
      get: function() {
        return this._context;
      }
    });

    function DeviceComponent(options) {
      var defaults;
      if (options == null) {
        options = {};
      }
      this._animateKeyboard = bind(this._animateKeyboard, this);
      this._updateDeviceImage = bind(this._updateDeviceImage, this);
      this._update = bind(this._update, this);
      defaults = Defaults.getDefaults("DeviceComponent", options);
      if (Framer.Defaults.hasOwnProperty("DeviceView")) {
        defaults = _.extend(defaults, Framer.Defaults.DeviceView);
      }
      this._setup();
      this.animationOptions = defaults.animationOptions;
      this.deviceType = defaults.deviceType;
      _.extend(this, _.defaults(options, defaults));
    }

    DeviceComponent.prototype._setup = function() {
      var i, layer, len, ref;
      if (this._setupDone) {
        return;
      }
      this._setupDone = true;
      this.background = new Layer;
      this.background.clip = true;
      this.background.backgroundColor = "transparent";
      this.background.classList.add("DeviceBackground");
      this.phone = new Layer;
      this.screen = new Layer({
        superLayer: this.phone
      });
      this.viewport = new Layer({
        superLayer: this.screen
      });
      this.content = new Layer({
        superLayer: this.viewport
      });
      this.phone.backgroundColor = "transparent";
      this.phone.classList.add("DevicePhone");
      this.screen.backgroundColor = "transparent";
      this.screen.classList.add("DeviceScreen");
      this.viewport.backgroundColor = "transparent";
      this.viewport.classList.add("DeviceComponentPort");
      this.content.backgroundColor = "transparent";
      this.content.classList.add("DeviceContent");
      this.content.originX = 0;
      this.content.originY = 0;
      this.keyboardLayer = new Layer({
        superLayer: this.viewport
      });
      this.keyboardLayer.on("click", (function(_this) {
        return function() {
          return _this.toggleKeyboard();
        };
      })(this));
      this.keyboardLayer.classList.add("DeviceKeyboard");
      this.keyboardLayer.backgroundColor = "transparent";
      Framer.CurrentContext.eventManager.wrap(window).addEventListener("resize", this._update);
      ref = [this.background, this.phone, this.viewport, this.content, this.screen];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        layer.on("touchmove", function(event) {
          return event.preventDefault();
        });
      }
      return this._context = new Framer.Context({
        parentLayer: this.content,
        name: "Device"
      });
    };

    DeviceComponent.prototype._update = function() {
      var backgroundOverlap, contentScaleFactor, height, i, layer, len, ref, ref1, width;
      contentScaleFactor = this.contentScale;
      if (contentScaleFactor > 1) {
        contentScaleFactor = 1;
      }
      if (this._shouldRenderFullScreen()) {
        ref = [this.background, this.phone, this.viewport, this.content, this.screen];
        for (i = 0, len = ref.length; i < len; i++) {
          layer = ref[i];
          layer.x = layer.y = 0;
          layer.width = window.innerWidth / contentScaleFactor;
          layer.height = window.innerHeight / contentScaleFactor;
          layer.scale = 1;
        }
        this.content.scale = contentScaleFactor;
        return this._positionKeyboard();
      } else {
        backgroundOverlap = 100;
        this.background.x = 0 - backgroundOverlap;
        this.background.y = 0 - backgroundOverlap;
        this.background.width = window.innerWidth + (2 * backgroundOverlap);
        this.background.height = window.innerHeight + (2 * backgroundOverlap);
        this.phone.scale = this._calculatePhoneScale();
        this.phone.center();
        ref1 = this._getOrientationDimensions(this._device.screenWidth / contentScaleFactor, this._device.screenHeight / contentScaleFactor), width = ref1[0], height = ref1[1];
        this.screen.width = this._device.screenWidth;
        this.screen.height = this._device.screenHeight;
        this.viewport.width = this.content.width = width;
        this.viewport.height = this.content.height = height;
        return this.screen.center();
      }
    };

    DeviceComponent.prototype._shouldRenderFullScreen = function() {
      if (!this._device) {
        return true;
      }
      if (this.fullScreen === true) {
        return true;
      }
      if (this.deviceType === "fullscreen") {
        return true;
      }
      if (Utils.deviceType() === "phone" && Utils.deviceType() === this._device.deviceType) {
        return true;
      }
      if (Utils.deviceType() === "tablet" && Utils.deviceType() === this._device.deviceType) {
        return true;
      }
      if (Utils.deviceType() === "phone" && this._device.deviceType === "tablet") {
        return true;
      }
      return false;
    };

    DeviceComponent.prototype.setupContext = function() {
      return Framer.CurrentContext = this._context;
    };

    DeviceComponent.define("fullScreen", {
      get: function() {
        return this._fullScreen;
      },
      set: function(fullScreen) {
        return this._setFullScreen(fullScreen);
      }
    });

    DeviceComponent.prototype._setFullScreen = function(fullScreen) {
      if (this._deviceType === "fullscreen") {
        return;
      }
      if (!_.isBoolean(fullScreen)) {
        return;
      }
      if (fullScreen === this._fullScreen) {
        return;
      }
      this._fullScreen = fullScreen;
      if (fullScreen === true) {
        this.phone.image = "";
      } else {
        this._updateDeviceImage();
      }
      this._update();
      this.keyboard = false;
      this._positionKeyboard();
      return this.emit("change:fullScreen");
    };

    DeviceComponent.define("deviceType", {
      get: function() {
        return this._deviceType;
      },
      set: function(deviceType) {
        var device, shouldZoomToFit;
        if (deviceType === this._deviceType) {
          return;
        }
        device = null;
        if (_.isString(deviceType)) {
          device = Devices[deviceType.toLowerCase()];
        }
        if (!device) {
          throw Error("No device named " + deviceType + ". Options are: " + (_.keys(Devices)));
        }
        if (this._device === device) {
          return;
        }
        shouldZoomToFit = this._deviceType === "fullscreen";
        this._device = _.clone(device);
        this._deviceType = deviceType;
        this.fullscreen = false;
        this._updateDeviceImage();
        this._update();
        this.keyboard = false;
        this._positionKeyboard();
        this.emit("change:deviceType");
        if (shouldZoomToFit) {
          return this.deviceScale = "fit";
        }
      }
    });

    DeviceComponent.prototype._updateDeviceImage = function() {
      if (/PhantomJS/.test(navigator.userAgent)) {
        return;
      }
      if (this._shouldRenderFullScreen()) {
        return this.phone.image = "";
      } else if (!this._deviceImageUrl(this._deviceImageName())) {
        return this.phone.image = "";
      } else {
        this.phone._alwaysUseImageCache = true;
        this.phone.image = this._deviceImageUrl(this._deviceImageName());
        this.phone.width = this._device.deviceImageWidth;
        return this.phone.height = this._device.deviceImageHeight;
      }
    };

    DeviceComponent.prototype._deviceImageName = function() {
      if (this._device.hasOwnProperty("deviceImage")) {
        return this._device.deviceImage;
      }
      return this._deviceType + ".png";
    };

    DeviceComponent.prototype._deviceImageUrl = function(name) {
      var resourceUrl;
      if (!name) {
        return null;
      }
      if (_.startsWith(name, "http://") || _.startsWith(name, "https://")) {
        return name;
      }
      if (Utils.isFramerStudio() && window.FramerStudioInfo) {
        resourceUrl = window.FramerStudioInfo.deviceImagesUrl;
      } else {
        resourceUrl = "//resources.framerjs.com/static/DeviceResources";
      }
      if (Utils.isJP2Supported() && this._device.deviceImageJP2 !== false) {
        return resourceUrl + "/" + (name.replace(".png", ".jp2"));
      } else {
        return resourceUrl + "/" + name;
      }
    };

    DeviceComponent.define("deviceScale", {
      get: function() {
        if (this._shouldRenderFullScreen()) {
          return 1;
        }
        return this._deviceScale || 1;
      },
      set: function(deviceScale) {
        return this.setDeviceScale(deviceScale, false);
      }
    });

    DeviceComponent.prototype.setDeviceScale = function(deviceScale, animate) {
      var phoneScale;
      if (animate == null) {
        animate = false;
      }
      if (deviceScale === "fit" || deviceScale < 0) {
        deviceScale = "fit";
      } else {
        deviceScale = parseFloat(deviceScale);
      }
      if (deviceScale === this._deviceScale) {
        return;
      }
      this._deviceScale = deviceScale;
      if (this._shouldRenderFullScreen()) {
        return;
      }
      if (deviceScale === "fit") {
        phoneScale = this._calculatePhoneScale();
      } else {
        phoneScale = deviceScale;
      }
      this.phone.animateStop();
      if (animate) {
        this.phone.animate(_.extend(this.animationOptions, {
          properties: {
            scale: phoneScale
          }
        }));
      } else {
        this.phone.scale = phoneScale;
        this.phone.center();
      }
      return this.emit("change:deviceScale");
    };

    DeviceComponent.prototype._calculatePhoneScale = function() {
      var height, paddingOffset, phoneScale, ref, ref1, width;
      if (this._deviceScale && this._deviceScale !== "fit") {
        return this._deviceScale;
      }
      ref = this._getOrientationDimensions(this.phone.width, this.phone.height), width = ref[0], height = ref[1];
      paddingOffset = ((ref1 = this._device) != null ? ref1.paddingOffset : void 0) || 0;
      phoneScale = _.min([(window.innerWidth - ((this.padding + paddingOffset) * 2)) / width, (window.innerHeight - ((this.padding + paddingOffset) * 2)) / height]);
      return phoneScale;
    };

    DeviceComponent.define("contentScale", {
      get: function() {
        return this._contentScale || 1;
      },
      set: function(contentScale) {
        return this.setContentScale(contentScale, false);
      }
    });

    DeviceComponent.prototype.setContentScale = function(contentScale, animate) {
      if (animate == null) {
        animate = false;
      }
      contentScale = parseFloat(contentScale);
      if (contentScale <= 0) {
        return;
      }
      if (contentScale === this._contentScale) {
        return;
      }
      this._contentScale = contentScale;
      if (animate) {
        this.content.animate(_.extend(this.animationOptions, {
          properties: {
            scale: this._contentScale
          }
        }));
      } else {
        this.content.scale = this._contentScale;
      }
      this._update();
      return this.emit("change:contentScale");
    };

    DeviceComponent.define("orientation", {
      get: function() {
        return this._orientation || 0;
      },
      set: function(orientation) {
        return this.setOrientation(orientation, false);
      }
    });

    DeviceComponent.prototype.setOrientation = function(orientation, animate) {
      var _hadKeyboard, animation, contentProperties, height, phoneProperties, ref, ref1, width, x, y;
      if (animate == null) {
        animate = false;
      }
      if (orientation === "portrait") {
        orientation = 0;
      }
      if (orientation === "landscape") {
        orientation = 90;
      }
      if (this._shouldRenderFullScreen()) {
        return;
      }
      orientation = parseInt(orientation);
      if (orientation !== 0 && orientation !== 90 && orientation !== (-90)) {
        return;
      }
      if (orientation === this._orientation) {
        return;
      }
      this._orientation = orientation;
      phoneProperties = {
        rotationZ: this._orientation,
        scale: this._calculatePhoneScale()
      };
      ref = this._getOrientationDimensions(this._device.screenWidth, this._device.screenHeight), width = ref[0], height = ref[1];
      ref1 = [(this.screen.width - width) / 2, (this.screen.height - height) / 2], x = ref1[0], y = ref1[1];
      contentProperties = {
        rotationZ: -this._orientation,
        width: width,
        height: height,
        x: x,
        y: y
      };
      _hadKeyboard = this.keyboard;
      if (_hadKeyboard) {
        this.hideKeyboard(false);
      }
      this.phone.animateStop();
      this.viewport.animateStop();
      if (animate) {
        animation = this.phone.animate(_.extend(this.animationOptions, {
          properties: phoneProperties
        }));
        this.viewport.animate(_.extend(this.animationOptions, {
          properties: contentProperties
        }));
        animation.on(Events.AnimationEnd, (function(_this) {
          return function() {
            return _this._update();
          };
        })(this));
        if (_hadKeyboard) {
          animation.on(Events.AnimationEnd, (function(_this) {
            return function() {
              return _this.showKeyboard(true);
            };
          })(this));
        }
      } else {
        this.phone.props = phoneProperties;
        this.viewport.props = contentProperties;
        this._update();
        if (_hadKeyboard) {
          this.showKeyboard(true);
        }
      }
      this._renderKeyboard();
      return this.emit("change:orientation");
    };

    DeviceComponent.prototype.isPortrait = function() {
      return Math.abs(this._orientation) !== 90;
    };

    DeviceComponent.prototype.isLandscape = function() {
      return !this.isPortrait();
    };

    DeviceComponent.define("orientationName", {
      get: function() {
        if (this.isPortrait()) {
          return "portrait";
        }
        if (this.isLandscape()) {
          return "landscape";
        }
      },
      set: function(orientationName) {
        return this.setOrientation(orientationName, false);
      }
    });

    DeviceComponent.prototype.rotateLeft = function(animate) {
      if (animate == null) {
        animate = true;
      }
      if (this.orientation === 90) {
        return;
      }
      return this.setOrientation(this.orientation + 90, animate);
    };

    DeviceComponent.prototype.rotateRight = function(animate) {
      if (animate == null) {
        animate = true;
      }
      if (this.orientation === -90) {
        return;
      }
      return this.setOrientation(this.orientation - 90, animate);
    };

    DeviceComponent.prototype._getOrientationDimensions = function(width, height) {
      if (this.isLandscape()) {
        return [height, width];
      } else {
        return [width, height];
      }
    };

    DeviceComponent.define("keyboard", {
      get: function() {
        return this._keyboard;
      },
      set: function(keyboard) {
        return this.setKeyboard(keyboard, false);
      }
    });

    DeviceComponent.prototype.setKeyboard = function(keyboard, animate) {
      var ref, ref1;
      if (animate == null) {
        animate = false;
      }
      if (!this._device.hasOwnProperty("keyboards")) {
        return;
      }
      if (_.isString(keyboard)) {
        if ((ref = keyboard.toLowerCase()) === "1" || ref === "true") {
          keyboard = true;
        } else if ((ref1 = keyboard.toLowerCase()) === "0" || ref1 === "false") {
          keyboard = false;
        } else {
          return;
        }
      }
      if (!_.isBoolean(keyboard)) {
        return;
      }
      if (keyboard === this._keyboard) {
        return;
      }
      this._keyboard = keyboard;
      this.emit("change:keyboard");
      if (keyboard === true) {
        this.emit("keyboard:show:start");
        return this._animateKeyboard(this._keyboardShowY(), animate, (function(_this) {
          return function() {
            return _this.emit("keyboard:show:end");
          };
        })(this));
      } else {
        this.emit("keyboard:hide:start");
        return this._animateKeyboard(this._keyboardHideY(), animate, (function(_this) {
          return function() {
            return _this.emit("keyboard:hide:end");
          };
        })(this));
      }
    };

    DeviceComponent.prototype.showKeyboard = function(animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(true, animate);
    };

    DeviceComponent.prototype.hideKeyboard = function(animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(false, animate);
    };

    DeviceComponent.prototype.toggleKeyboard = function(animate) {
      if (animate == null) {
        animate = true;
      }
      return this.setKeyboard(!this.keyboard, animate);
    };

    DeviceComponent.prototype._renderKeyboard = function() {
      if (!this._device.keyboards) {
        return;
      }
      this.keyboardLayer.image = this._deviceImageUrl(this._device.keyboards[this.orientationName].image);
      this.keyboardLayer.width = this._device.keyboards[this.orientationName].width;
      return this.keyboardLayer.height = this._device.keyboards[this.orientationName].height;
    };

    DeviceComponent.prototype._positionKeyboard = function() {
      this.keyboardLayer.centerX();
      if (this.keyboard) {
        return this._animateKeyboard(this._keyboardShowY(), false);
      } else {
        return this._animateKeyboard(this._keyboardHideY(), false);
      }
    };

    DeviceComponent.prototype._animateKeyboard = function(y, animate, callback) {
      var animation;
      this.keyboardLayer.bringToFront();
      this.keyboardLayer.animateStop();
      if (animate === false) {
        this.keyboardLayer.y = y;
        return typeof callback === "function" ? callback() : void 0;
      } else {
        animation = this.keyboardLayer.animate(_.extend(this.animationOptions, {
          properties: {
            y: y
          }
        }));
        return animation.on(Events.AnimationEnd, callback);
      }
    };

    DeviceComponent.prototype._keyboardShowY = function() {
      return this.viewport.height - this.keyboardLayer.height;
    };

    DeviceComponent.prototype._keyboardHideY = function() {
      return this.viewport.height;
    };

    return DeviceComponent;

  })(BaseClass);

  iPhone6BaseDevice = {
    deviceImageWidth: 870,
    deviceImageHeight: 1738,
    deviceImageJP2: true,
    screenWidth: 750,
    screenHeight: 1334,
    deviceType: "phone"
  };

  iPhone6BaseDeviceHand = _.extend({}, iPhone6BaseDevice, {
    deviceImageWidth: 1988,
    deviceImageHeight: 2368,
    deviceImageJP2: true,
    paddingOffset: -150
  });

  iPhone6PlusBaseDevice = {
    deviceImageWidth: 1460,
    deviceImageHeight: 2900,
    deviceImageJP2: true,
    screenWidth: 1242,
    screenHeight: 2208,
    deviceType: "phone"
  };

  iPhone6PlusBaseDeviceHand = _.extend({}, iPhone6PlusBaseDevice, {
    deviceImageWidth: 3128,
    deviceImageHeight: 3487,
    deviceImageJP2: true,
    paddingOffset: -150
  });

  iPhone5BaseDevice = {
    deviceImageWidth: 780,
    deviceImageHeight: 1608,
    deviceImageJP2: true,
    screenWidth: 640,
    screenHeight: 1136,
    deviceType: "phone"
  };

  iPhone5BaseDeviceHand = _.extend({}, iPhone5BaseDevice, {
    deviceImageWidth: 1884,
    deviceImageHeight: 2234,
    deviceImageJP2: true,
    paddingOffset: -200
  });

  iPhone5CBaseDevice = {
    deviceImageWidth: 776,
    deviceImageHeight: 1612,
    deviceImageJP2: true,
    screenWidth: 640,
    screenHeight: 1136,
    deviceType: "phone"
  };

  iPhone5CBaseDeviceHand = _.extend({}, iPhone5CBaseDevice, {
    deviceImageWidth: 1894,
    deviceImageHeight: 2244,
    deviceImageJP2: true,
    paddingOffset: -200
  });

  iPadMiniBaseDevice = {
    deviceImageWidth: 872,
    deviceImageHeight: 1292,
    deviceImageJP2: true,
    screenWidth: 768,
    screenHeight: 1024,
    deviceType: "tablet"
  };

  iPadMiniBaseDeviceHand = _.extend({}, iPadMiniBaseDevice, {
    deviceImageWidth: 1380,
    deviceImageHeight: 2072,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  iPadAirBaseDevice = {
    deviceImageWidth: 1769,
    deviceImageHeight: 2509,
    deviceImageJP2: true,
    screenWidth: 1536,
    screenHeight: 2048,
    deviceType: "tablet"
  };

  iPadAirBaseDeviceHand = _.extend({}, iPadAirBaseDevice, {
    deviceImageWidth: 4744,
    deviceImageHeight: 4101,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  Nexus5BaseDevice = {
    deviceImageWidth: 1208,
    deviceImageHeight: 2440,
    deviceImageJP2: true,
    screenWidth: 1080,
    screenHeight: 1920,
    deviceType: "phone"
  };

  Nexus5BaseDeviceHand = _.extend({}, Nexus5BaseDevice, {
    deviceImageWidth: 2692,
    deviceImageHeight: 2996,
    deviceImageJP2: true,
    paddingOffset: -120
  });

  Nexus9BaseDevice = {
    deviceImageWidth: 1733,
    deviceImageHeight: 2575,
    deviceImageJP2: true,
    screenWidth: 1536,
    screenHeight: 2048,
    deviceType: "tablet"
  };

  AppleWatch42Device = {
    deviceImageWidth: 552,
    deviceImageHeight: 938,
    deviceImageJP2: true,
    screenWidth: 312,
    screenHeight: 390
  };

  AppleWatch38Device = {
    deviceImageWidth: 508,
    deviceImageHeight: 900,
    deviceImageJP2: true,
    screenWidth: 272,
    screenHeight: 340
  };

  Devices = {
    "fullscreen": {
      name: "Fullscreen",
      deviceType: "desktop"
    },
    "desktop-safari-1024-600": {
      deviceType: "browser",
      name: "Desktop Safari 1024 x 600",
      screenWidth: 1024,
      screenHeight: 600,
      deviceImageWidth: 1136,
      deviceImageHeight: 760,
      deviceImageJP2: true
    },
    "desktop-safari-1280-800": {
      deviceType: "browser",
      name: "Desktop Safari 1280 x 800",
      screenWidth: 1280,
      screenHeight: 800,
      deviceImageWidth: 1392,
      deviceImageHeight: 960,
      deviceImageJP2: true
    },
    "desktop-safari-1440-900": {
      deviceType: "browser",
      name: "Desktop Safari 1440 x 900",
      screenWidth: 1440,
      screenHeight: 900,
      deviceImageWidth: 1552,
      deviceImageHeight: 1060,
      deviceImageJP2: true
    },
    "iphone-6-spacegray": _.clone(iPhone6BaseDevice),
    "iphone-6-spacegray-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6-silver": _.clone(iPhone6BaseDevice),
    "iphone-6-silver-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6-gold": _.clone(iPhone6BaseDevice),
    "iphone-6-gold-hand": _.clone(iPhone6BaseDeviceHand),
    "iphone-6plus-spacegray": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-spacegray-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-6plus-silver": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-silver-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-6plus-gold": _.clone(iPhone6PlusBaseDevice),
    "iphone-6plus-gold-hand": _.clone(iPhone6PlusBaseDeviceHand),
    "iphone-5s-spacegray": _.clone(iPhone5BaseDevice),
    "iphone-5s-spacegray-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5s-silver": _.clone(iPhone5BaseDevice),
    "iphone-5s-silver-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5s-gold": _.clone(iPhone5BaseDevice),
    "iphone-5s-gold-hand": _.clone(iPhone5BaseDeviceHand),
    "iphone-5c-green": _.clone(iPhone5CBaseDevice),
    "iphone-5c-green-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-blue": _.clone(iPhone5CBaseDevice),
    "iphone-5c-blue-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-pink": _.clone(iPhone5CBaseDevice),
    "iphone-5c-pink-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-white": _.clone(iPhone5CBaseDevice),
    "iphone-5c-white-hand": _.clone(iPhone5CBaseDeviceHand),
    "iphone-5c-yellow": _.clone(iPhone5CBaseDevice),
    "iphone-5c-yellow-hand": _.clone(iPhone5CBaseDeviceHand),
    "ipad-mini-spacegray": _.clone(iPadMiniBaseDevice),
    "ipad-mini-spacegray-hand": _.clone(iPadMiniBaseDeviceHand),
    "ipad-mini-silver": _.clone(iPadMiniBaseDevice),
    "ipad-mini-silver-hand": _.clone(iPadMiniBaseDeviceHand),
    "ipad-air-spacegray": _.clone(iPadAirBaseDevice),
    "ipad-air-spacegray-hand": _.clone(iPadAirBaseDeviceHand),
    "ipad-air-silver": _.clone(iPadAirBaseDevice),
    "ipad-air-silver-hand": _.clone(iPadAirBaseDeviceHand),
    "nexus-5-black": _.clone(Nexus5BaseDevice),
    "nexus-5-black-hand": _.clone(Nexus5BaseDeviceHand),
    "nexus-9": _.clone(Nexus9BaseDevice),
    "applewatchsport-38-aluminum-sportband-black": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-blue": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-green": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-pink": _.clone(AppleWatch38Device),
    "applewatchsport-38-aluminum-sportband-white": _.clone(AppleWatch38Device),
    "applewatch-38-black-bracelet": _.clone(AppleWatch38Device),
    "applewatch-38-steel-bracelet": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-blue": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-gray": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-buckle-red": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-sportband-black": _.clone(AppleWatch38Device),
    "applewatchedition-38-gold-sportband-white": _.clone(AppleWatch38Device),
    "applewatchsport-42-aluminum-sportband-black": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-blue": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-green": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-pink": _.clone(AppleWatch42Device),
    "applewatchsport-42-aluminum-sportband-white": _.clone(AppleWatch42Device),
    "applewatch-42-black-bracelet": _.clone(AppleWatch42Device),
    "applewatch-42-steel-bracelet": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-blue": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-gray": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-buckle-red": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-sportband-black": _.clone(AppleWatch42Device),
    "applewatchedition-42-gold-sportband-white": _.clone(AppleWatch42Device)
  };

  exports.DeviceComponent.Devices = Devices;

}).call(this);
