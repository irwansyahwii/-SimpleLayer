// Generated by CoffeeScript 1.9.2
(function() {
  var BaseClass, CanvasClass, Events,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  CanvasClass = (function(superClass) {
    extend(CanvasClass, superClass);

    function CanvasClass() {
      this.addListener = bind(this.addListener, this);
      return CanvasClass.__super__.constructor.apply(this, arguments);
    }

    CanvasClass.define("width", {
      get: function() {
        return window.innerWidth;
      }
    });

    CanvasClass.define("height", {
      get: function() {
        return window.innerHeight;
      }
    });

    CanvasClass.define("size", {
      get: function() {
        return {
          width: this.width,
          height: this.height
        };
      }
    });

    CanvasClass.define("frame", {
      get: function() {
        return {
          x: 0,
          y: 0,
          width: this.width,
          height: this.height
        };
      }
    });

    CanvasClass.prototype.addListener = function(eventName, listener) {
      if (eventName === "resize") {
        Events.wrap(window).addEventListener("resize", (function(_this) {
          return function() {
            return _this.emit("resize");
          };
        })(this));
      }
      return CanvasClass.__super__.addListener.call(this, eventName, listener);
    };

    CanvasClass.prototype.on = CanvasClass.prototype.addListener;

    return CanvasClass;

  })(BaseClass);

  exports.Canvas = new CanvasClass;

}).call(this);
