// Generated by CoffeeScript 1.9.2
(function() {
  var _Force2DProperties, _WebkitProperties, filterFormat;

  filterFormat = function(value, unit) {
    return "" + (Utils.round(value, 2)) + unit;
  };

  _WebkitProperties = [["blur", "blur", 0, "px"], ["brightness", "brightness", 100, "%"], ["saturate", "saturate", 100, "%"], ["hue-rotate", "hueRotate", 0, "deg"], ["contrast", "contrast", 100, "%"], ["invert", "invert", 0, "%"], ["grayscale", "grayscale", 0, "%"], ["sepia", "sepia", 0, "%"]];

  _Force2DProperties = {
    "z": 0,
    "scaleX": 1,
    "scaleY": 1,
    "scaleZ": 1,
    "skewX": 0,
    "skewY": 0,
    "rotationX": 0,
    "rotationY": 0
  };

  exports.LayerStyle = {
    width: function(layer) {
      return layer._properties.width + "px";
    },
    height: function(layer) {
      return layer._properties.height + "px";
    },
    display: function(layer) {
      if (layer._properties.visible === true) {
        return "block";
      }
      return "none";
    },
    opacity: function(layer) {
      return layer._properties.opacity;
    },
    overflow: function(layer) {
      if (layer._properties.scrollHorizontal === true || layer._properties.scrollVertical === true) {
        return "auto";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    overflowX: function(layer) {
      if (layer._properties.scrollHorizontal === true) {
        return "scroll";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    overflowY: function(layer) {
      if (layer._properties.scrollVertical === true) {
        return "scroll";
      }
      if (layer._properties.clip === true) {
        return "hidden";
      }
      return "visible";
    },
    zIndex: function(layer) {
      return layer._properties.index;
    },
    webkitFilter: function(layer) {
      var css, cssName, fallback, i, layerName, len, ref, unit;
      css = [];
      for (i = 0, len = _WebkitProperties.length; i < len; i++) {
        ref = _WebkitProperties[i], cssName = ref[0], layerName = ref[1], fallback = ref[2], unit = ref[3];
        if (layer._properties.hasOwnProperty(layerName) && layer[layerName] !== fallback) {
          css.push(cssName + "(" + (filterFormat(layer[layerName], unit)) + ")");
        }
      }
      return css.join(" ");
    },
    webkitTransform: function(layer) {
      if (layer._prefer2d || layer._properties.force2d) {
        return exports.LayerStyle.webkitTransformForce2d(layer);
      }
      return "translate3d(" + layer._properties.x + "px," + layer._properties.y + "px," + layer._properties.z + "px) scale(" + layer._properties.scale + ") scale3d(" + layer._properties.scaleX + "," + layer._properties.scaleY + "," + layer._properties.scaleZ + ") skew(" + layer._properties.skew + "deg," + layer._properties.skew + "deg) skewX(" + layer._properties.skewX + "deg) skewY(" + layer._properties.skewY + "deg) rotateX(" + layer._properties.rotationX + "deg) rotateY(" + layer._properties.rotationY + "deg) rotateZ(" + layer._properties.rotationZ + "deg)";
    },
    webkitTransformForce2d: function(layer) {
      var css, p, v;
      css = [];
      for (p in _Force2DProperties) {
        v = _Force2DProperties[p];
        if (layer._properties[p] !== v) {
          console.warn("Layer property '" + p + "'' will be ignored with force2d enabled");
        }
      }
      css.push("translate(" + layer._properties.x + "px," + layer._properties.y + "px)");
      css.push("scale(" + layer._properties.scale + ")");
      css.push("skew(" + layer._properties.skew + "deg," + layer._properties.skew + "deg)");
      css.push("rotate(" + layer._properties.rotationZ + "deg)");
      return css.join(" ");
    },
    webkitTransformOrigin: function(layer) {
      return (layer._properties.originX * 100) + "% " + (layer._properties.originY * 100) + "%";
    },
    webkitPerspective: function(layer) {
      return "" + layer._properties.perspective;
    },
    pointerEvents: function(layer) {
      if (layer._properties.ignoreEvents) {
        return "none";
      } else {
        return "auto";
      }
    },
    boxShadow: function(layer) {
      if (!layer._properties.shadowColor) {
        return "";
      }
      return layer._properties.shadowX + "px " + layer._properties.shadowY + "px " + layer._properties.shadowBlur + "px " + layer._properties.shadowSpread + "px " + layer._properties.shadowColor;
    },
    backgroundColor: function(layer) {
      return layer._properties.backgroundColor;
    },
    color: function(layer) {
      return layer._properties.color;
    },
    borderRadius: function(layer) {
      if (!_.isNumber(layer._properties.borderRadius)) {
        return layer._properties.borderRadius;
      }
      return layer._properties.borderRadius + "px";
    },
    border: function(layer) {
      return layer._properties.borderWidth + "px solid " + layer._properties.borderColor;
    }
  };

}).call(this);
