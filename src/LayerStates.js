// Generated by CoffeeScript 1.9.2
(function() {
  var BaseClass, Defaults, Events, LayerStatesIgnoredKeys, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  _ = require("./Underscore")._;

  Events = require("./Events").Events;

  BaseClass = require("./BaseClass").BaseClass;

  Defaults = require("./Defaults").Defaults;

  LayerStatesIgnoredKeys = ["ignoreEvents"];

  Events.StateWillSwitch = "willSwitch";

  Events.StateDidSwitch = "didSwitch";

  exports.LayerStates = (function(superClass) {
    extend(LayerStates, superClass);

    function LayerStates(layer) {
      this.layer = layer;
      this._states = {};
      this._orderedStates = [];
      this.animationOptions = {};
      this.add("default", this.layer.props);
      this._currentState = "default";
      this._previousStates = [];
      LayerStates.__super__.constructor.apply(this, arguments);
    }

    LayerStates.prototype.add = function(stateName, properties) {
      var error, k, v;
      if (_.isObject(stateName)) {
        for (k in stateName) {
          v = stateName[k];
          this.add(k, v);
        }
        return;
      }
      error = function() {
        throw Error("Usage example: layer.states.add(\"someName\", {x:500})");
      };
      if (!_.isString(stateName)) {
        error();
      }
      if (!_.isObject(properties)) {
        error();
      }
      this._orderedStates.push(stateName);
      return this._states[stateName] = LayerStates.filterStateProperties(properties);
    };

    LayerStates.prototype.remove = function(stateName) {
      if (!this._states.hasOwnProperty(stateName)) {
        return;
      }
      delete this._states[stateName];
      return this._orderedStates = _.without(this._orderedStates, stateName);
    };

    LayerStates.prototype["switch"] = function(stateName, animationOptions, instant) {
      var animatablePropertyKeys, animatingKeys, k, properties, propertyName, ref, ref1, v, value;
      if (instant == null) {
        instant = false;
      }
      if (!this._states.hasOwnProperty(stateName)) {
        throw Error("No such state: '" + stateName + "'");
      }
      this.emit(Events.StateWillSwitch, this._currentState, stateName, this);
      this._previousStates.push(this._currentState);
      this._currentState = stateName;
      properties = {};
      animatingKeys = this.animatingKeys();
      ref = this._states[stateName];
      for (propertyName in ref) {
        value = ref[propertyName];
        if (indexOf.call(LayerStatesIgnoredKeys, propertyName) >= 0) {
          continue;
        }
        if (indexOf.call(animatingKeys, propertyName) < 0) {
          continue;
        }
        if (_.isFunction(value)) {
          value = value.call(this.layer, this.layer, stateName);
        }
        properties[propertyName] = value;
      }
      animatablePropertyKeys = [];
      for (k in properties) {
        v = properties[k];
        if (_.isNumber(v)) {
          animatablePropertyKeys.push(k);
        }
      }
      if (animatablePropertyKeys.length === 0) {
        instant = true;
      }
      if (instant === true) {
        this.layer.props = properties;
        return this.emit(Events.StateDidSwitch, _.last(this._previousStates), stateName, this);
      } else {
        if (animationOptions == null) {
          animationOptions = this.animationOptions;
        }
        animationOptions.properties = properties;
        if ((ref1 = this._animation) != null) {
          ref1.stop();
        }
        this._animation = this.layer.animate(animationOptions);
        return this._animation.on("stop", (function(_this) {
          return function() {
            for (k in properties) {
              v = properties[k];
              if (!_.isNumber(v)) {
                _this.layer[k] = v;
              }
            }
            return _this.emit(Events.StateDidSwitch, _.last(_this._previousStates), stateName, _this);
          };
        })(this));
      }
    };

    LayerStates.prototype.switchInstant = function(stateName) {
      return this["switch"](stateName, null, true);
    };

    LayerStates.define("state", {
      get: function() {
        return this._currentState;
      }
    });

    LayerStates.define("current", {
      get: function() {
        return this._currentState;
      }
    });

    LayerStates.prototype.states = function() {
      return _.clone(this._orderedStates);
    };

    LayerStates.prototype.animatingKeys = function() {
      var keys, ref, state, stateName;
      keys = [];
      ref = this._states;
      for (stateName in ref) {
        state = ref[stateName];
        keys = _.union(keys, _.keys(state));
      }
      return keys;
    };

    LayerStates.prototype.previous = function(states, animationOptions) {
      if (states == null) {
        states = this.states();
      }
      return this["switch"](Utils.arrayPrev(states, this._currentState), animationOptions);
    };

    LayerStates.prototype.next = function() {
      var states;
      states = Utils.arrayFromArguments(arguments);
      if (!states.length) {
        states = this.states();
      }
      return this["switch"](Utils.arrayNext(states, this._currentState));
    };

    LayerStates.prototype.last = function(animationOptions) {
      return this["switch"](_.last(this._previousStates), animationOptions);
    };

    LayerStates.prototype.emit = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      LayerStates.__super__.emit.apply(this, arguments);
      return (ref = this.layer).emit.apply(ref, args);
    };

    LayerStates.filterStateProperties = function(properties) {
      var k, stateProperties, v;
      stateProperties = {};
      for (k in properties) {
        v = properties[k];
        if (_.isNumber(v) || _.isFunction(v) || _.isBoolean(v) || _.isString(v)) {
          stateProperties[k] = v;
        }
      }
      return stateProperties;
    };

    return LayerStates;

  })(BaseClass);

}).call(this);
