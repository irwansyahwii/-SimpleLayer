// Generated by CoffeeScript 1.9.2
(function() {
  var CounterKey, DefinedPropertiesKey, DefinedPropertiesValuesKey, EventEmitter, Utils, _, capitalizeFirstLetter,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  EventEmitter = require("./EventEmitter").EventEmitter;

  CounterKey = "_ObjectCounter";

  DefinedPropertiesKey = "_DefinedPropertiesKey";

  DefinedPropertiesValuesKey = "_DefinedPropertiesValuesKey";

  capitalizeFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  exports.BaseClass = (function(superClass) {
    extend(BaseClass, superClass);

    BaseClass.define = function(propertyName, descriptor) {
      var getName, i, j, len, ref, setName;
      ref = ["enumerable", "exportable", "importable"];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (descriptor.hasOwnProperty(i)) {
          if (!_.isBoolean(descriptor[i])) {
            throw Error("woops " + propertyName + " " + descriptor[i]);
          }
        }
      }
      if (this !== BaseClass) {
        descriptor.propertyName = propertyName;
        if (descriptor.enumerable == null) {
          descriptor.enumerable = true;
        }
        if (descriptor.exportable == null) {
          descriptor.exportable = true;
        }
        if (descriptor.importable == null) {
          descriptor.importable = true;
        }
        descriptor.importable = descriptor.importable && descriptor.set;
        if (descriptor.exportable || descriptor.importable) {
          if (this[DefinedPropertiesKey] == null) {
            this[DefinedPropertiesKey] = {};
          }
          this[DefinedPropertiesKey][propertyName] = descriptor;
        }
      }
      getName = "get" + (capitalizeFirstLetter(propertyName));
      this.prototype[getName] = descriptor.get;
      descriptor.get = this.prototype[getName];
      if (descriptor.set) {
        setName = "set" + (capitalizeFirstLetter(propertyName));
        this.prototype[setName] = descriptor.set;
        descriptor.set = this.prototype[setName];
      }
      return Object.defineProperty(this.prototype, propertyName, descriptor);
    };

    BaseClass.simpleProperty = function(name, fallback, options) {
      if (options == null) {
        options = {};
      }
      return _.extend(options, {
        "default": fallback,
        get: function() {
          return this._getPropertyValue(name);
        },
        set: function(value) {
          return this._setPropertyValue(name, value);
        }
      });
    };

    BaseClass.proxyProperty = function(keyPath, options) {
      var objectKey;
      if (options == null) {
        options = {};
      }
      objectKey = keyPath.split(".")[0];
      return _.extend(options, {
        get: function() {
          if (!_.isObject(this[objectKey])) {
            return;
          }
          return Utils.getValueForKeyPath(this, keyPath);
        },
        set: function(value) {
          if (!_.isObject(this[objectKey])) {
            return;
          }
          return Utils.setValueForKeyPath(this, keyPath, value);
        }
      });
    };

    BaseClass.prototype._setPropertyValue = function(k, v) {
      return this[DefinedPropertiesValuesKey][k] = v;
    };

    BaseClass.prototype._getPropertyValue = function(k) {
      return Utils.valueOrDefault(this[DefinedPropertiesValuesKey][k], this._getPropertyDefaultValue(k));
    };

    BaseClass.prototype._getPropertyDefaultValue = function(k) {
      return this._propertyList()[k]["default"];
    };

    BaseClass.prototype._propertyList = function() {
      return this.constructor[DefinedPropertiesKey];
    };

    BaseClass.prototype.keys = function() {
      return _.keys(this.props);
    };

    BaseClass.define("props", {
      importable: false,
      exportable: false,
      get: function() {
        var descriptor, key, keys, propertyList;
        keys = [];
        propertyList = this._propertyList();
        for (key in propertyList) {
          descriptor = propertyList[key];
          if (descriptor.exportable) {
            keys.push(key);
          }
        }
        return _.pick(this, keys);
      },
      set: function(value) {
        var k, propertyList, ref, results, v;
        propertyList = this._propertyList();
        results = [];
        for (k in value) {
          v = value[k];
          if ((ref = propertyList[k]) != null ? ref.importable : void 0) {
            results.push(this[k] = v);
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    });

    BaseClass.define("id", {
      get: function() {
        return this._id;
      }
    });

    BaseClass.prototype.toInspect = function() {
      return "<" + this.constructor.name + " id:" + (this.id || null) + ">";
    };

    function BaseClass(options) {
      this.toInspect = bind(this.toInspect, this);
      this._getPropertyValue = bind(this._getPropertyValue, this);
      this._setPropertyValue = bind(this._setPropertyValue, this);
      var base;
      BaseClass.__super__.constructor.apply(this, arguments);
      this._context = typeof Framer !== "undefined" && Framer !== null ? Framer.CurrentContext : void 0;
      this[DefinedPropertiesValuesKey] = {};
      if ((base = this.constructor)[CounterKey] == null) {
        base[CounterKey] = 0;
      }
      this.constructor[CounterKey] += 1;
      this._id = this.constructor[CounterKey];
      this._applyOptionsAndDefaults(options);
    }

    BaseClass.prototype._applyOptionsAndDefaults = function(options) {
      var descriptor, key, ref, results, value;
      ref = this._propertyList();
      results = [];
      for (key in ref) {
        descriptor = ref[key];
        if (descriptor.set) {
          value = Utils.valueOrDefault((descriptor.importable ? options != null ? options[key] : void 0 : void 0), this._getPropertyDefaultValue(key));
          if (!(value === null || value === (void 0))) {
            results.push(this[key] = value);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    return BaseClass;

  })(EventEmitter);

}).call(this);
