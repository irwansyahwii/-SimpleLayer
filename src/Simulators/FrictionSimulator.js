// Generated by CoffeeScript 1.9.2
(function() {
  var Defaults, Integrator, Simulator, Utils,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Utils = require("../Utils");

  Defaults = require("../Defaults").Defaults;

  Simulator = require("../Simulator").Simulator;

  Integrator = require("../Integrator").Integrator;

  exports.FrictionSimulator = (function(superClass) {
    extend(FrictionSimulator, superClass);

    function FrictionSimulator() {
      this.finished = bind(this.finished, this);
      return FrictionSimulator.__super__.constructor.apply(this, arguments);
    }

    FrictionSimulator.prototype.setup = function(options) {
      this.options = Defaults.getDefaults("FrictionSimulator", options);
      this.options = _.defaults(options, {
        velocity: 0,
        position: 0
      });
      this._state = {
        x: this.options.position,
        v: this.options.velocity
      };
      return this._integrator = new Integrator((function(_this) {
        return function(state) {
          return -(_this.options.friction * state.v);
        };
      })(this));
    };

    FrictionSimulator.prototype.next = function(delta) {
      this._state = this._integrator.integrateState(this._state, delta);
      return this._state;
    };

    FrictionSimulator.prototype.finished = function() {
      return Math.abs(this._state.v) < this.options.tolerance;
    };

    return FrictionSimulator;

  })(Simulator);

}).call(this);
