// Generated by CoffeeScript 1.9.2
(function() {
  var BaseClass, Config, Defaults, Events, FrictionSimulator, MomentumBounceSimulator, SimulatorClasses, SpringSimulator, Utils, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require("./Underscore")._;

  Utils = require("./Utils");

  Config = require("./Config").Config;

  Defaults = require("./Defaults").Defaults;

  BaseClass = require("./BaseClass").BaseClass;

  Events = require("./Events").Events;

  SpringSimulator = require("./Simulators/SpringSimulator").SpringSimulator;

  FrictionSimulator = require("./Simulators/FrictionSimulator").FrictionSimulator;

  MomentumBounceSimulator = require("./Simulators/MomentumBounceSimulator").MomentumBounceSimulator;

  Events.SimulationStart = 'simulationStart';

  Events.SimulationStep = 'simulationStep';

  Events.SimulationStop = 'simulationStop';

  SimulatorClasses = {
    "spring": SpringSimulator,
    "friction": FrictionSimulator,
    "inertial-scroll": MomentumBounceSimulator
  };

  exports.Simulation = (function(superClass) {
    extend(Simulation, superClass);

    function Simulation(options) {
      var SimulatorClass;
      if (options == null) {
        options = {};
      }
      this._update = bind(this._update, this);
      this._start = bind(this._start, this);
      this.start = bind(this.start, this);
      Simulation.__super__.constructor.call(this, options);
      this.options = _.defaults(options, {
        layer: null,
        properties: {},
        model: "spring",
        modelOptions: {},
        delay: 0,
        debug: false
      });
      this._running = false;
      SimulatorClass = SimulatorClasses[this.options.model] || SpringSimulator;
      this._simulator = new SimulatorClass(this.options.modelOptions);
    }

    Simulation.prototype.animatingProperties = function() {
      return _.keys(this.options.properties);
    };

    Simulation.prototype.start = function() {
      var animatingProperties, animation, property, ref;
      if (this.options.layer === null) {
        console.error("Simulation: missing layer");
      }
      if (this.options.debug) {
        console.log("Simulation.start " + this._simulator.constructor.name, this.options.modelOptions);
      }
      animatingProperties = this.animatingProperties();
      ref = this.options.layer.animatingProperties();
      for (property in ref) {
        animation = ref[property];
        if (indexOf.call(animatingProperties, property) >= 0) {
          animation.stop();
        }
      }
      if (this.options.delay) {
        Utils.delay(this.options.delay, this._start);
      } else {
        this._start();
      }
      return true;
    };

    Simulation.prototype.stop = function(emit) {
      if (emit == null) {
        emit = true;
      }
      if (!this._running) {
        return;
      }
      this._running = false;
      this.options.layer._context._animationList = _.without(this.options.layer._context._animationList, this);
      if (emit) {
        this.emit(Events.SimulationStop);
      }
      return Framer.Loop.off("update", this._update);
    };

    Simulation.prototype.emit = function(event) {
      Simulation.__super__.emit.apply(this, arguments);
      return this.options.layer.emit(event, this);
    };

    Simulation.prototype._start = function() {
      if (this._running) {
        return;
      }
      this._running = true;
      this.options.layer._context._animationList.push(this);
      this.emit(Events.SimulationStart);
      return Framer.Loop.on("update", this._update);
    };

    Simulation.prototype._update = function(delta) {
      var emit, result;
      if (this._simulator.finished()) {
        this.stop(emit = false);
        this.emit("end");
        return this.emit(Events.SimulationStop);
      } else {
        result = this._simulator.next(delta);
        return this.emit(Events.SimulationStep, result, delta);
      }
    };

    Simulation.define("simulator", {
      get: function() {
        return this._simulator;
      }
    });

    Simulation.prototype.finished = function() {
      return this._simulator.finished();
    };

    return Simulation;

  })(BaseClass);

}).call(this);
