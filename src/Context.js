// Generated by CoffeeScript 1.9.2
(function() {
  var BaseClass, Config, Counter, DOMElement, Engine, EventManager, Node, Utils, _, famous,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Utils = require("./Utils");

  _ = require("./Underscore")._;

  BaseClass = require("./BaseClass").BaseClass;

  Config = require("./Config").Config;

  EventManager = require("./EventManager").EventManager;

  Counter = 1;

  famous = require("famous");

  Engine = famous.core.FamousEngine;

  Node = famous.core.Node;

  DOMElement = famous.domRenderables.DOMElement;

  exports.Context = (function(superClass) {
    extend(Context, superClass);

    function Context(options) {
      if (options == null) {
        options = {};
      }
      this._appendRootElement = bind(this._appendRootElement, this);
      this._framerOriginal__appendRootElement = bind(this._framerOriginal__appendRootElement, this);
      Context.__super__.constructor.apply(this, arguments);
      Counter++;
      options = _.defaults(options, {
        contextName: null,
        parentLayer: null,
        name: null
      });
      if (!options.name) {
        throw Error("Contexts need a name");
      }
      this._parentLayer = options.parentLayer;
      this._name = options.name;
      this.reset();
    }

    Context.prototype._framerOriginal_reset = function() {
      var animation, i, len, ref, ref1, ref2, ref3;
      if ((ref = this.eventManager) != null) {
        ref.reset();
      }
      this.eventManager = new EventManager;
      if (this._rootElement) {
        if (this._rootElement.parentNode) {
          this._rootElement.parentNode.removeChild(this._rootElement);
        } else {
          this._rootElement.__cancelAppendChild = true;
        }
      }
      this._createRootElement();
      if ((ref1 = this._delayTimers) != null) {
        ref1.map(function(timer) {
          return window.clearTimeout(timer);
        });
      }
      if ((ref2 = this._delayIntervals) != null) {
        ref2.map(function(timer) {
          return window.clearInterval(timer);
        });
      }
      if (this._animationList) {
        ref3 = this._animationList;
        for (i = 0, len = ref3.length; i < len; i++) {
          animation = ref3[i];
          animation.stop(false);
        }
      }
      this._layerList = [];
      this._animationList = [];
      this._delayTimers = [];
      this._delayIntervals = [];
      this._layerIdCounter = 1;
      return this.emit("reset", this);
    };

    Context.prototype.reset = function() {
      var animation, i, len, ref, ref1, ref2, ref3;
      if ((ref = this.eventManager) != null) {
        ref.reset();
      }
      this.eventManager = new EventManager;
      if (this._rootElement) {
        if (this._rootElement._node.isMounted()) {
          this._rootElement._node.dismount();
        } else {
          this._rootElement.__cancelAppendChild = true;
        }
      }
      this._createRootElement();
      if ((ref1 = this._delayTimers) != null) {
        ref1.map(function(timer) {
          return window.clearTimeout(timer);
        });
      }
      if ((ref2 = this._delayIntervals) != null) {
        ref2.map(function(timer) {
          return window.clearInterval(timer);
        });
      }
      if (this._animationList) {
        ref3 = this._animationList;
        for (i = 0, len = ref3.length; i < len; i++) {
          animation = ref3[i];
          animation.stop(false);
        }
      }
      this._layerList = [];
      this._animationList = [];
      this._delayTimers = [];
      this._delayIntervals = [];
      this._layerIdCounter = 1;
      return this.emit("reset", this);
    };

    Context.prototype.destroy = function() {
      this.reset();
      if (this._rootElement._node.isMounted()) {
        this._rootElement._node.dismount();
      }
      return Utils.domCompleteCancel(this._appendRootElement);
    };

    Context.prototype.getRootElement = function() {
      return this._rootElement;
    };

    Context.prototype.getLayers = function() {
      return _.clone(this._layerList);
    };

    Context.prototype.addLayer = function(layer) {
      if (indexOf.call(this._layerList, layer) >= 0) {
        return;
      }
      this._layerList.push(layer);
      return null;
    };

    Context.prototype.removeLayer = function(layer) {
      this._layerList = _.without(this._layerList, layer);
      return null;
    };

    Context.prototype.layerCount = function() {
      return this._layerList.length;
    };

    Context.prototype.nextLayerId = function() {
      return this._layerIdCounter++;
    };

    Context.prototype._framerOriginal__createRootElement = function() {
      this._rootElement = document.createElement("div");
      this._rootElement.id = "FramerContextRoot-" + this._name;
      this._rootElement.classList.add("framerContext");
      if (this._parentLayer) {
        return this._appendRootElement();
      } else {
        return Utils.domComplete(this._appendRootElement);
      }
    };

    Context.prototype._createRootElement = function() {
      console.log("=== Context ===== ");
      console.log("Assiging new Node() to @_rootNode");
      this._rootNode = new Node();
      console.log("Creating new DOMElement() and passing the @_rootNode");
      this._rootElement = new DOMElement(this._rootNode, {
        tagName: "div"
      });
      this._rootElement.id = "FramerContextRoot-" + this._name;
      if (this._parentLayer) {
        return this._appendRootElement();
      } else {
        return Utils.domComplete(this._appendRootElement);
      }
    };

    Context.prototype._framerOriginal__appendRootElement = function() {
      var parentElement, ref;
      parentElement = (ref = this._parentLayer) != null ? ref._element : void 0;
      if (parentElement == null) {
        parentElement = document.body;
      }
      return parentElement.appendChild(this._rootElement);
    };

    Context.prototype._appendRootElement = function() {
      var parentElement, ref;
      console.log("=== Context ===== ");
      parentElement = (ref = this._parentLayer) != null ? ref._element._node : void 0;
      if (parentElement == null) {
        console.log("Calls Engine.createScene()");
        parentElement = Engine.createScene();
      }
      console.log("Calls parentElement.addChild passing @_rootElement._node");
      return parentElement.addChild(this._rootElement._node);
    };

    Context.prototype.run = function(f) {
      var previousContext;
      previousContext = Framer.CurrentContext;
      Framer.CurrentContext = this;
      f();
      return Framer.CurrentContext = previousContext;
    };

    Context.define("width", {
      get: function() {
        if (this._parentLayer) {
          return this._parentLayer.width;
        }
        return window.innerWidth;
      }
    });

    Context.define("height", {
      get: function() {
        if (this._parentLayer) {
          return this._parentLayer.height;
        }
        return window.innerHeight;
      }
    });

    return Context;

  })(BaseClass);

}).call(this);
